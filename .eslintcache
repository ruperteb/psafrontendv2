[{"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\index.tsx":"1","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\reportWebVitals.ts":"2","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\resolvers.tsx":"3","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\App.tsx":"4","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\cache\\cache.tsx":"5","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\Navigation.tsx":"6","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\Loading.tsx":"7","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PropertyList.tsx":"8","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\SelectedPropertyListPanel.tsx":"9","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\NewPropertyModal.tsx":"10","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\ManageLandlordsPanel.tsx":"11","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PreviewPDFPanel.tsx":"12","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\SavedListsPanel.tsx":"13","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\reactivevariables\\reactivevariables.tsx":"14","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\gql\\gql.tsx":"15","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\SelectedPropertyPanel.tsx":"16","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\SavedListItem.tsx":"17","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\LandlordListItem.tsx":"18","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PDFOutput\\PropertyListLargeImagesPDF.tsx":"19","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PDFOutput\\SelectedPropertyListPDF.tsx":"20","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\UpdatePropertyModal.tsx":"21","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\DuplicatePremisesModal.tsx":"22","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PremisesNotesModal.tsx":"23","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\UpdatePremisesModal.tsx":"24","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\ContactListItem.tsx":"25","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PremisesList.tsx":"26","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\ImageGalleryModal.tsx":"27","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\NewPremisesModal.tsx":"28","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\Map.tsx":"29","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PropertyListItem.tsx":"30","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\assets\\svgIcons.js":"31","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\assets\\pin.js":"32","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PremisesListItem.tsx":"33","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\ImageSlider.tsx":"34","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PDFOutput\\PropertyListScheduleNoImages.tsx":"35"},{"size":1453,"mtime":1608641103063,"results":"36","hashOfConfig":"37"},{"size":425,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":466,"mtime":1608629691275,"results":"39","hashOfConfig":"37"},{"size":10292,"mtime":1613074814811,"results":"40","hashOfConfig":"37"},{"size":1402,"mtime":1610474111467,"results":"41","hashOfConfig":"37"},{"size":8328,"mtime":1614431285398,"results":"42","hashOfConfig":"37"},{"size":2514,"mtime":1608636235276,"results":"43","hashOfConfig":"37"},{"size":2486,"mtime":1612114888153,"results":"44","hashOfConfig":"37"},{"size":27004,"mtime":1614532918219,"results":"45","hashOfConfig":"37"},{"size":27324,"mtime":1612114818020,"results":"46","hashOfConfig":"37"},{"size":10817,"mtime":1612128484847,"results":"47","hashOfConfig":"37"},{"size":8996,"mtime":1614512462620,"results":"48","hashOfConfig":"37"},{"size":8670,"mtime":1614535337070,"results":"49","hashOfConfig":"37"},{"size":1551,"mtime":1614524572550,"results":"50","hashOfConfig":"37"},{"size":18195,"mtime":1614527482837,"results":"51","hashOfConfig":"37"},{"size":37199,"mtime":1614421012099,"results":"52","hashOfConfig":"37"},{"size":22997,"mtime":1614534145475,"results":"53","hashOfConfig":"37"},{"size":17858,"mtime":1612102937862,"results":"54","hashOfConfig":"37"},{"size":54150,"mtime":1614501591107,"results":"55","hashOfConfig":"37"},{"size":29000,"mtime":1614424169855,"results":"56","hashOfConfig":"37"},{"size":28455,"mtime":1612115194679,"results":"57","hashOfConfig":"37"},{"size":46134,"mtime":1614421012094,"results":"58","hashOfConfig":"37"},{"size":8735,"mtime":1612292797481,"results":"59","hashOfConfig":"37"},{"size":52138,"mtime":1614421012100,"results":"60","hashOfConfig":"37"},{"size":16156,"mtime":1612017522292,"results":"61","hashOfConfig":"37"},{"size":13427,"mtime":1612292015332,"results":"62","hashOfConfig":"37"},{"size":3813,"mtime":1609501155635,"results":"63","hashOfConfig":"37"},{"size":48812,"mtime":1614421012096,"results":"64","hashOfConfig":"37"},{"size":6556,"mtime":1614421012096,"results":"65","hashOfConfig":"37"},{"size":10350,"mtime":1612114917513,"results":"66","hashOfConfig":"37"},{"size":18904,"mtime":1609075640674,"results":"67","hashOfConfig":"37"},{"size":657,"mtime":1609328772225,"results":"68","hashOfConfig":"37"},{"size":17931,"mtime":1614421012098,"results":"69","hashOfConfig":"37"},{"size":24546,"mtime":1614512145415,"results":"70","hashOfConfig":"37"},{"size":28339,"mtime":1614501678288,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},"12t0a0m",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"75"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"75"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"75"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"75"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"75"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"75"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"75"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":53,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":56,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"75"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"75"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"75"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"75"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"75"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"75"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"75"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"75"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"75"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"75"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"75"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"75"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"75"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\index.tsx",["165","166","167","168","169","170","171"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport App from './App';\nimport { Customizer, mergeStyles } from 'office-ui-fabric-react';\n\nimport { AUTH_TOKEN } from './constants'\nimport { resolvers, typeDefs } from './resolvers';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  gql,\n  NormalizedCacheObject,\n  ApolloProvider,\n  ApolloLink,\n  HttpLink, useQuery\n} from '@apollo/client';\n\n\nimport { cache } from './cache/cache';\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link: new HttpLink({\n    uri: \"https://psabackendv2.herokuapp.com/\",\n    credentials: 'include',\n    headers: {\n      authorization: localStorage.getItem('token'),\n    },\n   /*  fetchOptions: {\n      mode: 'no-cors',\n    }, */\n  }),\n \n  typeDefs,\n  resolvers: {},\n\n\n  \n});\n\n\n\n// Inject some global styles\nmergeStyles({\n  selectors: {\n    ':global(body), :global(html), :global(#root)': {\n      margin: 0,\n      padding: 0,\n      height: '100vh'\n    }\n  }\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <ApolloProvider client={client}>\n    <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["172","173"],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\reportWebVitals.ts",[],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\resolvers.tsx",["174","175"],"import { gql, ApolloCache, Resolvers } from '@apollo/client';\r\n\r\n\r\nexport const typeDefs = gql`\r\n  extend type Query {\r\n    isLoggedIn: Boolean!\r\n    \r\n  }\r\n`;\r\n\r\ntype ResolverFn = (\r\n  parent: any,\r\n  args: any,\r\n  { cache } : { cache: ApolloCache<any> }\r\n) => any;\r\n\r\ninterface ResolverMap {\r\n  [field: string]: ResolverFn;\r\n}\r\n\r\ninterface AppResolvers extends Resolvers {\r\n  // We will update this with our app's resolvers later\r\n}\r\n\r\nexport const resolvers = {};","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\App.tsx",["176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201"],"import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n\r\nimport {\r\n  Stack, Text, Link, FontWeights, IComboBoxOption,\r\n  IComboBox,\r\n  SelectableOptionMenuItemType,\r\n} from 'office-ui-fabric-react';\r\nimport { GET_PROPERTIES, GET_NAV_STATE, GET_DISTINCT_SUBURBS, GET_DISTINCT_REGIONS, GET_SELECTED_PROPERTIES , GET_PDF_VARIABLES, GET_LANDLORDS, GET_PROPERTY_LISTS} from \"./gql/gql\"\r\nimport { Query, NavigationState, SelectedPropertyList, Landlord, PropertyList as SavedPropertyList } from \"./schematypes/schematypes\"\r\nimport { gql, useQuery, useApolloClient } from '@apollo/client';\r\nimport Loading from \"./components/Loading\"\r\nimport Navigation from \"./components/Navigation\"\r\nimport PropertyList from \"./components/PropertyList\"\r\nimport NewProperyModal from \"./components/NewPropertyModal\"\r\nimport SelectedPropertyPanel from \"./components/SelectedPropertyPanel\"\r\nimport SelectedPropertyListPanel from \"./components/SelectedPropertyListPanel\"\r\nimport PreviewPDFPanel from \"./components/PreviewPDFPanel\"\r\nimport ManageLandlordsPanel from \"./components/ManageLandlordsPanel\"\r\nimport SavedListsPanel from \"./components/SavedListsPanel\"\r\nimport {Cloudinary} from \"cloudinary-core\"\r\nimport { PDFViewer, PDFDownloadLink, Document, Page } from '@react-pdf/renderer';\r\n\r\nfunction App() {\r\n\r\n  var cl = new Cloudinary({cloud_name: \"drlfedqyz\", secure: true});\r\n\r\n \r\n\r\n\r\n  const [search, setSearch] = React.useState<string | undefined>(\"\");\r\n\r\n\r\n  const {\r\n    data: propertyData,\r\n    loading: propertyLoading,\r\n    error: propertyError\r\n  } = useQuery<Query>(GET_PROPERTIES);\r\n  \r\n  const {\r\n    data: suburbData,\r\n    loading: suburbLoading,\r\n    error: suburbError\r\n  } = useQuery<Query>(GET_DISTINCT_SUBURBS);\r\n\r\n  const {\r\n    data: regionData,\r\n    loading: regionLoading,\r\n    error: regionError\r\n  } = useQuery<Query>(GET_DISTINCT_REGIONS);\r\n\r\n  const {\r\n    data: navigationStateData,\r\n    loading: navigationLoading,\r\n    error: navigationError\r\n  } = useQuery<Query>(GET_NAV_STATE);\r\n\r\n  const {\r\n    data: pdfVariables,\r\n    loading: pdfLoading,\r\n    error: pdfError\r\n  } = useQuery<Query>(GET_PDF_VARIABLES);\r\n\r\n  const {\r\n    data: propertyListData,\r\n    loading: propertyListLoading,\r\n    error: propertyListError\r\n} = useQuery<Query>(GET_SELECTED_PROPERTIES);\r\n\r\nvar propertyIdList = propertyListData?.selectedPropertyList?.map((property) => {\r\n  return property.propertyId\r\n})\r\n\r\n  /* if(suburbData !== undefined) */\r\n  const suburbWC = suburbData?.distinctSuburbs!.filter((suburb) => {\r\n    return (suburb.province === \"WC\")\r\n  })\r\n\r\n  const suburbWCFormatted = suburbWC?.map((suburb) => {\r\n    return { key: `${suburb.suburb} ${suburb.province} `, text: suburb.suburb }\r\n  })\r\n\r\n  const suburbGau = suburbData?.distinctSuburbs!.filter((suburb) => {\r\n    return (suburb.province === \"Gau\")\r\n  })\r\n\r\n  const suburbGauFormatted = suburbGau?.map((suburb) => {\r\n    return { key: `${suburb.suburb} ${suburb.province} `, text: suburb.suburb }\r\n  })\r\n\r\n  const suburbKZN = suburbData?.distinctSuburbs!.filter((suburb) => {\r\n    return (suburb.province === \"KZN\")\r\n  })\r\n\r\n  const suburbKZNFormatted = suburbKZN?.map((suburb) => {\r\n    return { key: `${suburb.suburb} ${suburb.province} `, text: suburb.suburb }\r\n  })\r\n\r\n  const suburbOther = suburbData?.distinctSuburbs!.filter((suburb) => {\r\n    return (suburb.province !== \"KZN\" && suburb.province !== \"Gau\" && suburb.province !== \"WC\")\r\n  })\r\n\r\n  const suburbOtherFormatted = suburbOther?.map((suburb) => {\r\n    return { key: `${suburb.suburb} ${suburb.province} `, text: suburb.suburb }\r\n  })\r\n\r\n  var distinctSuburbsOptions: IComboBoxOption[] = []\r\n  if (suburbWCFormatted !== undefined && suburbGauFormatted !== undefined && suburbKZNFormatted !== undefined && suburbOtherFormatted !== undefined) {\r\n    distinctSuburbsOptions = [\r\n      { key: 'Header1', text: 'Western Cape', itemType: SelectableOptionMenuItemType.Header },\r\n      ...suburbWCFormatted,\r\n      { key: 'divider1', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n      { key: 'Header2', text: 'Gauteng', itemType: SelectableOptionMenuItemType.Header },\r\n      ...suburbGauFormatted,\r\n      { key: 'divider2', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n      { key: 'Header3', text: 'KwaZulu Natal', itemType: SelectableOptionMenuItemType.Header },\r\n      ...suburbKZNFormatted,\r\n      { key: 'divider3', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n      { key: 'Header4', text: 'Other Provinces', itemType: SelectableOptionMenuItemType.Header },\r\n      ...suburbOtherFormatted\r\n    ]\r\n  }\r\n\r\n  const regionWC = regionData?.distinctRegions!.filter((region) => {\r\n    return (region.province === \"WC\")\r\n  })\r\n\r\n  const regionWCFormatted = regionWC?.map((region) => {\r\n    return { key: `${region.region} ${region.province} `, text: region.region }\r\n  })\r\n\r\n  const regionGau = regionData?.distinctRegions!.filter((region) => {\r\n    return (region.province === \"Gau\")\r\n  })\r\n\r\n  const regionGauFormatted = regionGau?.map((region) => {\r\n    return { key: `${region.region} ${region.province} `, text: region.region }\r\n  })\r\n\r\n  const regionKZN = regionData?.distinctRegions!.filter((region) => {\r\n    return (region.province === \"KZN\")\r\n  })\r\n\r\n  const regionKZNFormatted = regionKZN?.map((region) => {\r\n    return { key: `${region.region} ${region.province} `, text: region.region }\r\n  })\r\n\r\n  const regionOther = regionData?.distinctRegions!.filter((region) => {\r\n    return (region.province !== \"KZN\" && region.province !== \"Gau\" && region.province !== \"WC\")\r\n  })\r\n\r\n  const regionOtherFormatted = regionOther?.map((region) => {\r\n    return { key: `${region.region} ${region.province} `, text: region.region }\r\n  })\r\n\r\n  var distinctRegionsOptions: IComboBoxOption[] = []\r\n  if (regionWCFormatted !== undefined && regionGauFormatted !== undefined && regionKZNFormatted !== undefined && regionOtherFormatted !== undefined) {\r\n    distinctRegionsOptions = [\r\n      { key: 'Header1', text: 'Western Cape', itemType: SelectableOptionMenuItemType.Header },\r\n      ...regionWCFormatted,\r\n      { key: 'divider1', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n      { key: 'Header2', text: 'Gauteng', itemType: SelectableOptionMenuItemType.Header },\r\n      ...regionGauFormatted,\r\n      { key: 'divider2', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n      { key: 'Header3', text: 'KwaZulu Natal', itemType: SelectableOptionMenuItemType.Header },\r\n      ...regionKZNFormatted,\r\n      { key: 'divider3', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n      { key: 'Header4', text: 'Other Provinces', itemType: SelectableOptionMenuItemType.Header },\r\n      ...regionOtherFormatted\r\n    ]\r\n  }\r\n\r\n\r\n\r\n  const {\r\n    data: landlordData,\r\n    loading: landlordLoading,\r\n    error: landlordError\r\n} = useQuery<Query>(GET_LANDLORDS);\r\n\r\nvar landLordsList: Landlord[] = landlordData?.landlords!\r\n\r\nconst landlordsFormatted = landLordsList?.map((landlord) => {\r\n  return { key: landlord.landlordName!, text: landlord.landlordName!, data: landlord }\r\n})\r\nvar landlordsOptions: IComboBoxOption[] = []\r\n\r\nif(landlordsFormatted !== undefined) {\r\n  landlordsOptions = [...landlordsFormatted]\r\n}\r\n\r\nconst {\r\n  data: propertyListsData,\r\n  loading: propertyListsLoading,\r\n  error: propertyListsError\r\n} = useQuery<Query>(GET_PROPERTY_LISTS);\r\n\r\nvar propertyLists: SavedPropertyList[] = propertyListsData?.propertyLists!\r\n  \r\n\r\n\r\n  if (propertyLoading) return <Loading></Loading>;\r\n  if (navigationLoading) return <Loading></Loading>;\r\n  if (propertyError) return <h1>ERROR</h1>;\r\n\r\n  var navigationState: NavigationState = {\r\n    showNewPropertyModal: false,\r\n    showUpdatePropertyModal:  false,\r\n    showNewPremisesModal: false,\r\n    showUpdatePremisesModal:  false,\r\n    showDuplicatePremisesModal: false,\r\n    showPremisesNotesModal: false,\r\n    showPreviewPDFPanel: false,\r\n    showFilterModal: false,\r\n    showImageGalleryModal: false,\r\n    selectedPropertyType: \"all\",\r\n    search: \"\",\r\n    showSelectedPropertyListPanel: false,\r\n    showSelectedPropertyPanel: false,\r\n    showManageLandlordsPanel: false,\r\n    showSavedListsPanel: false,\r\n    selectedPropertyId: 0,\r\n    selectedPremisesId: 0,\r\n  }\r\n\r\n  if (navigationStateData !== undefined) {\r\n    navigationState = navigationStateData!.navigationState!\r\n\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Stack\r\n      horizontalAlign=\"center\"\r\n      verticalAlign=\"start\"\r\n      verticalFill\r\n      styles={{\r\n        root: {\r\n          /*  width: '960px', */\r\n          margin: '0 auto',\r\n          textAlign: 'center',\r\n          color: '#605e5c',\r\n          /*   backgroundColor: \"#b18c481a;\" */\r\n          /* marginTop: \"100px\" */\r\n        }\r\n      }}\r\n      gap={15}\r\n    >\r\n      <Navigation selectedPropertyType={navigationState.selectedPropertyType} setSearch={setSearch} showSelectedPropertyListPanel={navigationState.showSelectedPropertyListPanel} showSavedListsPanel={navigationState.showSavedListsPanel} > </Navigation>\r\n      <PropertyList propertyData={propertyData} search={search}></PropertyList>\r\n      <NewProperyModal showNewPropertyModal={navigationState.showNewPropertyModal} distinctSuburbsOptions={distinctSuburbsOptions} distinctRegionsOptions={distinctRegionsOptions} landlordsOptions={landlordsOptions}></NewProperyModal>\r\n      <SelectedPropertyPanel distinctSuburbsOptions={distinctSuburbsOptions} distinctRegionsOptions={distinctRegionsOptions} landlordsOptions={landlordsOptions}></SelectedPropertyPanel>\r\n      <SelectedPropertyListPanel showSelectedPropertyListPanel={navigationState.showSelectedPropertyListPanel } propertyIdList={propertyIdList!}></SelectedPropertyListPanel>\r\n      <PreviewPDFPanel showPreviewPDFPanel={navigationState.showPreviewPDFPanel} enquiryName={pdfVariables?.pdfVariables?.enquiryName!} agent={pdfVariables?.pdfVariables?.agent!} propertyIdList={propertyIdList!}></PreviewPDFPanel>\r\n      <ManageLandlordsPanel showManageLandlordsPanel={navigationState.showManageLandlordsPanel} landLordsList={landLordsList}></ManageLandlordsPanel>\r\n     <SavedListsPanel showSavedListsPanel={navigationState.showSavedListsPanel} propertyLists={propertyLists} propertyIdList={propertyIdList!}></SavedListsPanel>\r\n    \r\n    </Stack>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\cache\\cache.tsx",[],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\Navigation.tsx",["202","203","204","205","206","207","208","209","210","211","212","213","214"],"import React from 'react';\r\n\r\nimport { Pivot, PivotItem, IPivotStyles } from 'office-ui-fabric-react/lib/Pivot';\r\nimport { SearchBox, ISearchBoxStyles, } from 'office-ui-fabric-react/lib/SearchBox';\r\nimport { Image, IImageProps, ImageFit } from 'office-ui-fabric-react/lib/Image';\r\n\r\nimport { CommandBarButton, IContextualMenuProps, IIconProps, Stack, IStackStyles, initializeIcons, Toggle, IToggleStyles, DefaultButton, IButtonStyles, BaseButton, Button } from 'office-ui-fabric-react';\r\n\r\nimport { isLoggedInVar } from \"../cache/cache\";\r\nimport HeaderImage from \"../assets/EBLogoHeader.png\"\r\n\r\nimport {navigationState} from \"../reactivevariables/reactivevariables\"\r\nimport {NavigationState} from \"../schematypes/schematypes\"\r\n\r\nconst addIcon: IIconProps = { iconName: 'Add' };\r\n\r\nconst filterIcon: IIconProps = { iconName: 'Filter' };\r\nconst checkListIcon: IIconProps = { iconName: 'CheckList' };\r\nconst listIcon: IIconProps = { iconName: 'List' };\r\n\r\nconst pivotStyles: Partial<IPivotStyles> = {\r\n  root: { /* width: \"100vw\", backgroundColor: \"#20314b\", marginBottom: \"10px\" */ },\r\n   link: {\r\n    selectors: {\r\n      '&:hover': {\r\n        backgroundColor: 'rgba(52, 90, 214, 0.14);',\r\n      }\r\n    }\r\n  }, \r\n  linkIsSelected: {\r\n    selectors: {\r\n      '&:hover': {\r\n        backgroundColor: 'rgba(52, 90, 214, 0.14);',\r\n      }\r\n    }\r\n  }\r\n};\r\nconst headerStackStyles: Partial<IStackStyles> = { root: { width: \"100vw\", backgroundColor: \"#20314b\", marginBottom: \"10px\" } };\r\nconst headerImageStyles: Partial<IStackStyles> = { root: { marginLeft: \"37.5%\", marginRight: \"auto\" } };\r\nconst stackStyles: Partial<IStackStyles> = { root: { height: 44 } };\r\nconst searchBoxStyles: Partial<ISearchBoxStyles> = { root: { width: 300, height: 44 } };\r\nconst toggleStyles: Partial<IToggleStyles> = { container: { marginTop: 5 }, label: { marginLeft: 4 } };\r\nconst commandBarStyles: Partial<IButtonStyles> = { root: { border: \"1px solid rgb(161, 159, 157);\" , padding: 15}, icon: { fontSize: 24}};\r\nconst signoutIcon: IIconProps = { iconName: 'SignOut' };\r\n\r\nconst getTabId = (itemKey: string | undefined) => {\r\n  return `NavigationPivot_${itemKey}`;\r\n};\r\n\r\n\r\n\r\ninterface Props {\r\n  \r\n  selectedPropertyType: string | undefined,\r\n  setSearch: React.Dispatch<React.SetStateAction<string | undefined>>,\r\n  showSelectedPropertyListPanel: boolean,\r\n  showSavedListsPanel: boolean,\r\n\r\n}\r\n\r\nexport const Navigation: React.FC<Props> = ({  selectedPropertyType,  setSearch,  showSelectedPropertyListPanel, showSavedListsPanel }) => {\r\n  initializeIcons();\r\n\r\n\r\n\r\n  const handleLinkClick = (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => {\r\n    if (item === undefined) {\r\n      navigationState (\r\n        {\r\n         ...navigationState(),\r\n        selectedPropertyType: \"\",\r\n       \r\n        }\r\n      )\r\n    } else {\r\n      \r\n      navigationState ( {...navigationState(), selectedPropertyType: item.props.itemKey!})\r\n    }\r\n\r\n  };\r\n\r\n  const onChangeSelectedPropertyListToggle = React.useCallback((ev: React.MouseEvent<HTMLElement>, checked: boolean | undefined) => {\r\n    if (showSelectedPropertyListPanel === false) {\r\n      navigationState ( {...navigationState(), showSelectedPropertyListPanel: true})\r\n     \r\n    } else {\r\n      navigationState ( {...navigationState(), showSelectedPropertyListPanel: false})\r\n    }\r\n\r\n  },[showSelectedPropertyListPanel])\r\n\r\n  const onChangeSearch = React.useCallback(\r\n    (event?: React.ChangeEvent<HTMLInputElement>, newValue?: string) => {\r\n\r\n    setSearch(newValue)\r\n  },[setSearch])\r\n\r\n\r\n  const handleSelectedPropertiesClick = React.useCallback((event: React.MouseEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | BaseButton | Button | HTMLSpanElement, MouseEvent>) => {\r\n    if (showSelectedPropertyListPanel === false) {\r\n      navigationState ( {...navigationState(), showSavedListsPanel: false})\r\n      navigationState ( {...navigationState(), showSelectedPropertyListPanel: true})\r\n     \r\n    } else {\r\n      navigationState ( {...navigationState(), showSelectedPropertyListPanel: false})\r\n    }\r\n\r\n  },[showSelectedPropertyListPanel])\r\n\r\n  const handleManageListsClick = React.useCallback((event: React.MouseEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | BaseButton | Button | HTMLSpanElement, MouseEvent>) => {\r\n    if (showSavedListsPanel === false) {\r\n      navigationState ( {...navigationState(), showSelectedPropertyListPanel: false})\r\n      navigationState ( {...navigationState(), showSavedListsPanel: true})\r\n     \r\n    } else {\r\n      navigationState ( {...navigationState(), showSavedListsPanel: false})\r\n    }\r\n\r\n  },[showSavedListsPanel])\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n  const imageProps: IImageProps = {\r\n    src: HeaderImage,\r\n    imageFit: ImageFit.contain,\r\n  };\r\n\r\n  const primaryButtonStyles: Partial<IButtonStyles> = { root: { width: 100, marginTop: 30, marginRight: 30 } };\r\n\r\n  return (\r\n    <div>\r\n      <Stack styles={headerStackStyles} horizontal>\r\n        <Image\r\n          {...imageProps}\r\n          alt='Header Image'\r\n          width={400}\r\n          height={100}\r\n          styles={headerImageStyles}\r\n        />\r\n\r\n        {/* <DefaultButton styles={primaryButtonStyles} iconProps={signoutIcon} text=\"Logout\" onClick={() => {\r\n          localStorage.clear();\r\n          isLoggedInVar(false);\r\n          setLoginCallback(true)\r\n\r\n        }}></DefaultButton> */}\r\n\r\n      </Stack>\r\n\r\n\r\n      <Stack horizontalAlign={\"center\"} horizontal gap={15} styles={stackStyles} >\r\n        <CommandBarButton\r\n          iconProps={addIcon}\r\n          text=\"New Property\"\r\n          onClick={() =>navigationState ( {...navigationState(), showNewPropertyModal: true})}\r\n          styles={commandBarStyles}\r\n          style={{width: 110}}\r\n        // Set split=true to render a SplitButton instead of a regular button with a menu\r\n        // split={true}\r\n\r\n        />\r\n\r\n        <CommandBarButton\r\n          iconProps={filterIcon}\r\n          text=\"Filter\"\r\n          onClick={() => navigationState ( {...navigationState(), showFilterModal: true})}\r\n          styles={commandBarStyles}\r\n          style={{width: 90}}\r\n        // Set split=true to render a SplitButton instead of a regular button with a menu\r\n        // split={true}\r\n\r\n        />\r\n\r\n        <SearchBox\r\n          styles={searchBoxStyles}\r\n          placeholder=\"Search\"\r\n          onEscape={ev => {\r\n            console.log('Custom onEscape Called');\r\n          }}\r\n          onClear={ev => {\r\n            console.log('Custom onClear Called');\r\n          }}\r\n          onChange={onChangeSearch}\r\n          onSearch={newValue => console.log('SearchBox onSearch fired: ' + newValue)}\r\n        />\r\n\r\n        {/* <Toggle inlineLabel styles={toggleStyles} label=\"Selected Properties\" checked={showSelectedPropertyListPanel} onChange={onChangeSelectedPropertyListToggle} /> */}\r\n\r\n        <CommandBarButton\r\n          iconProps={checkListIcon}\r\n          text=\"Selected Properties\"\r\n          onClick={handleSelectedPropertiesClick}\r\n          styles={commandBarStyles}\r\n          style={{width: 120}}\r\n        // Set split=true to render a SplitButton instead of a regular button with a menu\r\n        // split={true}\r\n\r\n        />\r\n        <CommandBarButton\r\n          iconProps={listIcon}\r\n          text=\"Manage Lists\"\r\n          onClick={handleManageListsClick}\r\n          styles={commandBarStyles}\r\n          style={{width: 110}}\r\n        // Set split=true to render a SplitButton instead of a regular button with a menu\r\n        // split={true}\r\n\r\n        />\r\n\r\n      </Stack >\r\n\r\n\r\n      {/* <Pivot\r\n        aria-label=\"Navigation Pivot\"\r\n        selectedKey={selectedPropertyType}\r\n        // eslint-disable-next-line react/jsx-no-bind\r\n        onLinkClick={handleLinkClick}\r\n        headersOnly={true}\r\n        getTabId={getTabId}\r\n        style={{ marginTop: \"10px\" }}\r\n        styles={pivotStyles}\r\n      >\r\n        <PivotItem headerText=\"All Investors\" itemKey=\"all\" />\r\n        <PivotItem headerText=\"Listed Funds\" itemKey=\"listed\" />\r\n        <PivotItem headerText=\"Unlisted Funds\" itemKey=\"unlisted\" />\r\n        <PivotItem headerText=\"Private Investors\" itemKey=\"private\" />\r\n        <PivotItem headerText=\"BEE Funds\" itemKey=\"bee\" />\r\n        <PivotItem headerText=\"Filtered List\" itemKey=\"multifilter\" />\r\n      </Pivot> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\Loading.tsx",["215","216","217","218","219","220","221","222","223","224","225","226"],"import React, { memo } from 'react';\r\nimport { TextField, ITextFieldStyles } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Image, IImageProps, ImageFit } from 'office-ui-fabric-react/lib/Image';\r\nimport HeaderImage from \"../assets/EBLogoHeader.png\"\r\nimport { IStackStyles, Stack } from 'office-ui-fabric-react/lib/Stack';\r\nimport { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/Spinner';\r\nimport {\r\n  getTheme,\r\n  mergeStyleSets,\r\n  FontWeights,\r\n  ContextualMenu,\r\n  Text,\r\n  DefaultButton,\r\n  IButtonStyles,\r\n  PrimaryButton,\r\n  IconButton,\r\n  IIconProps,\r\n\r\n} from 'office-ui-fabric-react';\r\n\r\n\r\nconst headerStackStyles: Partial<IStackStyles> = { root: { width: \"100vw\", backgroundColor: \"#20314b\", marginBottom: \"10px\" } };\r\nconst headerImageStyles: Partial<IStackStyles> = { root: { marginLeft: \"auto\", marginRight: \"auto\" } };\r\nconst textFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 250 } };\r\nconst primaryButtonStyles: Partial<IButtonStyles> = { root: { /* width: 150, */ marginTop: \"20px !important\" } };\r\nconst signInIcon: IIconProps = { iconName: 'SignIn' };\r\n\r\nconst imageProps: IImageProps = {\r\n  src: HeaderImage,\r\n  imageFit: ImageFit.contain,\r\n};\r\n\r\nexport const Loading: React.FC = memo(() => {\r\n\r\n\r\n  return (\r\n    <Stack\r\n      horizontalAlign=\"center\"\r\n      verticalAlign=\"start\"\r\n      verticalFill\r\n      styles={{\r\n        root: {\r\n          /*  width: '960px', */\r\n          margin: '0 auto',\r\n          textAlign: 'center',\r\n          color: '#605e5c',\r\n         /*  backgroundColor: \"rgba(177, 140, 72, 0.1);\" */\r\n\r\n        }\r\n      }}\r\n      gap={15}>\r\n\r\n      <Stack styles={headerStackStyles} horizontal>\r\n        <Image\r\n          {...imageProps}\r\n          alt='Header Image'\r\n          width={400}\r\n          height={100}\r\n          styles={headerImageStyles}\r\n        />\r\n\r\n\r\n      </Stack>\r\n\r\n      <Stack \r\n      horizontalAlign=\"center\"\r\n      verticalAlign=\"start\"\r\n      \r\n      styles={{\r\n        root: {\r\n          /*  width: '960px', */\r\n          margin: '0 auto',\r\n          textAlign: 'center',\r\n         /*  color: 'white',\r\n          backgroundColor:\"white\",\r\n          border: \"1px solid rgb(138, 136, 134)\",\r\n          boxShadow: \"2px 3px 11px 7px #00000026\", */\r\n          padding: \"30px\",\r\n          marginTop: \"75px !important\",\r\n\r\n        }\r\n      }}>\r\n\r\n\r\n       \r\n<Spinner styles={{circle: {width: 80, height: 80}}} size={SpinnerSize.large} />\r\n\r\n\r\n      </Stack>\r\n\r\n    </Stack>\r\n\r\n  )\r\n\r\n\r\n\r\n})\r\n\r\nexport default Loading","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PropertyList.tsx",["227","228","229","230","231","232","233","234","235","236"],"import * as React from 'react';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\r\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\r\nimport { Checkbox, ICheckboxProps } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { Query, Property } from \"../schematypes/schematypes\"\r\nimport { useQuery } from '@apollo/client';\r\nimport { selectedPropertyList } from \"../reactivevariables/reactivevariables\"\r\nimport PropertyListItem from \"./PropertyListItem\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface Props {\r\n  propertyData: Query | undefined\r\n  search: string | undefined\r\n}\r\n\r\nexport const PropertyList: React.FunctionComponent<Props> = ({ propertyData, search }) => {\r\n\r\n\r\n\r\n\r\n\r\n  var originalPropertyData = propertyData\r\n  var originalProperties = originalPropertyData!.properties!\r\n\r\n  const searchSortedProperties = originalProperties?.filter(property => {\r\n    if (property !== null && property !== undefined) {\r\n      if (property?.address !== null && property?.address !== undefined) {\r\n        if (property?.suburb !== null && property?.suburb !== undefined) {\r\n          if (property?.region !== null && property?.region !== undefined) {\r\n            if (property?.province !== null && property?.province !== undefined) {\r\n              return property?.propertyName.toLowerCase().includes(search!.toLowerCase()) || property?.address.toLowerCase().includes(search!.toLowerCase()) || property?.suburb.toLowerCase().includes(search!.toLowerCase()) || property?.region.toLowerCase().includes(search!.toLowerCase()) || property?.province.toLowerCase().includes(search!.toLowerCase())\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n\r\n  /* var nameSortedProperties = searchSortedProperties.slice().sort((a, b) => {\r\n    var nameA = a.propertyName!.toUpperCase();\r\n    var nameB = b.propertyName!.toUpperCase();\r\n    if (nameA < nameB) {\r\n        return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}); */\r\n\r\n\r\n\r\n\r\n  /* const onFilterChanged = (_: any, text: string): void => {\r\n    setItems(originalItems.filter(item => item.name.toLowerCase().indexOf(text.toLowerCase()) >= 0));\r\n  }; */\r\n\r\n  return (\r\n    <div>\r\n      {searchSortedProperties.map(property => {\r\n\r\n        return (\r\n          <PropertyListItem key={property?.propertyId} property={property!}> </PropertyListItem>\r\n        )\r\n\r\n      })}\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default PropertyList","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\SelectedPropertyListPanel.tsx",["237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280"],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\NewPropertyModal.tsx",["281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300"],"import React, { useState } from 'react';\r\nimport { useId, useBoolean } from '@uifabric/react-hooks';\r\nimport { TextField, ITextFieldStyles } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Dropdown, DropdownMenuItemType, IDropdownOption, IDropdownStyles } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\r\nimport { IStackStyles, Stack } from 'office-ui-fabric-react/lib/Stack';\r\nimport {\r\n    getTheme,\r\n    mergeStyleSets,\r\n    FontWeights,\r\n    ContextualMenu,\r\n    Toggle,\r\n    IToggleStyles,\r\n    DefaultButton,\r\n    Modal,\r\n    IDragOptions,\r\n    IconButton,\r\n    IIconProps,\r\n    IModalStyles,\r\n    mergeStyles,\r\n    ComboBox,\r\n    Fabric,\r\n    IComboBoxOption,\r\n    IComboBox,\r\n    SelectableOptionMenuItemType,\r\n    IComboBoxStyles,\r\n    PrimaryButton,\r\n} from 'office-ui-fabric-react';\r\nimport { Pivot, PivotItem } from 'office-ui-fabric-react/lib/Pivot';\r\nimport { gql, useMutation, useQuery } from '@apollo/client';\r\nimport { GET_PROPERTIES, NEW_PROPERTY, GET_NAV_STATE, GET_LANDLORDS } from \"../gql/gql\"\r\nimport { Mutation, MutationPostPropertyArgs, Query, Landlord, LandlordContact } from \"../schematypes/schematypes\"\r\nimport { navigationState } from \"../reactivevariables/reactivevariables\"\r\nimport \"./NewPremisesModal.css\"\r\n\r\n\r\n\r\n\r\nconst dragOptions: IDragOptions = {\r\n    moveMenuItemText: 'Move',\r\n    closeMenuItemText: 'Close',\r\n    menu: ContextualMenu,\r\n};\r\nconst cancelIcon: IIconProps = { iconName: 'Cancel' };\r\nconst saveIcon: IIconProps = { iconName: 'Save' };\r\n\r\ninterface Props {\r\n    showNewPropertyModal: boolean;\r\n    distinctSuburbsOptions: IComboBoxOption[];\r\n    distinctRegionsOptions: IComboBoxOption[];\r\n    landlordsOptions: IComboBoxOption[];\r\n}\r\n\r\nexport const NewPropertyModal: React.FC<Props> = ({ showNewPropertyModal, distinctSuburbsOptions, distinctRegionsOptions, landlordsOptions }) => {\r\n\r\n    const hideNewPropertyModal = () => {\r\n        navigationState({ ...navigationState(), showNewPropertyModal: false })\r\n    }\r\n\r\n    interface SelectedLandlord {\r\n        landlordId: number\r\n        landlordName: string\r\n        landlordData: Landlord\r\n    }\r\n\r\n    const [selectedLandlord, setSelectedLandlord] = React.useState<SelectedLandlord>(\r\n        {\r\n            landlordId: 0,\r\n            landlordName: \"\",\r\n            landlordData: { landlordId: 0 }\r\n\r\n        });\r\n\r\n\r\n    interface SelectedContact {\r\n        contactId: number\r\n        contactName: string\r\n        contactData: LandlordContact\r\n    }\r\n\r\n\r\n    const [selectedContact, setSelectedContact] = React.useState<SelectedContact>(\r\n        {\r\n            contactId: 45,\r\n            contactName: \"\",\r\n            contactData: { contactId: 45 }\r\n\r\n        });\r\n\r\n\r\n\r\n    /*  var contactsByLandlord: Landlord[] = landlordData!.landlords!.filter((landlord) => {\r\n         var contacts: LandlordContact[] = []\r\n         if (landlord.landlordId === selectedLandlord.landlordId) {\r\n             contacts = landlord.contactsList!\r\n \r\n         }\r\n         return contacts\r\n     }) */\r\n\r\n    const [newProperty, setNewProperty] = React.useState(\r\n        {\r\n            propertyName: \"\",\r\n            address: \"\",\r\n            suburb: \"\",\r\n            coordinates: \"\",\r\n            /*  earliestOccupation: \"\",\r\n             earliestExpiry: \"\", */\r\n            erfExtent: 0,\r\n            totalGLA: 0,\r\n            vacantArea: 0,\r\n            buildingType: \"\",\r\n            province: \"\",\r\n            region: \"\",\r\n            notes: \"\",\r\n\r\n\r\n\r\n        });\r\n\r\n    \r\n\r\n    const [postProperty, { data }] = useMutation<Mutation, MutationPostPropertyArgs>(NEW_PROPERTY);\r\n\r\n    const saveNewProperty = () => {\r\n\r\n        postProperty({\r\n            variables: {\r\n\r\n                propertyName: newProperty.propertyName,\r\n                address: newProperty.address,\r\n                suburb: newProperty.suburb,\r\n                coordinates: newProperty.coordinates,\r\n                /*  earliestOccupation: newProperty.earliestOccupation,\r\n                 earliestExpiry: newProperty.earliestExpiry, */\r\n                erfExtent: newProperty.erfExtent,\r\n                totalGLA: newProperty.totalGLA,\r\n                vacantArea: newProperty.vacantArea,\r\n                buildingType: newProperty.buildingType,\r\n                province: newProperty.province,\r\n                region: newProperty.region,\r\n                notes: newProperty.notes,\r\n\r\n                contactId: selectedContact.contactId\r\n            },\r\n\r\n            update(cache, { data }) {\r\n\r\n                if (!data) {\r\n                    return null;\r\n                }\r\n\r\n                const getExistingProperties = cache.readQuery<Query>({ query: GET_PROPERTIES });\r\n                // Add the new todo to the cache\r\n                const existingProperties = getExistingProperties ? getExistingProperties.properties : [];\r\n                const newProperty = data.postProperty!/* .returning[0] */;\r\n                if (existingProperties)\r\n                    cache.writeQuery<Query>({\r\n                        query: GET_PROPERTIES,\r\n                        data: { properties: [newProperty, ...existingProperties] }\r\n                    });\r\n            }\r\n\r\n\r\n        })\r\n\r\n        setNewProperty({\r\n            propertyName: \"\",\r\n            address: \"\",\r\n            suburb: \"\",\r\n            coordinates: \"\",\r\n            /*   earliestOccupation: \"\",\r\n              earliestExpiry: \"\", */\r\n            erfExtent: 0,\r\n            totalGLA: 0,\r\n            vacantArea: 0,\r\n            buildingType: \"\",\r\n            province: \"\",\r\n            region: \"\",\r\n            notes: \"\",\r\n\r\n\r\n        })\r\n        hideNewPropertyModal()\r\n    }\r\n\r\n\r\n\r\n    /* const [isModalOpen, { setTrue: showModal, setFalse: hideModal }] = useBoolean(false);\r\n    const [isDraggable, { toggle: toggleIsDraggable }] = useBoolean(false); */\r\n\r\n    // Use useId() to ensure that the IDs are unique on the page.\r\n    // (It's also okay to use plain strings and manually ensure uniqueness.)\r\n\r\n\r\n    const textFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldPropertyNameStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 300, marginRight: 20 } };\r\n    const textFieldAddressStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 300, marginRight: 20 } };\r\n    const textFieldCoordinatesStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 150, marginRight: 20 } };\r\n    const textFieldErfStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldNotesStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 470, marginRight: 20 } };\r\n    const dropdownStyles: Partial<IDropdownStyles> = { dropdown: { width: 150, marginRight: 20 } };\r\n    const dropdownSectorStyles: Partial<IDropdownStyles> = { dropdown: { width: 420, marginRight: 20 } };\r\n    const dropdownProvinceStyles: Partial<IDropdownStyles> = { dropdown: { width: 140, marginRight: 20 } };\r\n    const comboBoxStyles: Partial<IComboBoxStyles> = { root: { width: 140, marginRight: 20 } }\r\n\r\n    const comboBoxLandlordStyles: Partial<IComboBoxStyles> = { root: { width: 220, marginRight: 20 } }\r\n    const textFieldLandlordStyles: Partial<ITextFieldStyles> = { root: { width: \"100%\", marginRight: 20, marginTop: \"20px !important\" } };\r\n\r\n    const textFieldLandlordEmailStyles: Partial<ITextFieldStyles> = { root: { width: \"100%\", marginRight: 20, marginTop: \"20px !important\" } };\r\n\r\n    const modalStyles: Partial<IModalStyles> = { main: { position: \"absolute\", top: 150 }, layer: { zIndex: 5000 } };\r\n\r\n    const buttonStyles = { root: { width: 100, marginRight: \"auto !important\", marginBottom: \"auto\", marginTop: \"60px !important\", marginLeft: \"auto !important\", height: 40 } };\r\n\r\n    const headerIconStackStyles: Partial<IStackStyles> = { root: { marginRight: 0, marginLeft: \"auto\", } }\r\n\r\n    const buildingTypeOptions = [\r\n\r\n        { key: 'Office', text: 'Office' },\r\n        { key: 'Industrial', text: 'Industrial' },\r\n        { key: 'Retail', text: 'Retail' },\r\n        { key: 'Mixed Use', text: 'Mixed Use' },\r\n    ];\r\n\r\n\r\n\r\n    const [selectedItem, setSelectedItem] = React.useState<IDropdownOption>();\r\n\r\n\r\n\r\n    const onChangeBuildingType = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        if (item !== undefined) {\r\n            setSelectedItem(item);\r\n            setNewProperty({ ...newProperty, buildingType: item.text });\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const propertyProvinceOptions = [\r\n\r\n        { key: 'WC', text: 'WC' },\r\n        { key: 'Gau', text: 'GAU' },\r\n        { key: 'KZN', text: 'KZN' },\r\n        { key: 'Other', text: 'Other Provinces' },\r\n\r\n    ];\r\n\r\n    const [selectedProvince, setSelectedProvince] = React.useState<IDropdownOption>();\r\n\r\n    const onChangePropertyProvince = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        if (item !== undefined) {\r\n            setSelectedProvince(item);\r\n            setNewProperty({ ...newProperty, province: item.text });\r\n        }\r\n    };\r\n\r\n    const suburbComboOptions: IComboBoxOption[] = distinctSuburbsOptions\r\n\r\n\r\n    /* [\r\n        { key: 'Header1', text: 'First heading', itemType: SelectableOptionMenuItemType.Header },\r\n        { key: 'A', text: 'Option A' },\r\n        { key: 'B', text: 'Option B' },\r\n        { key: 'C', text: 'Option C' },\r\n        { key: 'D', text: 'Option D' },\r\n        { key: 'divider', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n        { key: 'Header2', text: 'Second heading', itemType: SelectableOptionMenuItemType.Header },\r\n        { key: 'E', text: 'Option E' },\r\n        { key: 'F', text: 'Option F', disabled: true },\r\n        { key: 'G', text: 'Option G' },\r\n        { key: 'H', text: 'Option H' },\r\n        { key: 'I', text: 'Option I' },\r\n        { key: 'J', text: 'Option J' },\r\n      ]; */\r\n\r\n    const [selectedSuburb, setSelectedSuburb] = React.useState<string | number | undefined>('');\r\n\r\n    const onChangePropertySuburb = React.useCallback(\r\n        (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => {\r\n            setSelectedSuburb(option?.key);\r\n            if (option !== undefined) {\r\n                setNewProperty({ ...newProperty, suburb: option!.text })\r\n            } else {\r\n                setNewProperty({ ...newProperty, suburb: value! })\r\n            }\r\n        },\r\n        [newProperty],\r\n    );\r\n\r\n    const regionComboOptions: IComboBoxOption[] = distinctRegionsOptions\r\n\r\n    const [selectedRegion, setSelectedRegion] = React.useState<string | number | undefined>(\"\");\r\n\r\n    const onChangePropertyRegion = React.useCallback(\r\n        (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => {\r\n            setSelectedRegion(option?.key);\r\n            if (option !== undefined) {\r\n                setNewProperty({ ...newProperty, region: option!.text })\r\n            } else {\r\n                setNewProperty({ ...newProperty, region: value! })\r\n            }\r\n        },\r\n        [newProperty],\r\n    );\r\n\r\n    const landlordComboOptions: IComboBoxOption[] = landlordsOptions\r\n\r\n    const onChangeLandlord = React.useCallback(\r\n        (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => {\r\n            setSelectedLandlord({\r\n                landlordName: option?.text!,\r\n                landlordId: option?.data.landlordId,\r\n                landlordData: option?.data\r\n            });\r\n            setSelectedContact({\r\n                contactName: \"\",\r\n                contactId: 0,\r\n                contactData: { contactId: 0 }\r\n            });\r\n\r\n        },\r\n        [selectedLandlord],\r\n    );\r\n\r\n   \r\n\r\n    const contactsFormatted = selectedLandlord.landlordData?.contactsList?.map((contact) => {\r\n        return { key: contact.name!, text: contact.name!, data: contact }\r\n    })\r\n    var contactsOptions: IComboBoxOption[] = []\r\n\r\n    if (contactsFormatted !== undefined) {\r\n        contactsOptions = [...contactsFormatted]\r\n    }\r\n\r\n    const contactComboOptions: IComboBoxOption[] = contactsOptions\r\n\r\n    const onChangeContact = React.useCallback(\r\n        (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => {\r\n            setSelectedContact({\r\n                contactName: option?.text!,\r\n                contactId: option?.data.contactId,\r\n                contactData: option?.data\r\n            });\r\n\r\n        },\r\n        [selectedLandlord],\r\n    );\r\n\r\n    const stackTokens = { childrenGap: 15 };\r\n\r\n\r\n\r\n    const onChangePropertyName = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, propertyName: newValue || '' });\r\n        },\r\n        [newProperty],\r\n    );\r\n\r\n    const onChangeAddress = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, address: newValue || '' });\r\n        },\r\n        [newProperty],\r\n    );\r\n    const onChangeCoordinates = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, coordinates: newValue || '' });\r\n        },\r\n        [newProperty],\r\n    );\r\n    const onChangeErfExtent = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, erfExtent: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newProperty],\r\n    );\r\n    const onChangeTotalGLA = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, totalGLA: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newProperty],\r\n    );\r\n    const onChangeNotes = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, notes: newValue || '' });\r\n        },\r\n        [newProperty],\r\n    );\r\n\r\n\r\n    const handleManageLandlords = () => {\r\n\r\n        navigationState({ ...navigationState(), showManageLandlordsPanel: true })\r\n\r\n    }\r\n\r\n    const [selectedKey, setSelectedKey] = React.useState('Property Details');\r\n\r\n    const handleLinkClick = (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => {\r\n\r\n        setSelectedKey(item!.props.itemKey!);\r\n    };\r\n\r\n    const getTabId = (itemKey: string | undefined) => {\r\n        return `NewPropertyPivot_${itemKey}`;\r\n    };\r\n\r\n    const titleId = useId('New Property');\r\n\r\n\r\n    const newPropertyTab = () => {\r\n\r\n        switch (selectedKey) {\r\n            case \"Property Details\":\r\n                return (\r\n                    <>\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"0\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n\r\n\r\n                            <TextField\r\n                                label=\"Property Name\"\r\n                                value={newProperty.propertyName}\r\n                                onChange={onChangePropertyName}\r\n                                styles={textFieldPropertyNameStyles}\r\n\r\n                            />\r\n\r\n                            <Dropdown\r\n                                label=\"Buidling Type\"\r\n                                selectedKey={selectedItem ? selectedItem.key : undefined}\r\n                                // eslint-disable-next-line react/jsx-no-bind\r\n                                onChange={onChangeBuildingType}\r\n                                placeholder=\"Select type\"\r\n                                options={buildingTypeOptions}\r\n                                styles={dropdownStyles}\r\n                            />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal>\r\n\r\n                            <TextField\r\n                                label=\"Address\"\r\n                                value={newProperty.address}\r\n                                onChange={onChangeAddress}\r\n                                styles={textFieldAddressStyles}\r\n                            />\r\n                            <TextField\r\n                                label=\"Coordinates\"\r\n                                value={newProperty.coordinates}\r\n                                onChange={onChangeCoordinates}\r\n                                styles={textFieldCoordinatesStyles}\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal>\r\n\r\n                            <ComboBox\r\n                                label=\"Suburb\"\r\n                                allowFreeform={true}\r\n                                autoComplete={\"on\"}\r\n                                options={suburbComboOptions}\r\n                                selectedKey={selectedSuburb}\r\n                                onChange={onChangePropertySuburb}\r\n                                styles={comboBoxStyles}\r\n                                text={newProperty.suburb}\r\n                            />\r\n\r\n                            <ComboBox\r\n                                label=\"Region\"\r\n                                allowFreeform={true}\r\n                                autoComplete={\"on\"}\r\n                                options={regionComboOptions}\r\n                                selectedKey={selectedRegion}\r\n                                onChange={onChangePropertyRegion}\r\n                                styles={comboBoxStyles}\r\n                                text={newProperty.region}\r\n                            />\r\n\r\n                            <Dropdown\r\n                                placeholder=\"Select Province\"\r\n                                label=\"Province\"\r\n                                selectedKey={selectedProvince ? selectedProvince.key : undefined}\r\n                                // eslint-disable-next-line react/jsx-no-bind\r\n                                onChange={onChangePropertyProvince}\r\n                                options={propertyProvinceOptions}\r\n                                styles={dropdownProvinceStyles}\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n\r\n                        <Stack horizontal>\r\n\r\n\r\n\r\n                            <TextField\r\n                                label=\"Erf Extent\"\r\n                                type=\"number\"\r\n                                value={String(newProperty.erfExtent)}\r\n                                onChange={onChangeErfExtent}\r\n                                styles={textFieldErfStyles}\r\n                                suffix=\"m²\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Total GLA\"\r\n                                type=\"number\"\r\n                                value={String(newProperty.totalGLA)}\r\n                                onChange={onChangeTotalGLA}\r\n                                styles={textFieldErfStyles}\r\n                                suffix=\"m²\"\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n\r\n\r\n\r\n                    </>\r\n                )\r\n\r\n            case \"Landlord Details\":\r\n\r\n                return (\r\n                    <>\r\n                        <Stack verticalFill>\r\n\r\n                            <Stack horizontal>\r\n\r\n                                <ComboBox\r\n                                    label=\"Landlord\"\r\n                                    allowFreeform={true}\r\n                                    autoComplete={\"on\"}\r\n                                    options={landlordComboOptions}\r\n                                    selectedKey={selectedLandlord.landlordId}\r\n                                    onChange={onChangeLandlord}\r\n                                    styles={comboBoxLandlordStyles}\r\n                                    text={selectedLandlord.landlordName}\r\n                                />\r\n\r\n                                <ComboBox\r\n                                    label=\"Contact\"\r\n                                    allowFreeform={true}\r\n                                    autoComplete={\"on\"}\r\n                                    options={contactComboOptions}\r\n                                    selectedKey={selectedContact !== undefined ? selectedContact.contactId : \"\"}\r\n                                    onChange={onChangeContact}\r\n                                    styles={comboBoxLandlordStyles}\r\n                                    text={selectedContact.contactName}\r\n                                />\r\n\r\n                            </Stack>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            <Stack horizontal>\r\n\r\n                                <Stack styles={{root: {width: \"70%\"}}} verticalFill>\r\n\r\n                                    <TextField\r\n                                        underlined\r\n                                        label=\"Email\"\r\n                                        value={selectedContact.contactData !== undefined ? selectedContact.contactData.email : \"\"}\r\n\r\n                                        styles={textFieldLandlordEmailStyles}\r\n\r\n                                    />\r\n\r\n                                    <TextField\r\n                                        underlined\r\n                                        label=\"Mobile No\"\r\n                                        value={selectedContact.contactData !== undefined ? selectedContact.contactData.mobileNo : \"\"}\r\n\r\n                                        styles={textFieldLandlordStyles}\r\n                                    />\r\n                                    <TextField\r\n                                        underlined\r\n                                        label=\"Office No\"\r\n                                        value={selectedContact.contactData !== undefined ? selectedContact.contactData.officeNo : \"\"}\r\n\r\n                                        styles={textFieldLandlordStyles}\r\n                                    />\r\n\r\n                                </Stack>\r\n\r\n\r\n                                <PrimaryButton onClick={handleManageLandlords} styles={buttonStyles}>\r\n                                    Manage Landlords\r\n                                </PrimaryButton>\r\n\r\n                            </Stack>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n            case \"Property Notes\":\r\n\r\n                return (\r\n                    <>\r\n                        <Stack horizontal>\r\n\r\n                            <TextField\r\n                                label=\"Notes\"\r\n                                value={newProperty.notes}\r\n                                onChange={onChangeNotes}\r\n                                styles={textFieldNotesStyles}\r\n                                multiline\r\n                                autoAdjustHeight\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n\r\n\r\n\r\n\r\n            default:\r\n            // code block\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <Modal\r\n                styles={modalStyles}\r\n\r\n                titleAriaId={titleId}\r\n                isOpen={showNewPropertyModal}\r\n                onDismiss={hideNewPropertyModal}\r\n                isBlocking={false}\r\n                containerClassName={contentStyles.container}\r\n            /* dragOptions={dragOptions} */\r\n            >\r\n                <div className={contentStyles.header}>\r\n                    <span id={titleId}>New Property</span>\r\n                    <Stack horizontal\r\n                        styles={headerIconStackStyles}\r\n                    >\r\n\r\n                        <IconButton\r\n                            styles={iconButtonStyles}\r\n                            iconProps={saveIcon}\r\n                            ariaLabel=\"Save Investor\"\r\n                            onClick={saveNewProperty}\r\n                        />\r\n                        <IconButton\r\n                            styles={iconButtonStyles}\r\n                            iconProps={cancelIcon}\r\n                            ariaLabel=\"Close popup modal\"\r\n                            onClick={hideNewPropertyModal}\r\n                        />\r\n\r\n                    </Stack>\r\n\r\n                </div>\r\n                <div className={contentStyles.body} >\r\n\r\n                    <Stack style={{ width: 486 }} tokens={stackTokens}>\r\n\r\n                        <Pivot\r\n                            aria-label=\"Separately Rendered Content Pivot Example\"\r\n                            selectedKey={selectedKey}\r\n                            // eslint-disable-next-line react/jsx-no-bind\r\n                            onLinkClick={handleLinkClick}\r\n                            headersOnly={true}\r\n                            getTabId={getTabId}\r\n                        >\r\n                            <PivotItem headerText=\"Property Details\" itemKey=\"Property Details\" />\r\n                            <PivotItem headerText=\"Landlord Details\" itemKey=\"Landlord Details\" />\r\n                            <PivotItem headerText=\"Property Notes\" itemKey=\"Property Notes\" />\r\n\r\n                        </Pivot>\r\n\r\n                        {newPropertyTab()}\r\n\r\n\r\n\r\n\r\n\r\n                    </Stack>\r\n\r\n\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst theme = getTheme();\r\nconst contentStyles = mergeStyleSets({\r\n    container: {\r\n        display: 'flex',\r\n        flexFlow: 'column nowrap',\r\n        alignItems: 'stretch',\r\n        /* width: 600, */\r\n\r\n    },\r\n\r\n    header: [\r\n\r\n        theme.fonts.xLargePlus,\r\n        {\r\n            flex: '1 1 auto',\r\n            borderTop: `4px solid ${theme.palette.themePrimary}`,\r\n            color: theme.palette.neutralPrimary,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            fontWeight: FontWeights.semibold,\r\n            padding: '12px 12px 14px 24px',\r\n        },\r\n    ],\r\n    body: {\r\n        flex: '4 4 auto',\r\n        padding: '0 24px 24px 24px',\r\n        overflowY: 'hidden',\r\n        selectors: {\r\n            p: { margin: '14px 0' },\r\n            'p:first-child': { marginTop: 0 },\r\n            'p:last-child': { marginBottom: 0 },\r\n        },\r\n    },\r\n});\r\n\r\nconst iconButtonStyles = {\r\n    root: {\r\n        color: theme.palette.neutralPrimary,\r\n        marginLeft: \"10px !important\",\r\n        marginTop: '4px',\r\n        marginRight: '2px',\r\n\r\n    },\r\n    rootHovered: {\r\n        color: theme.palette.neutralDark,\r\n    },\r\n    icon: {\r\n        fontSize: \"24px\",\r\n\r\n    }\r\n};\r\n\r\nexport default NewPropertyModal\r\n","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\ManageLandlordsPanel.tsx",["301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340"],"import * as React from 'react';\r\nimport { CommandBarButton, IButtonStyles, ILayerStyleProps, ILayerStyles, ILayerProps, FocusTrapCallout, FocusZone, PrimaryButton, TextField, ITextFieldStyles } from 'office-ui-fabric-react';\r\nimport { Panel, PanelType, IPanelProps, IPanelStyles, IPanelStyleProps, } from 'office-ui-fabric-react/lib/Panel';\r\nimport { IRenderFunction, IStyleFunctionOrObject } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport { Link } from 'office-ui-fabric-react/lib/Link';\r\nimport { useBoolean } from '@uifabric/react-hooks';\r\nimport { GET_SINGLE_PROPERTY, GET_NAV_STATE, GET_DISTINCT_SUBURBS, GET_DISTINCT_REGIONS, UPDATE_IMAGES, NEW_LANDLORD, GET_LANDLORDS } from \"../gql/gql\"\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Mutation, MutationPostLandlordArgs, Query, NavigationState, Premises, Landlord } from \"../schematypes/schematypes\"\r\nimport { navigationState as navigationStateVar } from \"../reactivevariables/reactivevariables\"\r\nimport { Icon } from '@fluentui/react/lib/Icon';\r\n\r\nimport LandlordListItem from \"./LandlordListItem\"\r\n\r\nimport { SearchBox, ISearchBoxStyles, } from 'office-ui-fabric-react/lib/SearchBox';\r\n\r\nimport {\r\n  getTheme,\r\n  mergeStyleSets,\r\n  FontWeights,\r\n  ContextualMenu,\r\n  Toggle,\r\n  IToggleStyles,\r\n  DefaultButton,\r\n  Modal,\r\n  IDragOptions,\r\n  IconButton,\r\n  IIconProps,\r\n  IModalStyles,\r\n  mergeStyles,\r\n  ComboBox,\r\n  Fabric,\r\n  IComboBoxOption,\r\n  IComboBox,\r\n  SelectableOptionMenuItemType,\r\n  IComboBoxStyles,\r\n  Stack,\r\n  Text,\r\n  IStackStyles\r\n\r\n} from 'office-ui-fabric-react';\r\n\r\n\r\ninterface Props {\r\n  showManageLandlordsPanel: boolean\r\n  landLordsList: Landlord[]\r\n\r\n}\r\n\r\nconst ManageLandlordsPanel: React.FunctionComponent<Props> = ({ showManageLandlordsPanel, landLordsList }) => {\r\n\r\n\r\n\r\n  const [isAddCalloutVisible, { toggle: toggleIsAddCalloutVisible }] = useBoolean(false);\r\n\r\n  const [addLandlordName, setAddLandlordName] = React.useState(\"\")\r\n\r\n\r\n\r\n  const handlePanelDismiss = () => {\r\n    navigationStateVar({ ...navigationStateVar(), showManageLandlordsPanel: false })\r\n\r\n  }\r\n\r\n\r\n  const [postLandlord, { data }] = useMutation<Mutation, MutationPostLandlordArgs>(NEW_LANDLORD);\r\n\r\n  const saveNewLandlord = () => {\r\n\r\n    postLandlord({\r\n      variables: {\r\n\r\n        landlordName: addLandlordName\r\n\r\n      },\r\n\r\n      update(cache, { data }) {\r\n\r\n        if (!data) {\r\n          return null;\r\n        }\r\n\r\n        const getExistingLandlords = cache.readQuery<Query>({ query: GET_LANDLORDS });\r\n        // Add the new todo to the cache\r\n        const existingLandlords = getExistingLandlords ? getExistingLandlords.landlords : [];\r\n        const newLandlord = data.postLandlord!/* .returning[0] */;\r\n        if (existingLandlords)\r\n          cache.writeQuery<Query>({\r\n            query: GET_LANDLORDS,\r\n            data: { landlords: [newLandlord, ...existingLandlords] }\r\n          });\r\n      }\r\n\r\n\r\n    })\r\n\r\n    setAddLandlordName(\"\")\r\n    toggleIsAddCalloutVisible()\r\n  }\r\n\r\n\r\n\r\n  const onChangeLandlordName = React.useCallback(\r\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n      setAddLandlordName(newValue!);\r\n    },\r\n    [addLandlordName],\r\n  );\r\n\r\n\r\n\r\n\r\n\r\n  const theme = getTheme();\r\n  const deleteIconStyles = {\r\n    root: {\r\n      color: theme.palette.neutralPrimary,\r\n      /*   marginLeft: \"10px !important\",\r\n        marginTop: '4px',\r\n        marginRight: '2px', */\r\n\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n    icon: {\r\n      fontSize: \"24px\",\r\n\r\n    }\r\n  };\r\n\r\n  const addIconStyles = {\r\n    root: {\r\n      color: theme.palette.neutralPrimary,\r\n      marginLeft: 20\r\n\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n    icon: {\r\n      fontSize: \"24px\",\r\n\r\n    }\r\n  };\r\n\r\n  const cancelIcon: IIconProps = { iconName: 'Cancel' };\r\n  const addIcon: IIconProps = { iconName: 'Add' };\r\n  const editIcon: IIconProps = { iconName: 'Edit' };\r\n  const photoCollectionIcon: IIconProps = { iconName: 'PhotoCollection' };\r\n  const commandBarStyles: Partial<IButtonStyles> = { root: { border: \"1px solid rgb(161, 159, 157);\", padding: 10 } };\r\n  const panelStyles: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles> = {\r\n    /*   root: {}, */\r\n    navigation: {\r\n      justifyContent: \"flex-start\",\r\n      paddingLeft: 24,\r\n      paddingRight: 24,\r\n      paddingTop: 20\r\n    },\r\n    header: { marginBottom: 10 },\r\n    headerText: { fontSize: 24, marginLeft: 15 },\r\n\r\n  }\r\n\r\n  const layerStyles: IStyleFunctionOrObject<ILayerStyleProps, ILayerStyles> = {\r\n    root: { zIndex: 100000 },\r\n  }\r\n\r\n  const layerProps: ILayerProps = {\r\n    styles: layerStyles\r\n  }\r\n\r\n\r\n  const boldStyle = { root: { fontWeight: FontWeights.semibold } };\r\n  const propertyDetailsStyles = { alignSelf: \"start\", fontSize: \"18px\", paddingLeft: \"15px\" }\r\n  const propertyDetailsLandlordStyles = { alignSelf: \"start\", fontSize: \"18px\", paddingLeft: \"15px\", width: 125 }\r\n\r\n  const boldStyle2 = { root: { fontWeight: FontWeights.bold } };\r\n  const propertyDetailsHeadingStyles = { /* alignSelf: \"start\", */ fontSize: \"20px\", marginLeft: \"auto\", marginRight: \"auto\", marginTop: 10, marginBottom: 10 }\r\n  const propertyNotesStyles = { alignSelf: \"start\", fontSize: \"16px\", paddingLeft: \"15px\", marginTop: 0 }\r\n\r\n  const textFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 300 } };\r\n\r\n  const searchBoxStyles: Partial<ISearchBoxStyles> = { root: { width: 300, height: 44 } };\r\n\r\n  const styles = mergeStyleSets({\r\n\r\n    callout: {\r\n      maxWidth: 600,\r\n    },\r\n    header: {\r\n      padding: '18px 24px 12px',\r\n    },\r\n    title: [\r\n      {\r\n        margin: 0,\r\n        fontWeight: FontWeights.bold,\r\n      },\r\n    ],\r\n    inner: {\r\n      height: '100%',\r\n      padding: '0 24px 20px',\r\n    },\r\n    actions: {\r\n      position: 'relative',\r\n      marginTop: 20,\r\n      width: '100%',\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    buttons: {\r\n      display: 'flex',\r\n      justifyContent: 'flex-end',\r\n      padding: '0 24px 24px',\r\n    },\r\n    subtext: [\r\n      {\r\n        margin: 0,\r\n        fontWeight: FontWeights.semilight,\r\n      },\r\n    ],\r\n  });\r\n\r\n  const [landlordSearch, setLandlordSearch] = React.useState<string | undefined> (\"\")\r\n\r\n\r\n  const onChangeLandlordSearch = React.useCallback(\r\n    (event?: React.ChangeEvent<HTMLInputElement>, newValue?: string) => {\r\n\r\n    setLandlordSearch(newValue)\r\n  },[setLandlordSearch])\r\n\r\n  console.log(landLordsList)\r\n  console.log(landlordSearch)\r\n\r\n  const searchSortedlandlords = landLordsList?.filter(landlord => {\r\n    if (landlord !== null && landlord !== undefined) {\r\n      if (landlord?.landlordName !== null && landlord?.landlordName !== undefined) {\r\n        if (landlord?.contactsList !== null && landlord?.contactsList !== undefined) {\r\n\r\n         /*  let item = landlord.contactsList.some((contact)=>  contact.name!.includes(landlordSearch!.toLowerCase()))\r\n          return item */\r\n          \r\n              return landlord?.landlordName.toLowerCase().includes(landlordSearch!.toLowerCase()) /* || landlord?.contactsList.filter((contact)=> { return contact.name?.toLowerCase().includes(landlordSearch!.toLowerCase())} ) */\r\n           \r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n\r\n  const onRenderNavigationContent: IRenderFunction<IPanelProps> = React.useCallback(\r\n    (props, defaultRender) => (\r\n      <>\r\n        <IconButton\r\n          styles={deleteIconStyles}\r\n          iconProps={cancelIcon}\r\n          ariaLabel=\"Close panel\"\r\n          onClick={handlePanelDismiss}\r\n        />\r\n        <IconButton\r\n          styles={addIconStyles}\r\n          iconProps={addIcon}\r\n          ariaLabel=\"Add Landlord\"\r\n          onClick={toggleIsAddCalloutVisible}\r\n          id=\"addLandlordButton\"\r\n        />\r\n\r\n\r\n\r\n\r\n      </>\r\n    ),\r\n    [],\r\n  );\r\n\r\n\r\n  const [expanded, setExpanded] = React.useState<false | number>(0);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Panel\r\n        isOpen={showManageLandlordsPanel}\r\n        onDismiss={handlePanelDismiss}\r\n\r\n        type={PanelType.medium}\r\n        onRenderNavigationContent={onRenderNavigationContent}\r\n        /* customWidth={panelType === PanelType.custom || panelType === PanelType.customNear ? '888px' : undefined} */\r\n        closeButtonAriaLabel=\"Close\"\r\n        headerText={\"Manage Landlords\"}\r\n        styles={panelStyles}\r\n        layerProps={layerProps}\r\n      >\r\n\r\n        <Stack id=\"Landlord List Container\" styles={{\r\n          root: {\r\n            display: \"flex\",\r\n            flexFlow: \"column\",\r\n            marginLeft: 10\r\n            /* maxWidth: \"fit-content\" */\r\n            /*  marginTop: \"0 !important\" */\r\n          }\r\n        }}>\r\n\r\n          <SearchBox\r\n            styles={searchBoxStyles}\r\n            placeholder=\"Search\"\r\n            onEscape={ev => {\r\n              console.log('Custom onEscape Called');\r\n            }}\r\n            onClear={ev => {\r\n              console.log('Custom onClear Called');\r\n            }}\r\n            onChange={onChangeLandlordSearch}\r\n            onSearch={newValue => console.log('SearchBox onSearch fired: ' + newValue)}\r\n          />\r\n\r\n          {searchSortedlandlords !== undefined ? searchSortedlandlords.map((landlord) => {\r\n\r\n            return <LandlordListItem landlord={landlord} key={landlord.landlordId} expanded={expanded} setExpanded={setExpanded}></LandlordListItem>\r\n\r\n          }) : <Text></Text>}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </Stack>\r\n\r\n\r\n        {isAddCalloutVisible ? (\r\n          <div>\r\n            <FocusTrapCallout\r\n              role=\"alertdialog\"\r\n              className={styles.callout}\r\n              gapSpace={0}\r\n              target={`#addLandlordButton`}\r\n              onDismiss={toggleIsAddCalloutVisible}\r\n              setInitialFocus\r\n            >\r\n              <div className={styles.header}>\r\n                <Text className={styles.title}>Add Landlord</Text>\r\n              </div>\r\n              <div className={styles.inner}>\r\n                <div>\r\n\r\n                  <TextField\r\n                    styles={textFieldStyles}\r\n                    label=\"Landlord Name\"\r\n\r\n                    value={addLandlordName}\r\n                    onChange={onChangeLandlordName}></TextField>\r\n                </div>\r\n              </div>\r\n              <FocusZone>\r\n                <Stack className={styles.buttons} gap={8} horizontal>\r\n                  <PrimaryButton onClick={saveNewLandlord}>Confirm</PrimaryButton>\r\n                  <DefaultButton onClick={toggleIsAddCalloutVisible}>Cancel</DefaultButton>\r\n                </Stack>\r\n              </FocusZone>\r\n            </FocusTrapCallout>\r\n          </div>\r\n        ) : null}\r\n\r\n      </Panel>\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageLandlordsPanel\r\n\r\n","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PreviewPDFPanel.tsx",["341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393"],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\SavedListsPanel.tsx",["394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449"],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\reactivevariables\\reactivevariables.tsx",[],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\gql\\gql.tsx",[],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\SelectedPropertyPanel.tsx",["450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481"],"import * as React from 'react';\r\nimport { CommandBarButton, IButtonStyles, ILayerStyleProps, ILayerStyles, ILayerProps } from 'office-ui-fabric-react';\r\nimport { Panel, PanelType, IPanelProps, IPanelStyles, IPanelStyleProps, } from 'office-ui-fabric-react/lib/Panel';\r\nimport { IRenderFunction, IStyleFunctionOrObject } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport { Link } from 'office-ui-fabric-react/lib/Link';\r\nimport { useBoolean } from '@uifabric/react-hooks';\r\nimport { GET_SINGLE_PROPERTY, GET_NAV_STATE, GET_DISTINCT_SUBURBS, GET_DISTINCT_REGIONS, UPDATE_IMAGES } from \"../gql/gql\"\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Mutation, MutationUpdatePropertyArgs, Query, NavigationState, Premises, Property } from \"../schematypes/schematypes\"\r\nimport { navigationState as navigationStateVar } from \"../reactivevariables/reactivevariables\"\r\nimport { Icon } from '@fluentui/react/lib/Icon';\r\nimport Map from \"./Map\"\r\nimport ImageGalleryModal from \"./ImageGalleryModal\"\r\nimport PremisesList from \"./PremisesList\"\r\nimport NewPremisesModal from \"./NewPremisesModal\"\r\nimport PremisesNotesModal from \"./PremisesNotesModal\"\r\nimport UpdatePremisesModal from \"./UpdatePremisesModal\"\r\nimport DuplicatePremisesModal from \"./DuplicatePremisesModal\"\r\nimport UpdatePropertyModal from \"./UpdatePropertyModal\"\r\n\r\n\r\n\r\n\r\nimport {\r\n    getTheme,\r\n    mergeStyleSets,\r\n    FontWeights,\r\n    ContextualMenu,\r\n    Toggle,\r\n    IToggleStyles,\r\n    DefaultButton,\r\n    Modal,\r\n    IDragOptions,\r\n    IconButton,\r\n    IIconProps,\r\n    IModalStyles,\r\n    mergeStyles,\r\n    ComboBox,\r\n    Fabric,\r\n    IComboBoxOption,\r\n    IComboBox,\r\n    SelectableOptionMenuItemType,\r\n    IComboBoxStyles,\r\n    Stack,\r\n    Text,\r\n    IStackStyles\r\n\r\n} from 'office-ui-fabric-react';\r\n\r\n\r\ninterface Props {\r\n    distinctSuburbsOptions: IComboBoxOption[];\r\n    distinctRegionsOptions: IComboBoxOption[];\r\n    landlordsOptions: IComboBoxOption[];\r\n\r\n}\r\n\r\nconst SelectedPropertyPanel: React.FunctionComponent<Props> = ({ distinctSuburbsOptions, distinctRegionsOptions, landlordsOptions }) => {\r\n\r\n    /* var containerRef = React.useRef<HTMLDivElement>(null); */\r\n\r\n\r\n\r\n\r\n    const [containerWidth, setContainerWidth] = React.useState<number>(0);\r\n\r\n\r\n    const containerRef = React.useCallback(node => {\r\n        if (node !== null) {\r\n            setContainerWidth(node.offsetWidth);\r\n        }\r\n    }, []);\r\n\r\n    const {\r\n        data: navigationStateData,\r\n        loading: navigationLoading,\r\n        error: navigationError\r\n    } = useQuery<Query>(GET_NAV_STATE);\r\n\r\n    /* var navigationState: NavigationState = {\r\n        showNewPropertyModal: false,\r\n        showUpdatePropertyModal: false,\r\n        showNewPremisesModal: false,\r\n        showUpdatePremisesModal: false,\r\n        showDuplicatePremisesModal: false,\r\n        showPremisesNotesModal: false,\r\n        showPreviewPDFPanel: false,\r\n        showFilterModal: false,\r\n        showImageGalleryModal: false,\r\n        selectedPropertyType: \"all\",\r\n        search: \"\",\r\n        showSelectedPropertyListPanel: false,\r\n        selectedPropertyId: 0,\r\n        selectedPremisesId: 0,\r\n        showManageLandlordsPanel: false,\r\n    } */\r\n\r\n    /* if (navigationStateData !== undefined) { */\r\n    var navigationState = navigationStateData!.navigationState!\r\n    /* } */\r\n\r\n    const {\r\n        data: propertyData,\r\n        loading: propertyLoading,\r\n        error: propertyError\r\n    } = useQuery<Query>(GET_SINGLE_PROPERTY, {\r\n        variables: { propertyId: navigationState.selectedPropertyId },\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    const handlePanelDismiss = () => {\r\n        navigationStateVar({ ...navigationStateVar(), showSelectedPropertyPanel: false })\r\n        /* dismissPanel() */\r\n    }\r\n\r\n    const handleEditProperty = () => {\r\n        navigationStateVar({ ...navigationStateVar(), showUpdatePropertyModal: true })\r\n\r\n    }\r\n\r\n\r\n\r\n    const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false);\r\n\r\n    const theme = getTheme();\r\n    const deleteIconStyles = {\r\n        root: {\r\n            color: theme.palette.neutralPrimary,\r\n            /*   marginLeft: \"10px !important\",\r\n              marginTop: '4px',\r\n              marginRight: '2px', */\r\n\r\n        },\r\n        rootHovered: {\r\n            color: theme.palette.neutralDark,\r\n        },\r\n        icon: {\r\n            fontSize: \"24px\",\r\n\r\n        }\r\n    };\r\n\r\n    const editIconStyles = {\r\n        root: {\r\n            color: theme.palette.neutralPrimary,\r\n            marginLeft: 20\r\n\r\n        },\r\n        rootHovered: {\r\n            color: theme.palette.neutralDark,\r\n        },\r\n        icon: {\r\n            fontSize: \"24px\",\r\n\r\n        }\r\n    };\r\n\r\n    const cancelIcon: IIconProps = { iconName: 'Cancel' };\r\n    const addIcon: IIconProps = { iconName: 'Add' };\r\n    const editIcon: IIconProps = { iconName: 'Edit' };\r\n    const photoCollectionIcon: IIconProps = { iconName: 'PhotoCollection' };\r\n    const commandBarStyles: Partial<IButtonStyles> = { root: { border: \"1px solid rgb(161, 159, 157);\", padding: 10, width: \"fit-content\", marginLeft: \"auto\", marginRight: \"auto\", } };\r\n    const panelStyles: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles> = {\r\n        /*   root: {}, */\r\n        navigation: {\r\n            justifyContent: \"flex-start\",\r\n            paddingLeft: 24,\r\n            paddingRight: 24,\r\n            paddingTop: 20\r\n        },\r\n        header: {},\r\n        headerText: { fontSize: 24, marginLeft: 75 },\r\n\r\n    }\r\n\r\n    const layerStyles: IStyleFunctionOrObject<ILayerStyleProps, ILayerStyles> = {\r\n        root: { zIndex: 50000 },\r\n    }\r\n\r\n    const layerProps: ILayerProps = {\r\n        styles: layerStyles\r\n    }\r\n\r\n\r\n    const boldStyle = { root: { fontWeight: FontWeights.semibold } };\r\n    const propertyDetailsStyles = { alignSelf: \"start\", fontSize: \"16px\", paddingLeft: 10, paddingRight: 10, \"white-space\": \"nowrap\" }\r\n    const propertyDetailsLandlordStyles = { alignSelf: \"start\", fontSize: \"16px\", paddingLeft: 10, paddingRight: 10, \"white-space\": \"nowrap\" }\r\n\r\n    const boldStyle2 = { root: { fontWeight: FontWeights.bold } };\r\n    const propertyDetailsHeadingStyles = { /* alignSelf: \"start\", */ fontSize: \"18px\", marginLeft: \"auto\", marginRight: \"auto\", marginTop: 10, marginBottom: 10, \"white-space\": \"nowrap\" }\r\n    const propertyDetailsLandlordHeadingStyles = { /* alignSelf: \"start\", */ fontSize: \"18px\", marginLeft: \"auto\", marginRight: \"auto\", marginTop: 10, marginBottom: 10, paddingLeft: 20, paddingRight: 20, \"white-space\": \"nowrap\" }\r\n    const propertyNotesStyles = { alignSelf: \"start\", fontSize: \"14px\", paddingLeft: \"15px\", marginTop: 0 }\r\n\r\n\r\n\r\n\r\n    const getEarliestOccDate = () => {\r\n\r\n        var premises = propertyData?.singleProperty?.premisesList\r\n        var premisesByOccDates: Premises[] = []\r\n        var date: Date = new Date()\r\n        if (premises !== undefined) {\r\n            premisesByOccDates = premises.slice().sort((a, b) => {\r\n                return Date.parse(a.occupation) - Date.parse(b.occupation)\r\n            });\r\n        }\r\n\r\n        if (premisesByOccDates[0] !== undefined) {\r\n            date = new Date(premisesByOccDates[0].occupation)\r\n        }\r\n        return date.toLocaleDateString(\r\n            'en-gb',\r\n            {\r\n                year: 'numeric',\r\n                month: 'long',\r\n                day: 'numeric'\r\n            }\r\n        );\r\n    }\r\n\r\n    const getEarliestExpDate = () => {\r\n\r\n        var premises = propertyData?.singleProperty?.premisesList\r\n        var premisesByOccDates: Premises[] = []\r\n        var date: Date = new Date()\r\n        if (premises !== undefined) {\r\n            premisesByOccDates = premises.slice().sort((a, b) => {\r\n                return Date.parse(a.leaseExpiry) - Date.parse(b.leaseExpiry)\r\n            });\r\n        }\r\n\r\n        if (premisesByOccDates[0] !== undefined) {\r\n            date = new Date(premisesByOccDates[0].leaseExpiry)\r\n        }\r\n        return date.toLocaleDateString(\r\n            'en-gb',\r\n            {\r\n                year: 'numeric',\r\n                month: 'long',\r\n                day: 'numeric'\r\n            }\r\n        );\r\n    }\r\n\r\n    const getVacantGLA = () => {\r\n        var vacantGLA = 0\r\n        propertyData?.singleProperty?.premisesList!.map(premises => {\r\n            if (premises.vacant === \"true\") {\r\n                vacantGLA += premises.area!\r\n            }\r\n        })\r\n        return vacantGLA\r\n    }\r\n\r\n    const onRenderNavigationContent: IRenderFunction<IPanelProps> = React.useCallback(\r\n        (props, defaultRender) => (\r\n            <>\r\n                <IconButton\r\n                    styles={deleteIconStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close panel\"\r\n                    onClick={handlePanelDismiss}\r\n                />\r\n                <IconButton\r\n                    styles={editIconStyles}\r\n                    iconProps={editIcon}\r\n                    ariaLabel=\"Edit Property Details\"\r\n                    onClick={handleEditProperty}\r\n                />\r\n\r\n\r\n\r\n            </>\r\n        ),\r\n        [],\r\n    );\r\n\r\n    var coordinatesArray: string[] | undefined = []\r\n\r\n\r\n    if (propertyData?.singleProperty?.coordinates !== null) {\r\n        coordinatesArray = propertyData?.singleProperty?.coordinates!.split(',');\r\n    }\r\n\r\n\r\n    const getLatitude = () => {\r\n        if (coordinatesArray !== undefined && coordinatesArray !== null)\r\n            return Number(coordinatesArray[0]).toFixed(2)\r\n        else return \"\"\r\n    }\r\n\r\n    const getLongitude = () => {\r\n        if (coordinatesArray !== undefined && coordinatesArray !== null)\r\n            return Number(coordinatesArray[1]).toFixed(2)\r\n        else return \"\"\r\n    }\r\n\r\n    var checkUploadResult = (resultEvent: any) => {\r\n\r\n        if (resultEvent.event === \"success\") {\r\n            console.log(resultEvent.info.secure_url)\r\n            console.log(resultEvent.info.public_id)\r\n            saveNewImage(resultEvent.info.public_id)\r\n        }\r\n    }\r\n\r\n\r\n    // @ts-ignore: Unreachable code error\r\n    var widget = window.cloudinary.createUploadWidget({\r\n        cloudName: \"drlfedqyz\", uploadPreset: \"xblzxkc8\"\r\n    }, (error: any, result: any) => { checkUploadResult(result) });\r\n\r\n    const showUploadWidget = () => {\r\n        widget.open()\r\n\r\n    }\r\n\r\n    const getContactId = () => {\r\n        if (propertyData?.singleProperty?.contact?.contactId === undefined || propertyData?.singleProperty?.contact?.contactId === null) {\r\n            return 45\r\n        } else {\r\n            return propertyData?.singleProperty?.contact?.contactId\r\n        }\r\n    }\r\n\r\n    const [updateProperty, { data }] = useMutation<Mutation, MutationUpdatePropertyArgs>(UPDATE_IMAGES);\r\n\r\n    const saveNewImage = (image: string) => {\r\n\r\n        updateProperty({\r\n            variables: {\r\n                propertyId: navigationState.selectedPropertyId,\r\n                images: propertyData?.singleProperty?.images?.concat(image),\r\n                contactId: getContactId()\r\n            },\r\n\r\n            update(cache, { data }) {\r\n\r\n                if (!data) {\r\n                    return null;\r\n                }\r\n\r\n                const getExistingProperty = cache.readQuery<Query>({ query: GET_SINGLE_PROPERTY, variables: { propertyId: navigationState.selectedPropertyId } })\r\n                const existingProperty: Property = getExistingProperty ? getExistingProperty.singleProperty! : { propertyId: 1, propertyName: \"\" };\r\n\r\n                const updatedProperty = {\r\n                    ...existingProperty,\r\n                    images: data.updateProperty.images,\r\n                    contact: { ...existingProperty.contact, contactId: data.updateProperty.contact?.contactId! }\r\n                }\r\n                console.log(updatedProperty)\r\n                if (getExistingProperty)\r\n                    cache.writeQuery<Query>({\r\n                        query: GET_SINGLE_PROPERTY,\r\n                        variables: { propertyId: navigationState.selectedPropertyId },\r\n                        data: { singleProperty: updatedProperty }\r\n                    });\r\n            }\r\n        })\r\n    }\r\n\r\n    if (navigationLoading) return <div>Loading</div>;\r\n    if (propertyLoading) return <div>Loading</div>;\r\n\r\n    return (\r\n        <div>\r\n            <Panel\r\n                isOpen={navigationState.showSelectedPropertyPanel}\r\n                /*  onDismiss={handlePanelDismiss} */\r\n                type={PanelType.extraLarge}\r\n                onRenderNavigationContent={onRenderNavigationContent}\r\n                /* customWidth={panelType === PanelType.custom || panelType === PanelType.customNear ? '888px' : undefined} */\r\n                closeButtonAriaLabel=\"Close\"\r\n                headerText={propertyData?.singleProperty?.propertyName}\r\n                styles={panelStyles}\r\n                layerProps={layerProps}\r\n            >\r\n\r\n                <Stack id=\"Details to Maps Container\" styles={{\r\n                    root: {\r\n                        display: \"flex\",\r\n                        flexFlow: \"row\",\r\n                        /* maxWidth: \"fit-content\" */\r\n                        /*  marginTop: \"0 !important\" */\r\n                    }\r\n                }}>\r\n\r\n                    <Stack id=\"Details, Landlord and Notes Container\" styles={{\r\n                        root: {\r\n                            /*   display: \"flex\",\r\n                              flexFlow: \"row\", */\r\n                            /*  maxWidth: \"fit-content\", */\r\n                            marginLeft: 10,\r\n                            marginTop: 20\r\n                            /*  marginTop: \"0 !important\" */\r\n                        }\r\n                    }}>\r\n\r\n                        <Stack id=\"Details and Landlord Container\" styles={{\r\n                            root: {\r\n                                display: \"flex\",\r\n                                flexFlow: \"row\",\r\n                                /* maxWidth: \"fit-content\" */\r\n                                /*  marginTop: \"0 !important\" */\r\n                            }\r\n                        }}>\r\n\r\n                            <Stack id=\"Property Details\" styles={{\r\n                                root: {\r\n                                    /* width: \"fit-content\", */\r\n                                    marginTop: \"20 !important\",\r\n                                    marginBottom: 10,\r\n                                    marginRight: 10,\r\n                                    padding: '10px',\r\n                                    textAlign: 'left',\r\n                                    color: '#605e5c',\r\n                                    alignItems: \"left\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column\",\r\n                                    /*  borderTop: \"4px solid #2557a2;\",\r\n                                     borderBottom: \"4px solid #2557a2;\", */\r\n                                    backgroundColor: \"white\",\r\n                                    /*  background: isChecked() ? \"rgb(104 113 140 / 14%)\" : \"white\", */\r\n                                    /*  boxShadow: \"-1px 1px 7px 2px #d4cece\",\r\n                                     selectors: {\r\n                                         '&:hover': { background: \"rgb(104 113 140 / 14%)\" },\r\n                                     }, */\r\n                                    /* maxWidth: \"fit-content\" */\r\n\r\n                                }\r\n                            }}\r\n                                gap={15}>\r\n                                <div style={{ display: \"flex\", /* borderTop: \"3px solid rgb(204 171 124 / 42%)\" */  backgroundColor: \"#faebd775\", transform: \"translate(-2px,0px)\", boxShadow: \"rgb(0 0 0 / 30%) 1px 3px 6px 0px\", width: containerWidth }}>\r\n                                    <Text styles={boldStyle2} style={propertyDetailsHeadingStyles}>Property Details:</Text>\r\n                                </div>\r\n\r\n                                <div ref={containerRef} style={{ marginTop: 0, width: \"fit-content\" }}>\r\n\r\n                                    <Stack styles={{\r\n                                        root: {\r\n                                            /* width: 700, */\r\n                                            /*  marginTop: 20,\r\n                                             marginBottom: 10, */\r\n                                            /*   padding: '10px', */\r\n                                            textAlign: 'left',\r\n                                            color: '#605e5c',\r\n                                            alignItems: \"left\",\r\n                                            display: \"flex\",\r\n                                            flexFlow: \"row\",\r\n                                            /*  borderTop: \"4px solid #2557a2;\",\r\n                                             borderBottom: \"4px solid #2557a2;\", */\r\n                                            backgroundColor: \"#d7e0e024\",\r\n                                            boxShadow: \"rgb(0 0 0 / 24%) 1px 3px 6px 0px\",\r\n                                            /*  background: isChecked() ? \"rgb(104 113 140 / 14%)\" : \"white\", */\r\n                                            /*  boxShadow: \"-1px 1px 7px 2px #d4cece\",\r\n                                             selectors: {\r\n                                                 '&:hover': { background: \"rgb(104 113 140 / 14%)\" },\r\n                                             }, */\r\n                                            marginTop: \"0 !important\",\r\n                                            /*  borderBottom: \"3px solid rgb(204 171 124 / 42%)\", */\r\n\r\n\r\n\r\n                                        }\r\n                                    }}\r\n                                        gap={15}>\r\n\r\n                                        <Stack styles={{\r\n                                            root: {\r\n                                                padding: '10px',\r\n                                                textAlign: 'left',\r\n                                                alignItems: \"left\",\r\n                                                display: \"flex\",\r\n                                                flexFlow: \"row\",\r\n\r\n                                            }\r\n                                        }}>\r\n\r\n                                            <Stack verticalFill styles={{\r\n                                                root: {\r\n                                                    marginTop: \"0 !important\"\r\n                                                },\r\n                                            }}\r\n                                                gap={15}>\r\n                                                <Text styles={boldStyle} style={propertyDetailsStyles}>Address:</Text>\r\n                                                <Text styles={boldStyle} style={propertyDetailsStyles}>Suburb:</Text>\r\n                                                <Text styles={boldStyle} style={propertyDetailsStyles}>Region:</Text>\r\n                                                <Text styles={boldStyle} style={propertyDetailsStyles}>Province:</Text>\r\n                                                <Text styles={boldStyle} style={propertyDetailsStyles}>Building Type:</Text>\r\n\r\n                                            </Stack>\r\n\r\n\r\n                                            <Stack verticalFill styles={{\r\n                                                root: {\r\n                                                    marginTop: \"0 !important\",\r\n                                                    marginLeft: 0\r\n                                                },\r\n                                            }}\r\n                                                gap={15}>\r\n                                                <Text style={propertyDetailsStyles}>{propertyData?.singleProperty?.address !== \"\" ? propertyData?.singleProperty?.address : \"-\"}</Text>\r\n                                                <Text style={propertyDetailsStyles}>{propertyData?.singleProperty?.suburb !== \"\" ? propertyData?.singleProperty?.suburb : \"-\"}</Text>\r\n                                                <Text style={propertyDetailsStyles}>{propertyData?.singleProperty?.region !== \"\" ? propertyData?.singleProperty?.region : \"-\"}</Text>\r\n                                                <Text style={propertyDetailsStyles}>{propertyData?.singleProperty?.province !== \"\" ? propertyData?.singleProperty?.province : \"-\"}</Text>\r\n                                                <Text style={propertyDetailsStyles}>{propertyData?.singleProperty?.buildingType !== \"\" ? propertyData?.singleProperty?.buildingType : \"-\"}</Text>\r\n                                            </Stack>\r\n\r\n                                        </Stack>\r\n\r\n                                        <Stack styles={{\r\n                                            root: {\r\n                                                padding: '10px',\r\n                                                textAlign: 'left',\r\n                                                alignItems: \"left\",\r\n                                                display: \"flex\",\r\n                                                flexFlow: \"row\",\r\n                                                marginTop: \"0 !important\"\r\n                                            }\r\n                                        }}>\r\n\r\n                                            <Stack verticalFill styles={{\r\n                                                root: {\r\n                                                    marginTop: \"0 !important\"\r\n                                                },\r\n                                            }}\r\n                                                gap={15}>\r\n\r\n                                                <Text styles={boldStyle} style={propertyDetailsStyles}>Erf Extent:</Text>\r\n                                                <Text styles={boldStyle} style={propertyDetailsStyles}>Total GLA:</Text>\r\n                                                <Text styles={boldStyle} style={propertyDetailsStyles}>Vacant GLA:</Text>\r\n                                                <Text styles={boldStyle} style={propertyDetailsStyles}>Earliest Occupation:</Text>\r\n                                                <Text styles={boldStyle} style={propertyDetailsStyles}>Earliest Expiry:</Text>\r\n                                            </Stack>\r\n\r\n\r\n                                            <Stack verticalFill styles={{\r\n                                                root: {\r\n                                                    marginTop: \"0 !important\",\r\n                                                    marginLeft: 0\r\n                                                },\r\n                                            }}\r\n                                                gap={15}>\r\n\r\n                                                <Text style={propertyDetailsStyles}>{`${propertyData?.singleProperty?.erfExtent} m²`}</Text>\r\n                                                <Text style={propertyDetailsStyles}>{`${propertyData?.singleProperty?.totalGLA} m²`}</Text>\r\n                                                <Text style={propertyDetailsStyles}>{`${getVacantGLA().toFixed(2).replace(/[.,]00$/, \"\")} m²`}</Text>\r\n                                                <Text style={propertyDetailsStyles}>{getEarliestOccDate()}</Text>\r\n                                                <Text style={propertyDetailsStyles}>{getEarliestExpDate()}</Text>\r\n                                            </Stack>\r\n\r\n                                        </Stack>\r\n\r\n                                    </Stack>\r\n\r\n                                </div>\r\n\r\n\r\n                                <Stack id=\"Notes\" styles={{\r\n                                    root: {\r\n                                        width: containerWidth,\r\n                                        /*   marginTop: 10, */\r\n                                        marginBottom: 10,\r\n                                        /*  padding: '10px', */\r\n                                        textAlign: 'left',\r\n                                        color: '#605e5c',\r\n                                        alignItems: \"left\",\r\n                                        display: \"flex\",\r\n                                        flexFlow: \"column\",\r\n                                        /*  borderTop: \"4px solid #2557a2;\",\r\n                                         borderBottom: \"4px solid #2557a2;\", */\r\n                                        backgroundColor: \"white\",\r\n                                        /*  borderBottom: \"3px solid rgb(204 171 124 / 42%)\" */\r\n                                        /*  background: isChecked() ? \"rgb(104 113 140 / 14%)\" : \"white\", */\r\n                                        /*  boxShadow: \"-1px 1px 7px 2px #d4cece\",\r\n                                         selectors: {\r\n                                             '&:hover': { background: \"rgb(104 113 140 / 14%)\" },\r\n                                         }, */\r\n                                        /* maxWidth: \"fit-content\" */\r\n\r\n                                    }\r\n                                }}\r\n                                    gap={15}>\r\n\r\n                                    <div style={{ display: \"flex\",  /* borderTop: \"3px solid rgb(204 171 124 / 42%)\" , */ marginTop: \"0 !important\", backgroundColor: \"#faebd775\", transform: \"translate(-2px,0px)\", boxShadow: \"rgb(0 0 0 / 30%) 1px 3px 6px 0px\", }}>\r\n                                        <Text styles={boldStyle2} style={propertyDetailsHeadingStyles}>Notes:</Text>\r\n\r\n                                    </div>\r\n                                    <div style={{ display: \"flex\", /* borderBottom: \"3px solid rgb(204 171 124 / 42%)\", */ margin: 0, paddingBottom: 10, paddingTop: 10, paddingLeft: 5, paddingRight: 5, backgroundColor: \"#d7e0e024\", boxShadow: \"rgb(0 0 0 / 24%) 1px 3px 6px 0px\", }}>\r\n                                        <Text style={propertyNotesStyles}>{propertyData?.singleProperty?.notes}</Text>\r\n\r\n                                    </div>\r\n\r\n\r\n                                </Stack>\r\n\r\n                            </Stack>\r\n\r\n                            <Stack id=\"Landlord Details\" styles={{\r\n                                root: {\r\n                                    /* width: 700, */\r\n                                    marginTop: 20,\r\n                                    marginBottom: 10,\r\n                                    padding: '10px',\r\n                                    textAlign: 'left',\r\n                                    color: '#605e5c',\r\n                                    alignItems: \"left\",\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"column\",\r\n                                    /*  borderTop: \"4px solid #2557a2;\",\r\n                                     borderBottom: \"4px solid #2557a2;\", */\r\n                                    backgroundColor: \"white\",\r\n                                    /*  background: isChecked() ? \"rgb(104 113 140 / 14%)\" : \"white\", */\r\n                                    /*  boxShadow: \"-1px 1px 7px 2px #d4cece\",\r\n                                     selectors: {\r\n                                         '&:hover': { background: \"rgb(104 113 140 / 14%)\" },\r\n                                     }, */\r\n                                    /*  maxWidth: \"fit-content\" */\r\n\r\n                                }\r\n                            }}\r\n                                gap={15}>\r\n                                <div style={{ display: \"flex\", /* borderTop: \"3px solid rgb(204 171 124 / 42%)\"  */ backgroundColor: \"#faebd775\", transform: \"translate(-2px,0px)\", boxShadow: \"rgb(0 0 0 / 30%) 1px 3px 6px 0px\" }}>\r\n                                    <Text styles={boldStyle2} style={propertyDetailsLandlordHeadingStyles}>Landlord Details:</Text>\r\n                                </div>\r\n\r\n\r\n                                <Stack styles={{\r\n                                    root: {\r\n                                        /* width: 700, */\r\n                                        /*  marginTop: 20,\r\n                                         marginBottom: 10, */\r\n                                        /*   padding: '10px', */\r\n                                        textAlign: 'left',\r\n                                        color: '#605e5c',\r\n                                        alignItems: \"left\",\r\n                                        display: \"flex\",\r\n                                        flexFlow: \"row\",\r\n                                        /*  borderTop: \"4px solid #2557a2;\",\r\n                                         borderBottom: \"4px solid #2557a2;\", */\r\n                                        backgroundColor: \"#d7e0e024\",\r\n                                        boxShadow: \"rgb(0 0 0 / 24%) 1px 3px 6px 0px\",\r\n                                        /*  background: isChecked() ? \"rgb(104 113 140 / 14%)\" : \"white\", */\r\n                                        /*  boxShadow: \"-1px 1px 7px 2px #d4cece\",\r\n                                         selectors: {\r\n                                             '&:hover': { background: \"rgb(104 113 140 / 14%)\" },\r\n                                         }, */\r\n                                        marginTop: \"0 !important\",\r\n                                        /*  borderBottom: \"3px solid rgb(204 171 124 / 42%)\" */\r\n\r\n\r\n                                    }\r\n                                }}\r\n                                    gap={15}>\r\n\r\n                                    <Stack styles={{\r\n                                        root: {\r\n                                            padding: '10px',\r\n                                            textAlign: 'left',\r\n                                            alignItems: \"left\",\r\n                                            display: \"flex\",\r\n                                            flexFlow: \"row\",\r\n\r\n                                        }\r\n                                    }}>\r\n\r\n                                        <Stack verticalFill styles={{\r\n                                            root: {\r\n                                                marginTop: \"0 !important\"\r\n                                            },\r\n                                        }}\r\n                                            gap={15}>\r\n                                            <Text styles={boldStyle} style={propertyDetailsStyles}>Landlord:</Text>\r\n                                            <Text styles={boldStyle} style={propertyDetailsStyles}>Contact:</Text>\r\n                                            <Text styles={boldStyle} style={propertyDetailsStyles}>Email:</Text>\r\n                                            <Text styles={boldStyle} style={propertyDetailsStyles}>Office:</Text>\r\n                                            <Text styles={boldStyle} style={propertyDetailsStyles}>Mobile:</Text>\r\n                                        </Stack>\r\n\r\n\r\n                                        <Stack verticalFill styles={{\r\n                                            root: {\r\n                                                marginTop: \"0 !important\",\r\n                                                marginLeft: 0\r\n                                            },\r\n                                        }}\r\n                                            gap={15}>\r\n                                            <Text style={propertyDetailsLandlordStyles}>{propertyData?.singleProperty?.contact?.landlordName?.landlordName !== \"\" ? propertyData?.singleProperty?.contact?.landlordName?.landlordName : \"-\"}</Text>\r\n                                            <Text style={propertyDetailsLandlordStyles}>{propertyData?.singleProperty?.contact?.name !== \"\" ? propertyData?.singleProperty?.contact?.name : \"-\"}</Text>\r\n                                            <Text style={propertyDetailsLandlordStyles}>{propertyData?.singleProperty?.contact?.email !== \"\" ? propertyData?.singleProperty?.contact?.email : \"-\"}</Text>\r\n                                            <Text style={propertyDetailsLandlordStyles}>{propertyData?.singleProperty?.contact?.mobileNo !== \"\" ? propertyData?.singleProperty?.contact?.mobileNo : \"-\"}</Text>\r\n                                            <Text style={propertyDetailsLandlordStyles}>{propertyData?.singleProperty?.contact?.officeNo !== \"\" ? propertyData?.singleProperty?.contact?.officeNo : \"-\"}</Text>\r\n                                        </Stack>\r\n\r\n                                    </Stack>\r\n                                </Stack>\r\n\r\n                                <Stack verticalFill styles={{\r\n                                    root: {\r\n                                        marginTop: \"20px !important\",\r\n                                        padding: 10\r\n                                    },\r\n                                }}\r\n                                    gap={15}>\r\n\r\n                                    <CommandBarButton\r\n                                        iconProps={photoCollectionIcon}\r\n                                        text=\"Image Gallery\"\r\n                                        onClick={() => navigationStateVar({ ...navigationStateVar(), showImageGalleryModal: true })}\r\n                                        styles={commandBarStyles}\r\n                                    // Set split=true to render a SplitButton instead of a regular button with a menu\r\n                                    // split={true}\r\n\r\n                                    />\r\n\r\n                                    <CommandBarButton\r\n                                        iconProps={addIcon}\r\n                                        text=\"Upload Images\"\r\n                                        onClick={() => showUploadWidget()}\r\n                                        styles={commandBarStyles}\r\n                                    // Set split=true to render a SplitButton instead of a regular button with a menu\r\n                                    // split={true}\r\n\r\n                                    />\r\n\r\n                                </Stack>\r\n\r\n                            </Stack>\r\n\r\n                        </Stack>\r\n\r\n\r\n\r\n\r\n\r\n                    </Stack>\r\n\r\n\r\n\r\n                    <Stack id=\"mapContainer\" styles={{\r\n                        root: {\r\n                            marginLeft: 10,\r\n                            marginRight: \"auto\",\r\n                            padding: '10px',\r\n                            marginTop: \"20px !important\",\r\n\r\n                        }\r\n                    }}>\r\n\r\n                        <Map coordinatesArray={coordinatesArray} propertyId={propertyData?.singleProperty?.propertyId!} contactId={propertyData?.singleProperty?.contact?.contactId!}></Map>\r\n\r\n                    </Stack>\r\n\r\n\r\n\r\n                </Stack>\r\n\r\n                <ImageGalleryModal showImageGalleryModal={navigationStateData?.navigationState?.showImageGalleryModal!} propertyId={navigationStateData?.navigationState?.selectedPropertyId!}></ImageGalleryModal>\r\n\r\n\r\n\r\n                <PremisesList singleProperty={propertyData?.singleProperty!}></PremisesList>\r\n\r\n                <UpdatePropertyModal showUpdatePropertyModal={navigationStateData?.navigationState?.showUpdatePropertyModal!} distinctSuburbsOptions={distinctSuburbsOptions} distinctRegionsOptions={distinctRegionsOptions} propertyId={navigationStateData?.navigationState?.selectedPropertyId!} propertyData={propertyData?.singleProperty!} landlordsOptions={landlordsOptions} ></UpdatePropertyModal>\r\n\r\n                <NewPremisesModal showNewPremisesModal={navigationStateData?.navigationState?.showNewPremisesModal!} propertyId={navigationStateData?.navigationState?.selectedPropertyId!}></NewPremisesModal>\r\n\r\n                <PremisesNotesModal showPremisesNotesModal={navigationStateData?.navigationState?.showPremisesNotesModal!} propertyId={navigationStateData?.navigationState?.selectedPropertyId!} premisesId={navigationStateData?.navigationState?.selectedPremisesId!} ></PremisesNotesModal>\r\n\r\n                <UpdatePremisesModal showUpdatePremisesModal={navigationStateData?.navigationState?.showUpdatePremisesModal!} propertyId={navigationStateData?.navigationState?.selectedPropertyId!} premisesId={navigationStateData?.navigationState?.selectedPremisesId!}></UpdatePremisesModal>\r\n\r\n                <DuplicatePremisesModal showDuplicatePremisesModal={navigationStateData?.navigationState?.showDuplicatePremisesModal!} propertyId={navigationStateData?.navigationState?.selectedPropertyId!} premisesId={navigationStateData?.navigationState?.selectedPremisesId!}></DuplicatePremisesModal>\r\n\r\n\r\n\r\n            </Panel>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectedPropertyPanel\r\n\r\n","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\SavedListItem.tsx",["482","483","484","485","486","487","488","489","490","491"],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\LandlordListItem.tsx",["492","493","494","495"],"import * as React from 'react';\r\nimport { getTheme } from '@fluentui/react';\r\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\r\nimport { Query, Mutation, MutationDeleteLandlordArgs, MutationUpdateLandlordArgs, MutationPostLandlordContactArgs, Landlord } from \"../schematypes/schematypes\"\r\nimport { DELETE_LANDLORD, GET_LANDLORDS, UPDATE_LANDLORD, NEW_LANDLORD_CONTACT } from \"../gql/gql\"\r\nimport { useMutation, } from '@apollo/client';\r\nimport { mergeStyles } from 'office-ui-fabric-react/lib/Styling';\r\nimport {IContextualMenuProps, Stack, Text, FontWeights, IconButton, IIconProps, DefaultButton, FocusTrapCallout, FocusZone, PrimaryButton, mergeStyleSets, TextField, ITextFieldStyles } from 'office-ui-fabric-react';\r\nimport { useBoolean } from '@uifabric/react-hooks';\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport ContactListItem from \"./ContactListItem\"\r\n\r\n\r\ninterface Props {\r\n  landlord: Landlord\r\n  key: any\r\n  expanded: number | false\r\n  setExpanded: React.Dispatch<React.SetStateAction<number | false>>\r\n}\r\n\r\nexport const LandlordListItem: React.FunctionComponent<Props> = ({ landlord, expanded, setExpanded }) => {\r\n\r\n  const [isOpen, setIsOpen] = React.useState(false)\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n\r\n    if (expanded === landlord.landlordId) {\r\n      setIsOpen(true)\r\n    } else { setIsOpen(false) }\r\n\r\n  }, [expanded, landlord.landlordId])\r\n\r\n  const [isDeleteCalloutVisible, { toggle: toggleIsDeleteCalloutVisible }] = useBoolean(false);\r\n  const [isEditCalloutVisible, { toggle: toggleIsEditCalloutVisible }] = useBoolean(false);\r\n  const [isAddContactCalloutVisible, { toggle: toggleIsAddContactCalloutVisible }] = useBoolean(false);\r\n\r\n  const [editLandlordName, setEditLandlordName] = React.useState(landlord.landlordName)\r\n\r\n  const [addContact, setAddContact] = React.useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    mobileNo: \"\",\r\n    officeNo: \"\"\r\n  })\r\n\r\n  const handleExpand = (landlordId: number) => {\r\n    if (isOpen === false) {\r\n      setExpanded(landlordId)\r\n    } else { setExpanded(false) }\r\n\r\n\r\n\r\n  }\r\n\r\n  const [deleteLandlord, { data: deleteLandlordData }] = useMutation<Mutation, MutationDeleteLandlordArgs>(DELETE_LANDLORD);\r\n\r\n  const deleteLandlordButton = () => {\r\n\r\n    deleteLandlord({\r\n      variables: {\r\n        landlordId: landlord.landlordId\r\n      },\r\n      update(cache, { data }) {\r\n\r\n        if (!data) {\r\n          return null;\r\n        }\r\n\r\n        const getExistingLandlords = cache.readQuery<Query>({ query: GET_LANDLORDS });\r\n\r\n        const existingLandlords = getExistingLandlords ? getExistingLandlords.landlords : [];\r\n        const newLandlords = existingLandlords!.filter(t => {\r\n\r\n          return (t.landlordId !== landlord.landlordId)\r\n        });\r\n        if (existingLandlords)\r\n          cache.writeQuery<Query>({\r\n            query: GET_LANDLORDS,\r\n            data: { landlords: newLandlords }\r\n          });\r\n      }\r\n\r\n    })\r\n    toggleIsDeleteCalloutVisible()\r\n  }\r\n\r\n  const [updateLandlord, { data: updateLandlordData }] = useMutation<Mutation, MutationUpdateLandlordArgs>(UPDATE_LANDLORD);\r\n\r\n  const updateLandlordButton = () => {\r\n\r\n    updateLandlord({\r\n      variables: {\r\n        landlordId: landlord.landlordId,\r\n        landlordName: editLandlordName\r\n\r\n      },\r\n\r\n      update(cache, { data }) {\r\n\r\n        if (!data) {\r\n          return null;\r\n        }\r\n\r\n        const getExistingLandlords = cache.readQuery<Query>({ query: GET_LANDLORDS });\r\n\r\n        const existingLandlords = getExistingLandlords ? getExistingLandlords.landlords : [];\r\n        const updatedLandlord = data.updateLandlord!/* .returning[0] */;\r\n        const otherLandlords = existingLandlords!.filter(t => {\r\n          return t.landlordId !== landlord.landlordId\r\n        })\r\n        if (existingLandlords)\r\n          cache.writeQuery<Query>({\r\n            query: GET_LANDLORDS,\r\n            data: { landlords: [updatedLandlord, ...otherLandlords] }\r\n          });\r\n      }\r\n\r\n    })\r\n    setEditLandlordName(\"\")\r\n    toggleIsEditCalloutVisible()\r\n  }\r\n\r\n  const [postContact, { data }] = useMutation<Mutation, MutationPostLandlordContactArgs>(NEW_LANDLORD_CONTACT);\r\n\r\n  const saveNewContactButton = () => {\r\n\r\n    postContact({\r\n      variables: {\r\n        landlordId: landlord.landlordId,\r\n        name: addContact.name,\r\n        email: addContact.email,\r\n        mobileNo: addContact.mobileNo,\r\n        officeNo: addContact.officeNo,\r\n\r\n      },\r\n\r\n      update(cache, { data }) {\r\n\r\n        if (!data) {\r\n          return null;\r\n        }\r\n\r\n        const getExistingLandlords = cache.readQuery<Query>({ query: GET_LANDLORDS });\r\n        // Add the new todo to the cache\r\n        const existingLandlords = getExistingLandlords ? getExistingLandlords.landlords : [];\r\n        const selectedLandlord = existingLandlords!.find(t =>\r\n          t.landlordId === landlord.landlordId\r\n        )\r\n        const otherLandlords = existingLandlords!.filter(t => {\r\n          return t.landlordId !== landlord.landlordId\r\n        })\r\n        const existingContacts = selectedLandlord?.contactsList\r\n        const newContact = data.postLandlordContact!/* .returning[0] */;\r\n        const updatedLandlord = { landlordId: selectedLandlord!.landlordId, landlordName: selectedLandlord!.landlordName, contactsList: [...existingContacts!, newContact] }\r\n        if (existingLandlords)\r\n          cache.writeQuery<Query>({\r\n            query: GET_LANDLORDS,\r\n            data: { landlords: [updatedLandlord!, ...otherLandlords] }\r\n          });\r\n      }\r\n\r\n\r\n    })\r\n\r\n    setAddContact({\r\n      name: \"\",\r\n      email: \"\",\r\n      mobileNo: \"\",\r\n      officeNo: \"\"\r\n    })\r\n    toggleIsAddContactCalloutVisible()\r\n    setIsOpen(true)\r\n  }\r\n\r\n\r\n\r\n\r\n  const styles = mergeStyleSets({\r\n\r\n    callout: {\r\n      maxWidth: 400,\r\n    },\r\n    header: {\r\n      padding: '18px 24px 12px',\r\n    },\r\n    title: [\r\n      {\r\n        margin: 0,\r\n        fontWeight: FontWeights.bold,\r\n      },\r\n    ],\r\n    inner: {\r\n      height: '100%',\r\n      padding: '0 24px 20px',\r\n    },\r\n    actions: {\r\n      position: 'relative',\r\n      marginTop: 20,\r\n      width: '100%',\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    buttons: {\r\n      display: 'flex',\r\n      justifyContent: 'flex-end',\r\n      padding: '0 24px 24px',\r\n    },\r\n    subtext: [\r\n      {\r\n        margin: 0,\r\n        fontWeight: FontWeights.semilight,\r\n      },\r\n    ],\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const chevronClass = mergeStyles({\r\n    alignSelf: 'center',\r\n    marginLeft: 2,\r\n    /*  marginRight: 5, */\r\n    marginTop: \"0 !important\",\r\n    /* color: palette.neutralTertiary, */\r\n    fontSize: 20,\r\n    flexShrink: 0,\r\n    cursor: \"pointer\",\r\n    /* selectors: {\r\n      '&:hover': { \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.1)\" },\r\n    }, */\r\n\r\n  });\r\n\r\n  \r\n\r\n  const chevronIconDiv = mergeStyles({\r\n    /* fontSize: 50, */\r\n    height: 40,\r\n    width: 40,\r\n    lineHeight: 40,\r\n    textAlign: \"center\",\r\n    /* marginLeft: \"auto !important\",\r\n    marginRight: 15, */\r\n    marginTop: \"0px !important\",\r\n    marginBottom: \"0px !important\",\r\n    /* padding: \"5px\", */\r\n    selectors: {\r\n      '&:hover': { backgroundColor: \"rgb(0 13 255 / 14%)\", borderRadius: 30, \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.2)\" },\r\n    },\r\n\r\n  });\r\n\r\n  const chevronDiv = mergeStyles({\r\n\r\n    marginTop: \"0px !important\",\r\n    marginRight: 15,\r\n    marginLeft: \"auto !important\",\r\n  });\r\n\r\n  const boldStyle = { root: { fontWeight: FontWeights.semibold } };\r\n  const propertyHeadingStyles = { alignSelf: \"start\", fontSize: \"23px\", padding: 5, paddingLeft: \"25px\" }\r\n  \r\n  const theme = getTheme();\r\n \r\n  \r\n\r\n  const menuProps: IContextualMenuProps = {\r\n    items: [\r\n      {\r\n        key: 'Delete Landlord',\r\n        text: 'Delete Landlord',\r\n        iconProps: { iconName: 'Delete' },\r\n        onClick: toggleIsDeleteCalloutVisible\r\n      },\r\n      {\r\n        key: 'Edit Landlord',\r\n        text: 'Edit Landlord',\r\n        iconProps: { iconName: 'Edit' },\r\n        onClick: toggleIsEditCalloutVisible\r\n      },\r\n      {\r\n        key: 'Add Contact',\r\n        text: 'Add Contact',\r\n        iconProps: { iconName: 'Add' },\r\n        onClick: toggleIsAddContactCalloutVisible\r\n      },\r\n    ],\r\n    directionalHintFixed: false,\r\n    styles: {container: {width: 150}}\r\n  };\r\n\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: theme.palette.neutralPrimary,\r\n      marginLeft: 5,\r\n      marginTop: '0px !important',\r\n      marginRight: 5,\r\n      width: 35,\r\n      height: 35,\r\n      /*  visibility: isChecked() ? \"visible\" : \"hidden\", */\r\n\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n      backgroundColor: \"rgb(3 122 212 / 16%);\",\r\n      /* borderRadius: 30, */\r\n      \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.1)\"\r\n\r\n    },\r\n    icon: {\r\n      fontSize: \"24px\",\r\n      marginLeft: 6\r\n\r\n    }\r\n  };\r\n\r\n  \r\n  const menuIcon: IIconProps = { iconName: 'SingleColumnEdit' };\r\n\r\n  const textFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 300 } };\r\n  const textFieldContactStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 250 } };\r\n\r\n  const onChangeLandlordName = React.useCallback(\r\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n      setEditLandlordName(newValue!);\r\n    },\r\n    [editLandlordName],\r\n  );\r\n\r\n  const onChangeContactName = React.useCallback(\r\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n      setAddContact({ ...addContact, name: newValue! });\r\n    },\r\n    [addContact],\r\n  );\r\n\r\n  const onChangeContactEmail = React.useCallback(\r\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n      setAddContact({ ...addContact, email: newValue! });\r\n    },\r\n    [addContact],\r\n  );\r\n\r\n  const onChangeContactMobileNo = React.useCallback(\r\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n      setAddContact({ ...addContact, mobileNo: newValue! });\r\n    },\r\n    [addContact],\r\n  );\r\n\r\n  const onChangeContactOfficeNo = React.useCallback(\r\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n      setAddContact({ ...addContact, officeNo: newValue! });\r\n    },\r\n    [addContact],\r\n  );\r\n\r\n  return (\r\n\r\n    <Stack styles={{ root: { marginTop: 20 } }} verticalFill>\r\n\r\n      <Stack\r\n        horizontalAlign=\"start\"\r\n        verticalAlign=\"start\"\r\n        id=\"card\"\r\n\r\n        styles={{\r\n          root: {\r\n            width: 580,\r\n            marginBottom: 10,\r\n            marginTop: 10,\r\n            padding: '10px',\r\n            textAlign: 'center',\r\n            color: '#605e5c',\r\n            alignItems: \"center\",\r\n            display: \"flex\",\r\n            flexFlow: \"row\",\r\n            /*  borderTop: \"4px solid #2557a2;\",\r\n             borderBottom: \"4px solid #2557a2;\", */\r\n            backgroundColor: \"white\",\r\n            background: /* isChecked() ? \"rgb(104 113 140 / 14%)\" : */ \"white\",\r\n            boxShadow: \"-1px 1px 7px 2px #d4cece\",\r\n            selectors: {\r\n              '&:hover': { background: /* palette.neutralLight */  \"rgb(104 113 140 / 14%)\" },\r\n            },\r\n\r\n          }\r\n        }}\r\n        gap={15}>\r\n\r\n\r\n\r\n        <IconButton\r\n          styles={iconButtonStyles}\r\n          id={`comboButton${landlord.landlordId}`}\r\n          menuProps={menuProps}\r\n          iconProps={menuIcon}\r\n          ariaLabel=\"Combo Button\"\r\n        />\r\n\r\n        <Stack styles={{ root: { paddingTop: 0, marginTop: \"0 !important\", marginBottom: \"auto\" } }} verticalFill>\r\n          <Text styles={boldStyle} style={propertyHeadingStyles}>{landlord.landlordName}</Text>\r\n\r\n\r\n\r\n        </Stack>\r\n\r\n\r\n        {isDeleteCalloutVisible ? (\r\n          <div>\r\n            <FocusTrapCallout\r\n              role=\"alertdialog\"\r\n              className={styles.callout}\r\n              gapSpace={0}\r\n              target={`#comboButton${landlord.landlordId}`}\r\n              onDismiss={toggleIsDeleteCalloutVisible}\r\n              setInitialFocus\r\n            >\r\n              <div className={styles.header}>\r\n                <Text className={styles.title}>Delete Landlord</Text>\r\n              </div>\r\n              <div className={styles.inner}>\r\n                <div>\r\n                  <Text className={styles.subtext}>\r\n                    Are you sure you want to delete this landlord?\r\n                </Text>\r\n                </div>\r\n              </div>\r\n              <FocusZone>\r\n                <Stack className={styles.buttons} gap={8} horizontal>\r\n                  <PrimaryButton onClick={deleteLandlordButton}>Confirm</PrimaryButton>\r\n                  <DefaultButton onClick={toggleIsDeleteCalloutVisible}>Cancel</DefaultButton>\r\n                </Stack>\r\n              </FocusZone>\r\n            </FocusTrapCallout>\r\n          </div>\r\n        ) : null}\r\n       \r\n        {isEditCalloutVisible ? (\r\n          <div>\r\n            <FocusTrapCallout\r\n              role=\"alertdialog\"\r\n              className={styles.callout}\r\n              gapSpace={0}\r\n              target={`#comboButton${landlord.landlordId}`}\r\n              onDismiss={toggleIsEditCalloutVisible}\r\n              setInitialFocus\r\n            >\r\n              <div className={styles.header}>\r\n                <Text className={styles.title}>Edit Landlord</Text>\r\n              </div>\r\n              <div className={styles.inner}>\r\n                <div>\r\n\r\n                  <TextField\r\n                    styles={textFieldStyles}\r\n                    label=\"Landlord Name\"\r\n\r\n                    value={editLandlordName}\r\n                    onChange={onChangeLandlordName}></TextField>\r\n                </div>\r\n              </div>\r\n              <FocusZone>\r\n                <Stack className={styles.buttons} gap={8} horizontal>\r\n                  <PrimaryButton onClick={updateLandlordButton}>Confirm</PrimaryButton>\r\n                  <DefaultButton onClick={toggleIsEditCalloutVisible}>Cancel</DefaultButton>\r\n                </Stack>\r\n              </FocusZone>\r\n            </FocusTrapCallout>\r\n          </div>\r\n        ) : null}\r\n\r\n        {isAddContactCalloutVisible ? (\r\n          <div>\r\n            <FocusTrapCallout\r\n              role=\"alertdialog\"\r\n              className={styles.callout}\r\n              gapSpace={0}\r\n              target={`#comboButton${landlord.landlordId}`}\r\n              onDismiss={toggleIsAddContactCalloutVisible}\r\n              setInitialFocus\r\n            >\r\n              <div className={styles.header}>\r\n                <Text className={styles.title}>Add Contact</Text>\r\n              </div>\r\n              <div className={styles.inner}>\r\n                <div>\r\n\r\n                  <TextField\r\n                    styles={textFieldContactStyles}\r\n                    label=\"Name\"\r\n                    value={addContact.name}\r\n                    onChange={onChangeContactName}>\r\n                  </TextField>\r\n                  <TextField\r\n                    styles={textFieldContactStyles}\r\n                    label=\"Email\"\r\n                    value={addContact.email}\r\n                    onChange={onChangeContactEmail}>\r\n                  </TextField>\r\n                  <TextField\r\n                    styles={textFieldContactStyles}\r\n                    label=\"Mobile No\"\r\n                    value={addContact.mobileNo}\r\n                    onChange={onChangeContactMobileNo}>\r\n                  </TextField>\r\n                  <TextField\r\n                    styles={textFieldContactStyles}\r\n                    label=\"Office No\"\r\n                    value={addContact.officeNo}\r\n                    onChange={onChangeContactOfficeNo}>\r\n                  </TextField>\r\n                </div>\r\n              </div>\r\n              <FocusZone>\r\n                <Stack className={styles.buttons} gap={8} horizontal>\r\n                  <PrimaryButton onClick={saveNewContactButton}>Confirm</PrimaryButton>\r\n                  <DefaultButton onClick={toggleIsAddContactCalloutVisible}>Cancel</DefaultButton>\r\n                </Stack>\r\n              </FocusZone>\r\n            </FocusTrapCallout>\r\n          </div>\r\n        ) : null}\r\n\r\n        <motion.section\r\n          className={chevronDiv}\r\n          /*  key=\"chevron\"\r\n           initial=\"collapsed\" */\r\n          animate={isOpen ? \"open\" : \"collapsed\"}\r\n          /*  exit=\"collapsed\" */\r\n          variants={{\r\n            open: { transform: \"rotate(270deg)\" },\r\n            collapsed: { transform: \"rotate(90deg)\" }\r\n          }}\r\n          transition={{ duration: 0.4, ease: [0.04, 0.62, 0.23, 0.98] }}\r\n        >\r\n\r\n          <div className={chevronIconDiv} onClick={() => handleExpand(landlord.landlordId)}><Icon className={chevronClass} iconName={'ChevronRight'} /></div>\r\n\r\n        </motion.section>\r\n\r\n\r\n\r\n\r\n      </Stack>\r\n\r\n\r\n      <AnimatePresence initial={false}>\r\n        {isOpen && (\r\n          <motion.section\r\n            key=\"content\"\r\n            initial=\"collapsed\"\r\n            animate=\"open\"\r\n            exit=\"collapsed\"\r\n            variants={{\r\n              open: { opacity: 1, height: \"auto\" },\r\n              collapsed: { opacity: 0, height: 0 }\r\n            }}\r\n            transition={{ duration: 0.4, ease: [0.04, 0.62, 0.23, 0.98] }}\r\n          >\r\n            <Stack horizontal styles={{\r\n              root: {\r\n                width: 580,\r\n                display: \"flex\",\r\n                flexFlow: \"row wrap\"\r\n\r\n              }\r\n            }} >\r\n\r\n              {landlord.contactsList?.map((contact) => {\r\n                return <ContactListItem landlordId={landlord.landlordId} contact={contact} key={contact.contactId}></ContactListItem>\r\n\r\n              })}\r\n\r\n            </Stack>\r\n          </motion.section>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n    </Stack>\r\n\r\n\r\n\r\n  );\r\n};\r\n\r\nexport default LandlordListItem","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PDFOutput\\PropertyListLargeImagesPDF.tsx",["496","497","498","499","500","501","502","503","504","505","506","507","508","509"],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PDFOutput\\SelectedPropertyListPDF.tsx",[],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\UpdatePropertyModal.tsx",["510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530"],"import React, { useState } from 'react';\r\nimport { useId, useBoolean } from '@uifabric/react-hooks';\r\nimport { TextField, ITextFieldStyles } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Dropdown, DropdownMenuItemType, IDropdownOption, IDropdownStyles } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\r\nimport { IStackStyles, Stack } from 'office-ui-fabric-react/lib/Stack';\r\nimport {\r\n    getTheme,\r\n    mergeStyleSets,\r\n    FontWeights,\r\n    ContextualMenu,\r\n    Toggle,\r\n    IToggleStyles,\r\n    DefaultButton,\r\n    Modal,\r\n    IDragOptions,\r\n    IconButton,\r\n    IIconProps,\r\n    IModalStyles,\r\n    mergeStyles,\r\n    ComboBox,\r\n    Fabric,\r\n    IComboBoxOption,\r\n    IComboBox,\r\n    SelectableOptionMenuItemType,\r\n    IComboBoxStyles,\r\n    PrimaryButton,\r\n} from 'office-ui-fabric-react';\r\nimport { Pivot, PivotItem } from 'office-ui-fabric-react/lib/Pivot';\r\nimport { gql, useMutation, useQuery } from '@apollo/client';\r\nimport { GET_PROPERTIES, NEW_PROPERTY, GET_NAV_STATE, UPDATE_PROPERTY, GET_SINGLE_PROPERTY } from \"../gql/gql\"\r\nimport { Mutation, MutationUpdatePropertyArgs, Query, Property, Landlord, LandlordContact } from \"../schematypes/schematypes\"\r\nimport { navigationState } from \"../reactivevariables/reactivevariables\"\r\nimport \"./NewPremisesModal.css\"\r\n\r\n\r\n\r\n\r\nconst dragOptions: IDragOptions = {\r\n    moveMenuItemText: 'Move',\r\n    closeMenuItemText: 'Close',\r\n    menu: ContextualMenu,\r\n};\r\nconst cancelIcon: IIconProps = { iconName: 'Cancel' };\r\nconst saveIcon: IIconProps = { iconName: 'Save' };\r\n\r\ninterface Props {\r\n    showUpdatePropertyModal: boolean;\r\n    distinctSuburbsOptions: IComboBoxOption[];\r\n    distinctRegionsOptions: IComboBoxOption[];\r\n    propertyId: number\r\n    propertyData: Property\r\n    landlordsOptions: IComboBoxOption[];\r\n}\r\n\r\nexport const UpdatePropertyModal: React.FC<Props> = ({ showUpdatePropertyModal, distinctSuburbsOptions, distinctRegionsOptions, propertyId, propertyData, landlordsOptions }) => {\r\n\r\n    const hideUpdatePropertyModal = () => {\r\n        navigationState({ ...navigationState(), showUpdatePropertyModal: false })\r\n    }\r\n\r\n    \r\n\r\n\r\n    const [updatedProperty, setUpdateProperty] = React.useState(propertyData);\r\n\r\n    interface SelectedLandlord {\r\n        landlordId: number\r\n        landlordName: string\r\n        landlordData: Landlord\r\n    }\r\n\r\n    const [selectedLandlord, setSelectedLandlord] = React.useState<SelectedLandlord>(\r\n        {\r\n            landlordId: propertyData.contact?.landlordName?.landlordId!,\r\n            landlordName: propertyData.contact?.landlordName?.landlordName!,\r\n            landlordData: { \r\n                landlordId: propertyData.contact?.landlordName?.landlordId!,\r\n                landlordName: propertyData.contact?.landlordName?.landlordName!,\r\n                contactsList: propertyData.contact?.landlordName?.contactsList!\r\n            }\r\n\r\n        });\r\n\r\n\r\n    interface SelectedContact {\r\n        contactId: number\r\n        contactName: string\r\n        contactData: LandlordContact\r\n    }\r\n\r\n\r\n    const [selectedContact, setSelectedContact] = React.useState<SelectedContact>(\r\n        {\r\n            contactId: propertyData.contact?.contactId! | 0,\r\n            contactName: propertyData.contact?.name!,\r\n            contactData: { \r\n                contactId: propertyData.contact?.contactId!,\r\n                name: propertyData.contact?.name!, \r\n                email: propertyData.contact?.email!,\r\n                mobileNo: propertyData.contact?.mobileNo!,\r\n                officeNo: propertyData.contact?.officeNo!,\r\n            }\r\n\r\n        });\r\n\r\n\r\n    const [updateProperty, { data }] = useMutation<Mutation, MutationUpdatePropertyArgs>(UPDATE_PROPERTY);\r\n\r\n    const saveUpdateProperty = () => {\r\n\r\n        updateProperty({\r\n            variables: {\r\n                contactId: selectedContact.contactId,\r\n                propertyId: propertyId,\r\n                propertyName: updatedProperty.propertyName,\r\n                address: updatedProperty.address,\r\n                suburb: updatedProperty.suburb,\r\n                coordinates: updatedProperty.coordinates,\r\n                /*  earliestOccupation: UpdateProperty.earliestOccupation,\r\n                 earliestExpiry: UpdateProperty.earliestExpiry, */\r\n                erfExtent: updatedProperty.erfExtent,\r\n                totalGLA: updatedProperty.totalGLA,\r\n                vacantArea: updatedProperty.vacantArea,\r\n                buildingType: updatedProperty.buildingType,\r\n                province: updatedProperty.province,\r\n                region: updatedProperty.region,\r\n                notes: updatedProperty.notes,\r\n            },\r\n\r\n            update(cache, { data }) {\r\n\r\n                if (!data) {\r\n                    return null;\r\n                }\r\n\r\n                const getExistingProperty = cache.readQuery<Query>({ query: GET_SINGLE_PROPERTY, variables: { propertyId: propertyId } })\r\n                const existingProperty: Property = getExistingProperty ? getExistingProperty.singleProperty! : { propertyId: 1, propertyName: \"\" };\r\n\r\n                const updatedProperty = {\r\n                    ...existingProperty, propertyName: data.updateProperty.propertyName,\r\n                    address: data.updateProperty.address,\r\n                    suburb: data.updateProperty.suburb,\r\n                    coordinates: data.updateProperty.coordinates,\r\n                    /*  earliestOccupation: UpdateProperty.earliestOccupation,\r\n                     earliestExpiry: UpdateProperty.earliestExpiry, */\r\n                    erfExtent: data.updateProperty.erfExtent,\r\n                    totalGLA: data.updateProperty.totalGLA,\r\n                    vacantArea: data.updateProperty.vacantArea,\r\n                    buildingType: data.updateProperty.buildingType,\r\n                    province: data.updateProperty.province,\r\n                    region: data.updateProperty.region,\r\n                    notes: data.updateProperty.notes,\r\n                    contact:  data.updateProperty.contact\r\n                }\r\n\r\n\r\n\r\n\r\n                if (existingProperty)\r\n                    cache.writeQuery<Query>({\r\n                        query: GET_SINGLE_PROPERTY,\r\n                        variables: { propertyId: propertyId },\r\n                        data: { singleProperty: updatedProperty }\r\n                    });\r\n            }\r\n\r\n\r\n        })\r\n\r\n\r\n        hideUpdatePropertyModal()\r\n    }\r\n\r\n\r\n\r\n    /* const [isModalOpen, { setTrue: showModal, setFalse: hideModal }] = useBoolean(false);\r\n    const [isDraggable, { toggle: toggleIsDraggable }] = useBoolean(false); */\r\n\r\n    // Use useId() to ensure that the IDs are unique on the page.\r\n    // (It's also okay to use plain strings and manually ensure uniqueness.)\r\n\r\n\r\n    const textFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldPropertyNameStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 300, marginRight: 20 } };\r\n    const textFieldAddressStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 300, marginRight: 20 } };\r\n    const textFieldCoordinatesStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 150, marginRight: 20 } };\r\n    const textFieldErfStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldNotesStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 500, marginRight: 20 } };\r\n    const dropdownStyles: Partial<IDropdownStyles> = { dropdown: { width: 150, marginRight: 20 } };\r\n    const dropdownSectorStyles: Partial<IDropdownStyles> = { dropdown: { width: 420, marginRight: 20 } };\r\n    const dropdownProvinceStyles: Partial<IDropdownStyles> = { dropdown: { width: 140, marginRight: 20 } };\r\n    const comboBoxStyles: Partial<IComboBoxStyles> = { root: { width: 140, marginRight: 20 } }\r\n\r\n    const comboBoxLandlordStyles: Partial<IComboBoxStyles> = { root: { width: 220, marginRight: 20 } }\r\n    const textFieldLandlordStyles: Partial<ITextFieldStyles> = { root: { width: \"100%\", marginRight: 20, marginTop: \"20px !important\" } };\r\n\r\n    const textFieldLandlordEmailStyles: Partial<ITextFieldStyles> = { root: { width: \"100%\", marginRight: 20, marginTop: \"20px !important\" } };\r\n\r\n    const modalStyles: Partial<IModalStyles> = { main: { position: \"absolute\", top: 150 }, layer: {zIndex: 55000} };\r\n\r\n    const buttonStyles = { root: { width: 100, marginRight: \"auto !important\", marginBottom: \"auto\", marginTop: \"60px !important\", marginLeft: \"auto !important\", height: 40 } };\r\n\r\n    const headerIconStackStyles: Partial<IStackStyles> = { root: { marginRight: 0, marginLeft: \"auto\", } }\r\n\r\n    const buildingTypeOptions = [\r\n\r\n        { key: 'Office', text: 'Office' },\r\n        { key: 'Industrial', text: 'Industrial' },\r\n        { key: 'Retail', text: 'Retail' },\r\n        { key: 'Mixed Use', text: 'Mixed Use' },\r\n    ];\r\n\r\n\r\n\r\n    const [selectedItem, setSelectedItem] = React.useState<IDropdownOption>({ key: updatedProperty.buildingType!, text: updatedProperty.buildingType! });\r\n\r\n\r\n\r\n    const onChangeBuildingType = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        if (item !== undefined) {\r\n            setSelectedItem(item);\r\n            setUpdateProperty({ ...updatedProperty, buildingType: item.text });\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const propertyProvinceOptions = [\r\n\r\n        { key: 'WC', text: 'WC' },\r\n        { key: 'Gau', text: 'GAU' },\r\n        { key: 'KZN', text: 'KZN' },\r\n        { key: 'Other', text: 'Other Provinces' },\r\n\r\n    ];\r\n\r\n    const [selectedProvince, setSelectedProvince] = React.useState<IDropdownOption>({ key: updatedProperty.province!, text: updatedProperty.province! });\r\n\r\n    const onChangePropertyProvince = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        if (item !== undefined) {\r\n            setSelectedProvince(item);\r\n            setUpdateProperty({ ...updatedProperty, province: item.text });\r\n        }\r\n    };\r\n\r\n    const suburbComboOptions: IComboBoxOption[] = distinctSuburbsOptions\r\n\r\n\r\n    /* [\r\n        { key: 'Header1', text: 'First heading', itemType: SelectableOptionMenuItemType.Header },\r\n        { key: 'A', text: 'Option A' },\r\n        { key: 'B', text: 'Option B' },\r\n        { key: 'C', text: 'Option C' },\r\n        { key: 'D', text: 'Option D' },\r\n        { key: 'divider', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n        { key: 'Header2', text: 'Second heading', itemType: SelectableOptionMenuItemType.Header },\r\n        { key: 'E', text: 'Option E' },\r\n        { key: 'F', text: 'Option F', disabled: true },\r\n        { key: 'G', text: 'Option G' },\r\n        { key: 'H', text: 'Option H' },\r\n        { key: 'I', text: 'Option I' },\r\n        { key: 'J', text: 'Option J' },\r\n      ]; */\r\n\r\n    const [selectedSuburb, setSelectedSuburb] = React.useState<string | number | undefined>(updatedProperty.suburb);\r\n\r\n    const onChangePropertySuburb = React.useCallback(\r\n        (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => {\r\n            setSelectedSuburb(option?.key);\r\n            if (option !== undefined) {\r\n                setUpdateProperty({ ...updatedProperty, suburb: option!.text })\r\n            } else {\r\n                setUpdateProperty({ ...updatedProperty, suburb: value })\r\n            }\r\n        },\r\n        [updatedProperty],\r\n    );\r\n\r\n    const regionComboOptions: IComboBoxOption[] = distinctRegionsOptions\r\n\r\n    const [selectedRegion, setSelectedRegion] = React.useState<string | number | undefined>(updatedProperty.region);\r\n\r\n    const onChangePropertyRegion = React.useCallback(\r\n        (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => {\r\n            setSelectedRegion(option?.key);\r\n            if (option !== undefined) {\r\n                setUpdateProperty({ ...updatedProperty, region: option!.text })\r\n            } else {\r\n                setUpdateProperty({ ...updatedProperty, region: value })\r\n            }\r\n        },\r\n        [updatedProperty],\r\n    );\r\n\r\n    const landlordComboOptions: IComboBoxOption[] = landlordsOptions\r\n\r\n    const onChangeLandlord = React.useCallback(\r\n        (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => {\r\n            setSelectedLandlord({\r\n                landlordName: option?.text!,\r\n                landlordId: option?.data.landlordId,\r\n                landlordData: option?.data\r\n            });\r\n            setSelectedContact({\r\n                contactName: \"\",\r\n                contactId: 0,\r\n                contactData: { contactId: 0 }\r\n            });\r\n\r\n        },\r\n        [selectedLandlord],\r\n    );\r\n\r\n   \r\n\r\n    const contactsFormatted = selectedLandlord.landlordData?.contactsList?.map((contact) => {\r\n        return { key: contact.name!, text: contact.name!, data: contact }\r\n    })\r\n    var contactsOptions: IComboBoxOption[] = []\r\n\r\n    if (contactsFormatted !== undefined) {\r\n        contactsOptions = [...contactsFormatted]\r\n    }\r\n\r\n    const contactComboOptions: IComboBoxOption[] = contactsOptions\r\n\r\n    const onChangeContact = React.useCallback(\r\n        (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => {\r\n            setSelectedContact({\r\n                contactName: option?.text!,\r\n                contactId: option?.data.contactId,\r\n                contactData: option?.data\r\n            });\r\n           \r\n        },\r\n        [selectedLandlord],\r\n    );\r\n\r\n\r\n    const stackTokens = { childrenGap: 15 };\r\n\r\n\r\n\r\n    const onChangePropertyName = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdateProperty({ ...updatedProperty, propertyName: newValue || '' });\r\n        },\r\n        [updatedProperty],\r\n    );\r\n\r\n    const onChangeAddress = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdateProperty({ ...updatedProperty, address: newValue || '' });\r\n        },\r\n        [updatedProperty],\r\n    );\r\n    const onChangeCoordinates = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdateProperty({ ...updatedProperty, coordinates: newValue || '' });\r\n        },\r\n        [updatedProperty],\r\n    );\r\n    const onChangeErfExtent = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdateProperty({ ...updatedProperty, erfExtent: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedProperty],\r\n    );\r\n    const onChangeTotalGLA = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdateProperty({ ...updatedProperty, totalGLA: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedProperty],\r\n    );\r\n    const onChangeNotes = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdateProperty({ ...updatedProperty, notes: newValue || '' });\r\n        },\r\n        [updatedProperty],\r\n    );\r\n\r\n    const handleManageLandlords = () => {\r\n\r\n        navigationState({ ...navigationState(), showManageLandlordsPanel: true })\r\n\r\n    }\r\n\r\n    const [selectedKey, setSelectedKey] = React.useState('Property Details');\r\n\r\n    const handleLinkClick = (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => {\r\n\r\n        setSelectedKey(item!.props.itemKey!);\r\n    };\r\n\r\n    const getTabId = (itemKey: string | undefined) => {\r\n        return `NewPropertyPivot_${itemKey}`;\r\n    };\r\n\r\n    const titleId = useId('New Property');\r\n\r\n\r\n    const newPropertyTab = () => {\r\n\r\n        switch (selectedKey) {\r\n            case \"Property Details\":\r\n                return (\r\n                    <>\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"0\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n\r\n\r\n                            <TextField\r\n                                label=\"Property Name\"\r\n                                value={updatedProperty.propertyName}\r\n                                onChange={onChangePropertyName}\r\n                                styles={textFieldPropertyNameStyles}\r\n\r\n                            />\r\n\r\n                            <Dropdown\r\n                                label=\"Buidling Type\"\r\n                                selectedKey={selectedItem ? selectedItem.key : undefined}\r\n                                // eslint-disable-next-line react/jsx-no-bind\r\n                                onChange={onChangeBuildingType}\r\n                                placeholder=\"Select type\"\r\n                                options={buildingTypeOptions}\r\n                                styles={dropdownStyles}\r\n                            />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal>\r\n\r\n                            <TextField\r\n                                label=\"Address\"\r\n                                value={updatedProperty.address}\r\n                                onChange={onChangeAddress}\r\n                                styles={textFieldAddressStyles}\r\n                            />\r\n                            <TextField\r\n                                label=\"Coordinates\"\r\n                                value={updatedProperty.coordinates}\r\n                                onChange={onChangeCoordinates}\r\n                                styles={textFieldCoordinatesStyles}\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal>\r\n\r\n                            <ComboBox\r\n                                label=\"Suburb\"\r\n                                allowFreeform={true}\r\n                                autoComplete={\"on\"}\r\n                                options={suburbComboOptions}\r\n                                selectedKey={selectedSuburb}\r\n                                onChange={onChangePropertySuburb}\r\n                                styles={comboBoxStyles}\r\n                                text={updatedProperty.suburb}\r\n                            />\r\n\r\n                            <ComboBox\r\n                                label=\"Region\"\r\n                                allowFreeform={true}\r\n                                autoComplete={\"on\"}\r\n                                options={regionComboOptions}\r\n                                selectedKey={selectedRegion}\r\n                                onChange={onChangePropertyRegion}\r\n                                styles={comboBoxStyles}\r\n                                text={updatedProperty.region}\r\n                            />\r\n\r\n                            <Dropdown\r\n                                placeholder=\"Select Province\"\r\n                                label=\"Province\"\r\n                                selectedKey={selectedProvince ? selectedProvince.key : undefined}\r\n                                // eslint-disable-next-line react/jsx-no-bind\r\n                                onChange={onChangePropertyProvince}\r\n                                options={propertyProvinceOptions}\r\n                                styles={dropdownProvinceStyles}\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n\r\n                        <Stack horizontal>\r\n\r\n\r\n\r\n                            <TextField\r\n                                label=\"Erf Extent\"\r\n                                type=\"number\"\r\n                                value={String(updatedProperty.erfExtent)}\r\n                                onChange={onChangeErfExtent}\r\n                                styles={textFieldErfStyles}\r\n                                suffix=\"m²\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Total GLA\"\r\n                                type=\"number\"\r\n                                value={String(updatedProperty.totalGLA)}\r\n                                onChange={onChangeTotalGLA}\r\n                                styles={textFieldErfStyles}\r\n                                suffix=\"m²\"\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n\r\n\r\n\r\n                    </>\r\n                )\r\n\r\n            case \"Landlord Details\":\r\n\r\n                return (\r\n                    <>\r\n                        <Stack verticalFill>\r\n\r\n                            <Stack horizontal>\r\n\r\n                                <ComboBox\r\n                                    label=\"Landlord\"\r\n                                    allowFreeform={true}\r\n                                    autoComplete={\"on\"}\r\n                                    options={landlordComboOptions}\r\n                                    selectedKey={selectedLandlord.landlordId}\r\n                                    onChange={onChangeLandlord}\r\n                                    styles={comboBoxLandlordStyles}\r\n                                    text={selectedLandlord.landlordName}\r\n                                />\r\n\r\n                                <ComboBox\r\n                                    label=\"Contact\"\r\n                                    allowFreeform={true}\r\n                                    autoComplete={\"on\"}\r\n                                    options={contactComboOptions}\r\n                                    selectedKey={selectedContact !== undefined ? selectedContact.contactId : \"\"}\r\n                                    onChange={onChangeContact}\r\n                                    styles={comboBoxLandlordStyles}\r\n                                    text={selectedContact.contactName}\r\n                                />\r\n\r\n                            </Stack>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            <Stack horizontal>\r\n\r\n                                <Stack styles={{root: {width: \"70%\"}}} verticalFill>\r\n\r\n                                    <TextField\r\n                                        underlined\r\n                                        label=\"Email\"\r\n                                        value={selectedContact.contactData !== undefined ? selectedContact.contactData.email : \"\"}\r\n\r\n                                        styles={textFieldLandlordEmailStyles}\r\n\r\n                                    />\r\n\r\n                                    <TextField\r\n                                        underlined\r\n                                        label=\"Mobile No\"\r\n                                        value={selectedContact.contactData !== undefined ? selectedContact.contactData.mobileNo : \"\"}\r\n\r\n                                        styles={textFieldLandlordStyles}\r\n                                    />\r\n                                    <TextField\r\n                                        underlined\r\n                                        label=\"Office No\"\r\n                                        value={selectedContact.contactData !== undefined ? selectedContact.contactData.officeNo : \"\"}\r\n\r\n                                        styles={textFieldLandlordStyles}\r\n                                    />\r\n\r\n                                </Stack>\r\n\r\n\r\n                                <PrimaryButton onClick={handleManageLandlords} styles={buttonStyles}>\r\n                                    Manage Landlords\r\n                                </PrimaryButton>\r\n\r\n                            </Stack>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n            case \"Property Notes\":\r\n\r\n                return (\r\n                    <>\r\n                        <Stack horizontal>\r\n\r\n                            <TextField\r\n                                label=\"Notes\"\r\n                                value={updatedProperty.notes}\r\n                                onChange={onChangeNotes}\r\n                                styles={textFieldNotesStyles}\r\n                                multiline\r\n                                autoAdjustHeight\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n\r\n\r\n\r\n\r\n            default:\r\n            // code block\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <Modal\r\n                styles={modalStyles}\r\n\r\n                titleAriaId={titleId}\r\n                isOpen={showUpdatePropertyModal}\r\n                onDismiss={hideUpdatePropertyModal}\r\n               /*  isBlocking={true} */\r\n                containerClassName={contentStyles.container}\r\n            /* dragOptions={dragOptions} */\r\n            >\r\n                <div className={contentStyles.header}>\r\n                    <span id={titleId}>Update Property</span>\r\n                    <Stack horizontal\r\n                        styles={headerIconStackStyles}\r\n                    >\r\n\r\n                        <IconButton\r\n                            styles={iconButtonStyles}\r\n                            iconProps={saveIcon}\r\n                            ariaLabel=\"Save Investor\"\r\n                            onClick={saveUpdateProperty}\r\n                        />\r\n                        <IconButton\r\n                            styles={iconButtonStyles}\r\n                            iconProps={cancelIcon}\r\n                            ariaLabel=\"Close popup modal\"\r\n                            onClick={hideUpdatePropertyModal}\r\n                        />\r\n\r\n                    </Stack>\r\n\r\n                </div>\r\n                <div className={contentStyles.body} >\r\n\r\n                    <Stack style={{ width: 486 }} tokens={stackTokens}>\r\n\r\n                        <Pivot\r\n                            aria-label=\"Separately Rendered Content Pivot Example\"\r\n                            selectedKey={selectedKey}\r\n                            // eslint-disable-next-line react/jsx-no-bind\r\n                            onLinkClick={handleLinkClick}\r\n                            headersOnly={true}\r\n                            getTabId={getTabId}\r\n                        >\r\n                            <PivotItem headerText=\"Property Details\" itemKey=\"Property Details\" />\r\n                            <PivotItem headerText=\"Landlord Details\" itemKey=\"Landlord Details\" />\r\n                            <PivotItem headerText=\"Property Notes\" itemKey=\"Property Notes\" />\r\n\r\n                        </Pivot>\r\n\r\n                        {newPropertyTab()}\r\n\r\n\r\n\r\n\r\n\r\n                    </Stack>\r\n\r\n\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst theme = getTheme();\r\nconst contentStyles = mergeStyleSets({\r\n    container: {\r\n        display: 'flex',\r\n        flexFlow: 'column nowrap',\r\n        alignItems: 'stretch',\r\n        \r\n\r\n    },\r\n\r\n    header: [\r\n\r\n        theme.fonts.xLargePlus,\r\n        {\r\n            flex: '1 1 auto',\r\n            borderTop: `4px solid ${theme.palette.themePrimary}`,\r\n            color: theme.palette.neutralPrimary,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            fontWeight: FontWeights.semibold,\r\n            padding: '12px 12px 14px 24px',\r\n        },\r\n    ],\r\n    body: {\r\n        flex: '4 4 auto',\r\n        padding: '0 24px 24px 24px',\r\n        overflowY: 'hidden',\r\n        selectors: {\r\n            p: { margin: '14px 0' },\r\n            'p:first-child': { marginTop: 0 },\r\n            'p:last-child': { marginBottom: 0 },\r\n        },\r\n    },\r\n});\r\n\r\nconst iconButtonStyles = {\r\n    root: {\r\n        color: theme.palette.neutralPrimary,\r\n        marginLeft: \"10px !important\",\r\n        marginTop: '4px',\r\n        marginRight: '2px',\r\n\r\n    },\r\n    rootHovered: {\r\n        color: theme.palette.neutralDark,\r\n    },\r\n    icon: {\r\n        fontSize: \"24px\",\r\n\r\n    }\r\n};\r\n\r\nexport default UpdatePropertyModal\r\n","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\DuplicatePremisesModal.tsx",["531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564"],"import React, { useState } from 'react';\r\nimport { useId, useBoolean } from '@uifabric/react-hooks';\r\nimport { TextField, ITextFieldStyles } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Dropdown, DropdownMenuItemType, IDropdownOption, IDropdownStyles } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\r\nimport { IStackStyles, Stack } from 'office-ui-fabric-react/lib/Stack';\r\nimport { IRenderFunction, IStyleFunctionOrObject } from 'office-ui-fabric-react/lib/Utilities';\r\nimport {\r\n    getTheme,\r\n    mergeStyleSets,\r\n    FontWeights,\r\n    ContextualMenu,\r\n    Toggle,\r\n    IToggleStyles,\r\n    DefaultButton,\r\n    Modal,\r\n    IDragOptions,\r\n    IconButton,\r\n    IIconProps,\r\n    IModalStyles,\r\n    mergeStyles,\r\n    ComboBox,\r\n    Fabric,\r\n    IComboBoxOption,\r\n    IComboBox,\r\n    SelectableOptionMenuItemType,\r\n    IComboBoxStyles,\r\n    DatePicker,\r\n    DayOfWeek,\r\n    IDatePickerStrings,\r\n    IDatePickerStyleProps,\r\n    IDatePickerStyles,\r\n    ICalendarProps\r\n} from 'office-ui-fabric-react';\r\nimport { Pivot, PivotItem } from 'office-ui-fabric-react/lib/Pivot';\r\nimport { defaultDataIdFromObject, gql, useMutation, useQuery } from '@apollo/client';\r\nimport { GET_SINGLE_PROPERTY, NEW_PREMISES, GET_NAV_STATE } from \"../gql/gql\"\r\nimport { Mutation, MutationPostPremisesArgs, Query, Property, Premises } from \"../schematypes/schematypes\"\r\nimport { navigationState } from \"../reactivevariables/reactivevariables\"\r\nimport \"./NewPremisesModal.css\"\r\n\r\n\r\n\r\n\r\nconst dragOptions: IDragOptions = {\r\n    moveMenuItemText: 'Move',\r\n    closeMenuItemText: 'Close',\r\n    menu: ContextualMenu,\r\n};\r\nconst cancelIcon: IIconProps = { iconName: 'Cancel' };\r\nconst saveIcon: IIconProps = { iconName: 'Save' };\r\n\r\ninterface Props {\r\n    propertyId: number;\r\n    premisesId: number\r\n    showDuplicatePremisesModal: boolean;\r\n}\r\n\r\nexport const DuplicatePremisesModal: React.FC<Props> = ({ showDuplicatePremisesModal, propertyId, premisesId }) => {\r\n\r\n\r\n\r\n    const {\r\n        data: propertyData,\r\n        loading: propertyLoading,\r\n        error: propertyError\r\n    } = useQuery<Query>(GET_SINGLE_PROPERTY, {\r\n        variables: { propertyId: propertyId },\r\n    });\r\n\r\n\r\n    const getPremises = propertyData?.singleProperty?.premisesList!.find(premises => premises?.premisesId === premisesId);\r\n    const handlePremisesData = React.useCallback(() => {\r\n        if (getPremises !== undefined && getPremises !== null) {\r\n            return { ...getPremises, openRatio: getPremises.openBays! / (getPremises.area! / 100), coveredRatio: getPremises.coveredBays! / (getPremises.area! / 100), shadedRatio: getPremises.shadedBays! / (getPremises.area! / 100), }\r\n        } else {\r\n            return {\r\n                floor: \"\",\r\n                area: 0,\r\n                vacant: \"true\",\r\n                type: \"\",\r\n                premisesIndex: 0,\r\n                occupation: getNextMonth(),\r\n                premisesNotes: \"\",\r\n                netRental: 0,\r\n                opCosts: 0,\r\n                other: 0,\r\n                grossRental: 0,\r\n                esc: 0,\r\n                openBays: 0,\r\n                openRate: 0,\r\n                openRatio: 0,\r\n                coveredBays: 0,\r\n                coveredRate: 0,\r\n                coveredRatio: 0,\r\n                shadedBays: 0,\r\n                shadedRate: 0,\r\n                shadedRatio: 0,\r\n                parkingRatio: 0,\r\n                tenantName: \"-\",\r\n                leaseExpiry: getNextMonth(),\r\n                tenantNotes: \"\",\r\n                yard: 0,\r\n                height: 0,\r\n                doors: 0,\r\n                loading: \"\",\r\n                sprinklered: \"\",\r\n                canopies: \"\",\r\n                power: \"\",\r\n\r\n            }\r\n        }\r\n    }, [getPremises])\r\n\r\n\r\n    React.useEffect(() => {\r\n        setDuplicatedPremises(handlePremisesData)\r\n        setSelectedPremisesType({ key: handlePremisesData().type!, text: handlePremisesData().type! })\r\n        setSelectedPremisesIndex(({ key: handlePremisesData().premisesIndex!, text: String(handlePremisesData().premisesIndex!) }))\r\n\r\n    }, [handlePremisesData])\r\n\r\n\r\n\r\n\r\n    const hideDuplicatePremisesModal = () => {\r\n\r\n        navigationState({ ...navigationState(), showDuplicatePremisesModal: false })\r\n\r\n    }\r\n\r\n    const getNextMonth = () => {\r\n        const date = new Date();\r\n        const today = date.getDate();\r\n        const currentMonth = date.getMonth() + 1;\r\n        const currentYear = date.getFullYear();\r\n        var newDate = new Date(currentYear, currentMonth, 1);\r\n        return newDate.toISOString()\r\n\r\n    }\r\n\r\n\r\n    const [duplicatedPremises, setDuplicatedPremises] = React.useState<any>(\r\n        {\r\n            floor: \"\",\r\n            area: 0,\r\n            vacant: \"true\",\r\n            type: \"\",\r\n            premisesIndex: 0,\r\n            occupation: getNextMonth(),\r\n            premisesNotes: \"\",\r\n            netRental: 0,\r\n            opCosts: 0,\r\n            other: 0,\r\n            grossRental: 0,\r\n            esc: 0,\r\n            openBays: 0,\r\n            openRate: 0,\r\n            openRatio: 0,\r\n            coveredBays: 0,\r\n            coveredRate: 0,\r\n            coveredRatio: 0,\r\n            shadedBays: 0,\r\n            shadedRate: 0,\r\n            shadedRatio: 0,\r\n            parkingRatio: 0,\r\n            tenantName: \"-\",\r\n            leaseExpiry: getNextMonth(),\r\n            tenantNotes: \"\",\r\n            yard: 0,\r\n            height: 0,\r\n            doors: 0,\r\n            loading: \"\",\r\n            sprinklered: \"\",\r\n            canopies: \"\",\r\n            power: \"\",\r\n\r\n        });\r\n\r\n\r\n\r\n\r\n    const [postPremises, { data }] = useMutation<Mutation, MutationPostPremisesArgs>(NEW_PREMISES);\r\n\r\n    const saveDuplicatedPremises = () => {\r\n\r\n        postPremises({\r\n            variables: {\r\n                propertyId: propertyId,\r\n                floor: duplicatedPremises.floor,\r\n                area: duplicatedPremises.area,\r\n                vacant: duplicatedPremises.vacant,\r\n                type: duplicatedPremises.type,\r\n                premisesIndex: duplicatedPremises.premisesIndex,\r\n                occupation: duplicatedPremises.occupation,\r\n                premisesNotes: duplicatedPremises.premisesNotes,\r\n                netRental: duplicatedPremises.netRental,\r\n                opCosts: duplicatedPremises.opCosts,\r\n                other: duplicatedPremises.other,\r\n                grossRental: duplicatedPremises.grossRental,\r\n                esc: duplicatedPremises.esc,\r\n                openBays: duplicatedPremises.openBays,\r\n                openRate: duplicatedPremises.openRate,\r\n                coveredBays: duplicatedPremises.coveredBays,\r\n                coveredRate: duplicatedPremises.coveredRate,\r\n                shadedBays: duplicatedPremises.shadedBays,\r\n                shadedRate: duplicatedPremises.shadedRate,\r\n                parkingRatio: duplicatedPremises.parkingRatio,\r\n                tenantName: duplicatedPremises.tenantName,\r\n                leaseExpiry: duplicatedPremises.leaseExpiry,\r\n                tenantNotes: duplicatedPremises.tenantNotes,\r\n                yard: duplicatedPremises.yard,\r\n                height: duplicatedPremises.height,\r\n                doors: duplicatedPremises.doors,\r\n                loading: duplicatedPremises.loading,\r\n                sprinklered: duplicatedPremises.sprinklered,\r\n                canopies: duplicatedPremises.canopies,\r\n                power: duplicatedPremises.power,\r\n            },\r\n\r\n            update(cache, { data }) {\r\n\r\n                if (!data) {\r\n                    return null;\r\n                }\r\n\r\n                const getExistingProperty = cache.readQuery<Query>({ query: GET_SINGLE_PROPERTY, variables: { propertyId: propertyId } })\r\n                const existingProperty: Property = getExistingProperty ? getExistingProperty.singleProperty! : { propertyId: 1, propertyName: \"\" };\r\n\r\n                const existingPremises = getExistingProperty ? getExistingProperty.singleProperty?.premisesList : [];\r\n                const newPremises = [...existingPremises!, data.postPremises]\r\n\r\n                const newProperty = { ...existingProperty, premisesList: newPremises }\r\n                if (existingPremises)\r\n                    cache.writeQuery<Query>({\r\n                        query: GET_SINGLE_PROPERTY,\r\n                        variables: { propertyId: propertyId },\r\n                        data: { singleProperty: newProperty }\r\n                    });\r\n            }\r\n\r\n\r\n        })\r\n        hideDuplicatePremisesModal()\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /* const [isModalOpen, { setTrue: showModal, setFalse: hideModal }] = useBoolean(false);\r\n    const [isDraggable, { toggle: toggleIsDraggable }] = useBoolean(false); */\r\n\r\n    // Use useId() to ensure that the IDs are unique on the page.\r\n    // (It's also okay to use plain strings and manually ensure uniqueness.)\r\n\r\n\r\n    const textFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldFloorStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldAreaStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 150, marginRight: 20 } };\r\n    const textFieldEscStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 150, marginRight: 20 } };\r\n    const textFieldCoordinatesStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 150, marginRight: 20 } };\r\n    const textFieldErfStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldNotesStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 470 } };\r\n    const dropdownStyles: Partial<IDropdownStyles> = { dropdown: { width: 125, marginRight: 20 } };\r\n    const dropdownSectorStyles: Partial<IDropdownStyles> = { dropdown: { width: 420, marginRight: 20 } };\r\n    const dropdownProvinceStyles: Partial<IDropdownStyles> = { dropdown: { width: 140, marginRight: 20 } };\r\n    const comboBoxStyles: Partial<IComboBoxStyles> = { root: { width: 140, marginRight: 20 } }\r\n\r\n    const textFieldParkingBaysStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 100, marginRight: 20 } };\r\n    const textFieldParkingRateStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 185, marginRight: 20 } };\r\n    const textFieldParkingRatioStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 140, marginRight: 20 } };\r\n\r\n    const toggleStyles: Partial<IToggleStyles> = { container: { marginTop: 5 }, label: { marginLeft: 4 } };\r\n    const modalStyles: Partial<IModalStyles> = { main: { position: \"absolute\", top: 150 }, };\r\n\r\n    const datePickerStyles: IStyleFunctionOrObject<IDatePickerStyleProps, IDatePickerStyles> = { root: { width: 160, marginRight: 20 }, callout: {} }\r\n\r\n    /* const calendarProps: ICalendarProps ={styles  } */\r\n\r\n\r\n\r\n    const headerIconStackStyles: Partial<IStackStyles> = { root: { marginRight: 0, marginLeft: \"auto\", } }\r\n\r\n    const DayPickerStrings: IDatePickerStrings = {\r\n        months: [\r\n            'January',\r\n            'February',\r\n            'March',\r\n            'April',\r\n            'May',\r\n            'June',\r\n            'July',\r\n            'August',\r\n            'September',\r\n            'October',\r\n            'November',\r\n            'December',\r\n        ],\r\n\r\n        shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n\r\n        days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n\r\n        shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\r\n\r\n        goToToday: 'Go to today',\r\n        prevMonthAriaLabel: 'Go to previous month',\r\n        nextMonthAriaLabel: 'Go to next month',\r\n        prevYearAriaLabel: 'Go to previous year',\r\n        nextYearAriaLabel: 'Go to next year',\r\n        closeButtonAriaLabel: 'Close date picker',\r\n        monthPickerHeaderAriaLabel: '{0}, select to change the year',\r\n        yearPickerHeaderAriaLabel: '{0}, select to change the month',\r\n    };\r\n\r\n    const controlClass = mergeStyleSets({\r\n        control: {\r\n            margin: '0 0 15px 0',\r\n            maxWidth: '300px',\r\n        },\r\n\r\n    });\r\n\r\n    const premisesTypeOptions = [\r\n\r\n        { key: 'Office', text: 'Office' },\r\n        { key: 'Warehouse', text: 'Warehouse' },\r\n        { key: 'Retail', text: 'Retail' },\r\n        { key: 'Stores', text: 'Stores' },\r\n        { key: 'Balcony', text: 'Balcony' },\r\n    ];\r\n\r\n    const premisesIndexOptions = [\r\n\r\n        { key: 1, text: \"1\" },\r\n        { key: 2, text: \"2\" },\r\n        { key: 3, text: \"3\" },\r\n        { key: 4, text: \"4\" },\r\n        { key: 5, text: \"5\" },\r\n        { key: 6, text: \"6\" },\r\n    ];\r\n\r\n\r\n\r\n    const [selectedPremisesType, setSelectedPremisesType] = React.useState<IDropdownOption>();\r\n    const [selectedPremisesIndex, setSelectedPremisesIndex] = React.useState<IDropdownOption>();\r\n\r\n\r\n\r\n    const onChangePremisesType = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        if (item !== undefined) {\r\n            setSelectedPremisesType(item);\r\n            setDuplicatedPremises({ ...duplicatedPremises, type: item.text });\r\n        }\r\n    };\r\n\r\n    const onChangePremisesIndex = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        if (item !== undefined) {\r\n            setSelectedPremisesIndex(item);\r\n            setDuplicatedPremises({ ...duplicatedPremises, premisesIndex: parseInt(item.text) });\r\n        }\r\n    };\r\n\r\n\r\n    const stackTokens = { childrenGap: 15 };\r\n\r\n\r\n\r\n    const onChangeFloor = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, floor: newValue || '' });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeArea = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            console.log(newValue)\r\n            setDuplicatedPremises({ ...duplicatedPremises, area: parseFloat(newValue!) || 0 });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n\r\n    const handleChecked = () => {\r\n        if (duplicatedPremises.vacant === \"false\") {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n\r\n    }\r\n\r\n    const onChangeVacantToggle = React.useCallback(\r\n        (ev: React.MouseEvent<HTMLElement>, checked: boolean | undefined) => {\r\n            if (duplicatedPremises.vacant === \"false\") {\r\n                setDuplicatedPremises({ ...duplicatedPremises, vacant: \"true\" });\r\n\r\n            } else {\r\n                setDuplicatedPremises({ ...duplicatedPremises, vacant: \"false\" });\r\n            }\r\n        },\r\n        [duplicatedPremises])\r\n\r\n    const onSelectOccupationDate = React.useCallback(\r\n        (date: Date | null | undefined) => {\r\n            if (date !== undefined && date !== null)\r\n                setDuplicatedPremises({ ...duplicatedPremises, occupation: date.toISOString() });\r\n        },\r\n        [duplicatedPremises])\r\n\r\n    const onFormatDate = (date?: Date): string => {\r\n        return !date ? '' : date.toLocaleDateString(\r\n            'en-gb',\r\n            {\r\n                year: 'numeric',\r\n                month: 'long',\r\n                day: 'numeric'\r\n            }\r\n        );\r\n    };\r\n\r\n\r\n\r\n    const onChangePremisesNotes = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, premisesNotes: newValue || '' });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeNetRental = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, netRental: parseFloat(newValue!) || 0 });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeOpCosts = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, opCosts: parseFloat(newValue!) || 0 });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeOther = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, other: parseFloat(newValue!) || 0 });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeGrossRental = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, grossRental: parseFloat(newValue!) || 0 });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeEsc = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, esc: parseFloat(newValue!) || 0 });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const getOpenBays = (ratio: number) => {\r\n        return (ratio * (duplicatedPremises.area / 100))\r\n    }\r\n\r\n    const getOpenRatio = (bays: number) => {\r\n        return (bays / (duplicatedPremises.area / 100))\r\n    }\r\n\r\n    const getCoveredBays = (ratio: number) => {\r\n        return (ratio * (duplicatedPremises.area / 100))\r\n    }\r\n\r\n    const getCoveredRatio = (bays: number) => {\r\n        return (bays / (duplicatedPremises.area / 100))\r\n    }\r\n\r\n    const getShadedBays = (ratio: number) => {\r\n        return (ratio * (duplicatedPremises.area / 100))\r\n    }\r\n\r\n    const getShadedRatio = (bays: number) => {\r\n        return (bays / (duplicatedPremises.area / 100))\r\n    }\r\n\r\n    const onChangeOpenBays = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, openBays: parseFloat(newValue!) || 0, openRatio: getOpenRatio(parseFloat(newValue!)) });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeOpenRate = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, openRate: parseFloat(newValue!) || 0 });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n\r\n    const onChangeOpenRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, openRatio: parseFloat(newValue!) || 0, openBays: getOpenBays(parseFloat(newValue!)) });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeCoveredBays = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, coveredBays: parseFloat(newValue!) || 0, coveredRatio: getCoveredRatio(parseFloat(newValue!)) });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeCoveredRate = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, coveredRate: parseFloat(newValue!) || 0 });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeCoveredRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, coveredRatio: parseFloat(newValue!) || 0, coveredBays: getCoveredBays(parseFloat(newValue!)) });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeShadedBays = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, shadedBays: parseFloat(newValue!) || 0, shadedRatio: getShadedRatio(parseFloat(newValue!)) });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeShadedRate = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, shadedRate: parseFloat(newValue!) || 0 });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeShadedRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, shadedRatio: parseFloat(newValue!) || 0, shadedBays: getShadedBays(parseFloat(newValue!)) });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeParkingRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, parkingRatio: parseFloat(newValue!) || 0 });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onChangeTenantName = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, tenantName: newValue || '' });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n    const onSelectLeaseExpiry = React.useCallback(\r\n        (date: Date | null | undefined) => {\r\n            if (date !== undefined && date !== null)\r\n                setDuplicatedPremises({ ...duplicatedPremises, leaseExpiry: date.toISOString() });\r\n        },\r\n        [duplicatedPremises])\r\n\r\n    const onChangeTenantNotes = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setDuplicatedPremises({ ...duplicatedPremises, tenantNotes: newValue || '' });\r\n        },\r\n        [duplicatedPremises],\r\n    );\r\n\r\n\r\n\r\n\r\n    /* const onChangeCoordinates = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, coordinates: newValue || '' });\r\n        },\r\n        [newProperty],\r\n    );\r\n    const onChangeErfExtent = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, erfExtent: parseInt(newValue!) || 0 });\r\n        },\r\n        [newProperty],\r\n    );\r\n    const onChangeTotalGLA = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, totalGLA: parseInt(newValue!) || 0 });\r\n        },\r\n        [newProperty],\r\n    );\r\n    const onChangeNotes = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, notes: newValue || '' });\r\n        },\r\n        [newProperty],\r\n    ); */\r\n\r\n    const [selectedKey, setSelectedKey] = React.useState('Premises Details');\r\n\r\n    const handleLinkClick = (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => {\r\n\r\n        setSelectedKey(item!.props.itemKey!);\r\n    };\r\n\r\n    const getTabId = (itemKey: string | undefined) => {\r\n        return `NewPremisesPivot_${itemKey}`;\r\n    };\r\n\r\n    const titleId = useId('title');\r\n\r\n\r\n\r\n    const DuplicatePremisesTab = () => {\r\n\r\n        switch (selectedKey) {\r\n            case \"Premises Details\":\r\n                return (\r\n                    <>\r\n                        <Stack horizontal /* style={{marginLeft: 50}} */\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"0px\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Floor/Unit\"\r\n                                value={duplicatedPremises.floor}\r\n                                onChange={onChangeFloor}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                            />\r\n                            <TextField\r\n                                label=\"Area\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.area === 0 ? \"\" : String(duplicatedPremises.area)}\r\n                                onChange={onChangeArea}\r\n                                styles={textFieldAreaStyles}\r\n                                suffix=\"m²\"\r\n                            />\r\n\r\n                            <Toggle styles={toggleStyles} label=\"Vacant?\" checked={handleChecked()} onChange={onChangeVacantToggle} />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                /* width: '400px', */\r\n                                /*  margin: '10px', */\r\n\r\n                                color: '#605e5c',\r\n\r\n                                marginLeft: \"0px\",\r\n                                marginRight: \"auto\",\r\n                                /* display: \"block\" */\r\n\r\n                            }\r\n\r\n                        }}>\r\n\r\n                            <Dropdown\r\n                                label=\"Premises Type\"\r\n                                selectedKey={selectedPremisesType ? selectedPremisesType.key : undefined}\r\n                                // eslint-disable-next-line react/jsx-no-bind\r\n                                onChange={onChangePremisesType}\r\n                                placeholder=\"Select type\"\r\n                                options={premisesTypeOptions}\r\n                                styles={dropdownStyles}\r\n                            />\r\n\r\n                            <Dropdown\r\n                                label=\"Premises Index\"\r\n                                selectedKey={selectedPremisesIndex ? selectedPremisesIndex.key : undefined}\r\n                                // eslint-disable-next-line react/jsx-no-bind\r\n                                onChange={onChangePremisesIndex}\r\n                                placeholder=\"Select index\"\r\n                                options={premisesIndexOptions}\r\n                                styles={dropdownStyles}\r\n                            />\r\n\r\n                            <DatePicker\r\n                                label=\"Occupation Date\"\r\n                                className={controlClass.control}\r\n                                firstDayOfWeek={DayOfWeek.Monday}\r\n                                strings={DayPickerStrings}\r\n                                placeholder=\"Select a date...\"\r\n                                ariaLabel=\"Select a date\"\r\n                                value={new Date(duplicatedPremises.occupation)}\r\n                                onSelectDate={onSelectOccupationDate}\r\n                                formatDate={onFormatDate}\r\n                                styles={datePickerStyles}\r\n\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal>\r\n\r\n                            <TextField\r\n                                label=\"Premises Notes\"\r\n                                value={duplicatedPremises.premisesNotes}\r\n                                onChange={onChangePremisesNotes}\r\n                                styles={textFieldNotesStyles}\r\n                                multiline\r\n                                autoAdjustHeight\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n            case \"Rental Details\":\r\n\r\n                return (\r\n                    <>\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Net Rental\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.netRental === 0 ? \"\" : String(duplicatedPremises.netRental)}\r\n                                onChange={onChangeNetRental}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Op Costs\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.opCosts === 0 ? \"\" : String(duplicatedPremises.opCosts)}\r\n                                onChange={onChangeOpCosts}\r\n                                styles={textFieldFloorStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Other\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.other === 0 ? \"\" : String(duplicatedPremises.other)}\r\n                                onChange={onChangeOther}\r\n                                styles={textFieldFloorStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Gross Rental\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.grossRental === 0 ? \"\" : String(duplicatedPremises.grossRental)}\r\n                                onChange={onChangeGrossRental}\r\n                                styles={textFieldFloorStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n\r\n\r\n                            <TextField\r\n                                label=\"Esc\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.esc === 0 ? \"\" : String(duplicatedPremises.esc)}\r\n                                onChange={onChangeEsc}\r\n                                styles={textFieldEscStyles}\r\n                                suffix=\"% per annum\"\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n            case \"Parking Details\":\r\n\r\n                return (\r\n                    <>\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Open Bays\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.openBays === 0 ? \"\" : String(duplicatedPremises.openBays)}\r\n                                onChange={onChangeOpenBays}\r\n                                styles={textFieldParkingBaysStyles}\r\n                                suffix=\"bays\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Open Rate\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.openRate === 0 ? \"\" : String(duplicatedPremises.openRate)}\r\n                                onChange={onChangeOpenRate}\r\n                                styles={textFieldParkingRateStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/bay/month\"\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Open Ratio\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.openRatio === 0 ? \"\" : String(duplicatedPremises.openRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeOpenRatio}\r\n                                styles={textFieldParkingRatioStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Covered Bays\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.coveredBays === 0 ? \"\" : String(duplicatedPremises.coveredBays)}\r\n                                onChange={onChangeCoveredBays}\r\n                                styles={textFieldParkingBaysStyles}\r\n                                suffix=\"bays\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Covered Rate\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.coveredRate === 0 ? \"\" : String(duplicatedPremises.coveredRate)}\r\n                                onChange={onChangeCoveredRate}\r\n                                styles={textFieldParkingRateStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/bay/month\"\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Covered Ratio\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.coveredRatio === 0 ? \"\" : String(duplicatedPremises.coveredRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeCoveredRatio}\r\n                                styles={textFieldParkingRatioStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n\r\n\r\n                            <TextField\r\n                                label=\"Shaded Bays\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.shadedBays === 0 ? \"\" : String(duplicatedPremises.shadedBays)}\r\n                                onChange={onChangeShadedBays}\r\n                                styles={textFieldParkingBaysStyles}\r\n                                suffix=\"bays\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Shaded Rate\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.shadedRate === 0 ? \"\" : String(duplicatedPremises.shadedRate)}\r\n                                onChange={onChangeShadedRate}\r\n                                styles={textFieldParkingRateStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/bay/month\"\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Shaded Ratio\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.shadedRatio === 0 ? \"\" : String(duplicatedPremises.shadedRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeShadedRatio}\r\n                                styles={textFieldParkingRatioStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n                        </Stack>\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n\r\n\r\n                            <TextField\r\n                                label=\"Parking Ratio\"\r\n                                type=\"number\"\r\n                                value={duplicatedPremises.parkingRatio === 0 ? \"\" : String(duplicatedPremises.parkingRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeParkingRatio}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n\r\n            case \"Tenant Details\":\r\n\r\n                return (\r\n                    <>\r\n\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                /* width: '400px', */\r\n                                /*  margin: '10px', */\r\n\r\n                                color: '#605e5c',\r\n\r\n                                marginLeft: \"0px\",\r\n                                marginRight: \"auto\",\r\n                                /* display: \"block\" */\r\n\r\n                            }\r\n\r\n                        }}>\r\n\r\n                            <TextField\r\n                                label=\"Tenant Name\"\r\n                                value={duplicatedPremises.tenantName === \"-\" ? \"\" : duplicatedPremises.tenantName}\r\n                                onChange={onChangeTenantName}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                            />\r\n\r\n                            <DatePicker\r\n                                label=\"Lease Expiry Date\"\r\n                                className={controlClass.control}\r\n                                firstDayOfWeek={DayOfWeek.Monday}\r\n                                strings={DayPickerStrings}\r\n                                placeholder=\"Select a date...\"\r\n                                ariaLabel=\"Select a date\"\r\n                                value={new Date(duplicatedPremises.leaseExpiry)}\r\n                                onSelectDate={onSelectLeaseExpiry}\r\n                                formatDate={onFormatDate}\r\n                                styles={datePickerStyles}\r\n\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal>\r\n\r\n                            <TextField\r\n                                label=\"Tenant Notes\"\r\n                                value={duplicatedPremises.tenantNotes}\r\n                                onChange={onChangeTenantNotes}\r\n                                styles={textFieldNotesStyles}\r\n                                multiline\r\n                                autoAdjustHeight\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n\r\n            default:\r\n            // code block\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <Modal\r\n                styles={modalStyles}\r\n\r\n                titleAriaId={titleId}\r\n                isOpen={showDuplicatePremisesModal}\r\n                /*  onDismiss={hideDuplicatePremisesModal} */\r\n                isBlocking={false}\r\n                containerClassName={contentStyles.container}\r\n            /* dragOptions={dragOptions} */\r\n            >\r\n                <div className={contentStyles.header}>\r\n                    <span id={titleId}>New Premises</span>\r\n                    <Stack horizontal\r\n                        styles={headerIconStackStyles}\r\n                    >\r\n\r\n                        <IconButton\r\n                            styles={iconButtonStyles}\r\n                            iconProps={saveIcon}\r\n                            ariaLabel=\"Save Premises\"\r\n                            onClick={saveDuplicatedPremises}\r\n                        />\r\n                        <IconButton\r\n                            styles={iconButtonStyles}\r\n                            iconProps={cancelIcon}\r\n                            ariaLabel=\"Close popup modal\"\r\n                            onClick={hideDuplicatePremisesModal}\r\n                        />\r\n\r\n                    </Stack>\r\n\r\n                </div>\r\n                <div className={contentStyles.body} >\r\n\r\n                    <Stack tokens={stackTokens}>\r\n\r\n                        <Pivot\r\n                            aria-label=\"Separately Rendered Content Pivot Example\"\r\n                            selectedKey={selectedKey}\r\n                            // eslint-disable-next-line react/jsx-no-bind\r\n                            onLinkClick={handleLinkClick}\r\n                            headersOnly={true}\r\n                            getTabId={getTabId}\r\n                        >\r\n                            <PivotItem headerText=\"Premises Details\" itemKey=\"Premises Details\" />\r\n                            <PivotItem headerText=\"Rental Details\" itemKey=\"Rental Details\" />\r\n                            <PivotItem headerText=\"Parking Details\" itemKey=\"Parking Details\" />\r\n                            <PivotItem headerText=\"Tenant Details\" itemKey=\"Tenant Details\" />\r\n                        </Pivot>\r\n\r\n                        {DuplicatePremisesTab()}\r\n\r\n\r\n\r\n\r\n\r\n                    </Stack>\r\n\r\n\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst theme = getTheme();\r\nconst contentStyles = mergeStyleSets({\r\n    container: {\r\n        display: 'flex',\r\n        flexFlow: 'column nowrap',\r\n        alignItems: 'stretch',\r\n        /*  width: 525, */\r\n\r\n    },\r\n\r\n    header: [\r\n\r\n        theme.fonts.xLargePlus,\r\n        {\r\n            flex: '1 1 auto',\r\n            borderTop: `4px solid ${theme.palette.themePrimary}`,\r\n            color: theme.palette.neutralPrimary,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            fontWeight: FontWeights.semibold,\r\n            padding: '12px 12px 14px 24px',\r\n        },\r\n    ],\r\n    body: {\r\n        flex: '4 4 auto',\r\n        padding: '0 24px 24px 24px',\r\n        overflowY: 'hidden',\r\n        selectors: {\r\n            p: { margin: '14px 0' },\r\n            'p:first-child': { marginTop: 0 },\r\n            'p:last-child': { marginBottom: 0 },\r\n        },\r\n    },\r\n});\r\n\r\nconst iconButtonStyles = {\r\n    root: {\r\n        color: theme.palette.neutralPrimary,\r\n        marginLeft: \"10px !important\",\r\n        marginTop: '4px',\r\n        marginRight: '2px',\r\n\r\n    },\r\n    rootHovered: {\r\n        color: theme.palette.neutralDark,\r\n    },\r\n    icon: {\r\n        fontSize: \"24px\",\r\n\r\n    }\r\n};\r\n\r\nexport default DuplicatePremisesModal\r\n","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PremisesNotesModal.tsx",["565","566","567","568","569","570","571","572","573","574","575","576","577"],"import * as React from 'react';\r\nimport { useId, useBoolean } from '@uifabric/react-hooks';\r\nimport {\r\n    getTheme,\r\n    mergeStyleSets,\r\n    FontWeights,\r\n    ContextualMenu,\r\n    Toggle,\r\n    DefaultButton,\r\n    Modal,\r\n    IModalStyles,\r\n    IDragOptions,\r\n    IconButton,\r\n    IIconProps,\r\n    ILayerProps,\r\n    IModalProps,\r\n    Stack,\r\n    Text,\r\n    IStackStyles\r\n} from 'office-ui-fabric-react';\r\n\r\nimport { GET_SINGLE_PROPERTY, } from \"../gql/gql\"\r\nimport { Query, NavigationState } from \"../schematypes/schematypes\"\r\nimport { useQuery, } from '@apollo/client';\r\nimport { navigationState as navigationStateVar } from \"../reactivevariables/reactivevariables\"\r\n\r\n\r\n\r\n\r\n\r\ntype Maybe<T> = T | null;\r\nconst cancelIcon: IIconProps = { iconName: 'Cancel' };\r\n\r\ninterface Props {\r\n    propertyId: number\r\n    premisesId: number\r\n    showPremisesNotesModal: boolean;\r\n    /* imagesArray: Maybe<string>[] */\r\n}\r\n\r\nconst PremisesNotesModal: React.FC<Props> = ({ showPremisesNotesModal, propertyId, premisesId }) => {\r\n\r\n\r\n\r\n    const {\r\n        data: propertyData,\r\n        loading: propertyLoading,\r\n        error: propertyError\r\n    } = useQuery<Query>(GET_SINGLE_PROPERTY, {\r\n        variables: { propertyId: propertyId },\r\n    });\r\n\r\n    const getPremises = propertyData?.singleProperty?.premisesList!.find(premises => premises?.premisesId === premisesId);\r\n\r\n\r\n    /* const {\r\n      data: navigationStateData,\r\n      loading: navigationLoading,\r\n      error: navigationError\r\n    } = useQuery<Query>(GET_NAV_STATE);\r\n  \r\n    \r\n  const navStateQuery =() => {\r\n      const {\r\n          data: navigationStateData,\r\n          loading: navigationLoading,\r\n          error: navigationError\r\n        } = useQuery<Query>(GET_NAV_STATE);\r\n  \r\n  } */\r\n\r\n\r\n    /* console.log(navigationStateData?.navigationState) */\r\n\r\n    const hidePremisesNotesModal = () => {\r\n        navigationStateVar({ ...navigationStateVar(), showPremisesNotesModal: false })\r\n    }\r\n\r\n    \r\n\r\n    const modalStyles: Partial<IModalStyles> = { main: { position: \"absolute\", top: 150 }, };\r\n\r\n    const boldStyle = { root: { fontWeight: FontWeights.semibold } };\r\n    const notesHeadingStyles = { alignSelf: \"start\", fontSize: \"18px\", paddingLeft: \"15px\" }\r\n    const notesStyles = { alignSelf: \"start\", fontSize: \"14px\", paddingLeft: \"15px\", marginLeft:20 }\r\n\r\n    const featuresStyles = { alignSelf: \"start\", fontSize: \"14px\", paddingLeft: \"15px\" }\r\n    const featuresHeadingStyles = { alignSelf: \"start\", fontSize: \"14px\", paddingLeft: \"15px\" }\r\n\r\n    /* const onLayerDidMount: ILayerProps ={\r\n        onLayerDidMount: true\r\n    } */\r\n\r\n    // Use useId() to ensure that the IDs are unique on the page.\r\n    // (It's also okay to use plain strings and manually ensure uniqueness.)\r\n    const titleId = useId('Notes&Features');\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Modal\r\n                titleAriaId={titleId}\r\n                isOpen={showPremisesNotesModal}\r\n                /* onDismiss={hideImageGalleryModal} */\r\n                isBlocking={true}\r\n                containerClassName={contentStyles.container}\r\n                styles={modalStyles}\r\n            /* modalProps={modalProps} */\r\n            /*  layerProps={onLayerDidMount} */\r\n\r\n            >\r\n                <div className={contentStyles.header}>\r\n                    <span id={titleId}>{`Notes & Features`}</span>\r\n                    <IconButton\r\n                        styles={iconButtonStyles}\r\n                        iconProps={cancelIcon}\r\n                        ariaLabel={\"Close Notes & Features Modal\"}\r\n                        onClick={hidePremisesNotesModal}\r\n                    />\r\n                </div>\r\n                <div className={contentStyles.body}>\r\n\r\n                    <Stack verticalFill styles={{\r\n                        root: {\r\n                            marginTop: \"0 !important\",\r\n                            marginBottom: 20,\r\n                        },\r\n                    }}\r\n                        gap={15}>\r\n                        <Text styles={boldStyle} style={notesHeadingStyles}>Industrial Features:</Text>\r\n                        <Stack horizontal styles={{\r\n                        root: {\r\n                            marginLeft:20\r\n                        },\r\n                    }}>\r\n                            <Text styles={boldStyle} style={featuresHeadingStyles}>Yard Size:</Text>\r\n                            <Text /* styles={boldStyle} */ style={featuresStyles}>{`${getPremises?.yard} m²`}</Text>\r\n\r\n                            <Text styles={boldStyle} style={featuresHeadingStyles}>Floor to Eave Height:</Text>\r\n                            <Text /* styles={boldStyle} */ style={featuresStyles}>{`${getPremises?.height} m`}</Text>\r\n\r\n                            <Text styles={boldStyle} style={featuresHeadingStyles}>No of Doors:</Text>\r\n                            <Text /* styles={boldStyle} */ style={featuresStyles}>{`${getPremises?.doors}`}</Text>\r\n                        </Stack>\r\n\r\n                        <Stack horizontal styles={{\r\n                        root: {\r\n                            marginLeft:20\r\n                        },\r\n                    }}>\r\n                            <Text styles={boldStyle} style={featuresHeadingStyles}>Loading Type:</Text>\r\n                            <Text /* styles={boldStyle} */ style={featuresStyles}>{`${getPremises?.loading}`}</Text>\r\n\r\n                            <Text styles={boldStyle} style={featuresHeadingStyles}>Sprinkler Type:</Text>\r\n                            <Text /* styles={boldStyle} */ style={featuresStyles}>{`${getPremises?.sprinklered}`}</Text>\r\n\r\n                            \r\n                        </Stack>\r\n\r\n                        <Stack horizontal styles={{\r\n                        root: {\r\n                            marginLeft:20\r\n                        },\r\n                    }}>\r\n                            <Text styles={boldStyle} style={featuresHeadingStyles}>Canopy Details:</Text>\r\n                            <Text /* styles={boldStyle} */ style={featuresStyles}>{`${getPremises?.canopies}`}</Text>\r\n\r\n                            <Text styles={boldStyle} style={featuresHeadingStyles}>Power:</Text>\r\n                            <Text /* styles={boldStyle} */ style={featuresStyles}>{`${getPremises?.power}`}</Text>\r\n\r\n                            \r\n                        </Stack>\r\n\r\n\r\n\r\n                    </Stack>\r\n\r\n                    <Stack verticalFill styles={{\r\n                        root: {\r\n                            marginTop: \"0 !important\",\r\n                            marginBottom: 20,\r\n                        },\r\n                    }}\r\n                        gap={15}>\r\n                        <Text styles={boldStyle} style={notesHeadingStyles}>Premises Notes:</Text>\r\n                        <Text /* styles={boldStyle} */ style={notesStyles}>{getPremises?.premisesNotes}</Text>\r\n\r\n\r\n                    </Stack>\r\n\r\n                    <Stack verticalFill styles={{\r\n                        root: {\r\n                            marginTop: \"0 !important\"\r\n                        },\r\n                    }}\r\n                        gap={15}>\r\n                        <Text styles={boldStyle} style={notesHeadingStyles}>Tenant Notes:</Text>\r\n                        <Text /* styles={boldStyle} */ style={notesStyles}>{getPremises?.tenantNotes}</Text>\r\n\r\n\r\n                    </Stack>\r\n\r\n\r\n\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst theme = getTheme();\r\nconst contentStyles = mergeStyleSets({\r\n    container: {\r\n        display: 'flex',\r\n        flexFlow: 'column nowrap',\r\n        alignItems: 'stretch',\r\n        width: 550\r\n    },\r\n    header: [\r\n\r\n        theme.fonts.xLargePlus,\r\n        {\r\n            flex: '1 1 auto',\r\n            borderTop: `4px solid ${theme.palette.themePrimary}`,\r\n            color: theme.palette.neutralPrimary,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            fontWeight: FontWeights.semibold,\r\n            padding: '12px 12px 14px 24px',\r\n        },\r\n    ],\r\n    body: {\r\n        flex: '4 4 auto',\r\n        padding: '0 24px 24px 24px',\r\n        overflowY: 'hidden',\r\n        selectors: {\r\n            p: { margin: '14px 0' },\r\n            'p:first-child': { marginTop: 0 },\r\n            'p:last-child': { marginBottom: 0 },\r\n        },\r\n    },\r\n});\r\nconst toggleStyles = { root: { marginBottom: '20px' } };\r\nconst iconButtonStyles = {\r\n    root: {\r\n        color: theme.palette.neutralPrimary,\r\n        marginLeft: 'auto',\r\n        marginTop: '4px',\r\n        marginRight: '2px',\r\n    },\r\n    rootHovered: {\r\n        color: theme.palette.neutralDark,\r\n    },\r\n};\r\n\r\nexport default PremisesNotesModal","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\UpdatePremisesModal.tsx",["578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611"],"import React, { useState } from 'react';\r\nimport { useId, useBoolean } from '@uifabric/react-hooks';\r\nimport { TextField, ITextFieldStyles } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Dropdown, DropdownMenuItemType, IDropdownOption, IDropdownStyles } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\r\nimport { IStackStyles, Stack } from 'office-ui-fabric-react/lib/Stack';\r\nimport { IRenderFunction, IStyleFunctionOrObject } from 'office-ui-fabric-react/lib/Utilities';\r\nimport {\r\n    getTheme,\r\n    mergeStyleSets,\r\n    FontWeights,\r\n    ContextualMenu,\r\n    Toggle,\r\n    IToggleStyles,\r\n    DefaultButton,\r\n    Modal,\r\n    IDragOptions,\r\n    IconButton,\r\n    IIconProps,\r\n    IModalStyles,\r\n    mergeStyles,\r\n    ComboBox,\r\n    Fabric,\r\n    IComboBoxOption,\r\n    IComboBox,\r\n    SelectableOptionMenuItemType,\r\n    IComboBoxStyles,\r\n    DatePicker,\r\n    DayOfWeek,\r\n    IDatePickerStrings,\r\n    IDatePickerStyleProps,\r\n    IDatePickerStyles,\r\n    ICalendarProps\r\n} from 'office-ui-fabric-react';\r\nimport { Pivot, PivotItem } from 'office-ui-fabric-react/lib/Pivot';\r\nimport { defaultDataIdFromObject, gql, useMutation, useQuery } from '@apollo/client';\r\nimport { GET_SINGLE_PROPERTY, UPDATE_PREMISES, GET_NAV_STATE } from \"../gql/gql\"\r\nimport { Mutation, MutationUpdatePremisesArgs, Query, Property, Premises } from \"../schematypes/schematypes\"\r\nimport { navigationState } from \"../reactivevariables/reactivevariables\"\r\nimport \"./NewPremisesModal.css\"\r\n\r\n\r\n\r\n\r\nconst dragOptions: IDragOptions = {\r\n    moveMenuItemText: 'Move',\r\n    closeMenuItemText: 'Close',\r\n    menu: ContextualMenu,\r\n};\r\nconst cancelIcon: IIconProps = { iconName: 'Cancel' };\r\nconst saveIcon: IIconProps = { iconName: 'Save' };\r\n\r\ninterface Props {\r\n    propertyId: number;\r\n    premisesId: number\r\n    showUpdatePremisesModal: boolean;\r\n}\r\n\r\nexport const UpdatePremisesModal: React.FC<Props> = ({ showUpdatePremisesModal, propertyId, premisesId }) => {\r\n\r\n\r\n\r\n    const {\r\n        data: propertyData,\r\n        loading: propertyLoading,\r\n        error: propertyError\r\n    } = useQuery<Query>(GET_SINGLE_PROPERTY, {\r\n        variables: { propertyId: propertyId },\r\n    });\r\n\r\n\r\n    const getPremises = propertyData?.singleProperty?.premisesList!.find(premises => premises?.premisesId === premisesId);\r\n    const handlePremisesData = React.useCallback(() => {\r\n        if (getPremises !== undefined && getPremises !== null) {\r\n            return { ...getPremises, openRatio: getPremises.openBays! / (getPremises.area! / 100), coveredRatio: getPremises.coveredBays! / (getPremises.area! / 100), shadedRatio: getPremises.shadedBays! / (getPremises.area! / 100), }\r\n        } else {\r\n            return {\r\n                floor: \"\",\r\n                area: 0,\r\n                vacant: \"true\",\r\n                type: \"\",\r\n                premisesIndex: 0,\r\n                occupation: getNextMonth(),\r\n                premisesNotes: \"\",\r\n                netRental: 0,\r\n                opCosts: 0,\r\n                other: 0,\r\n                grossRental: 0,\r\n                esc: 0,\r\n                openBays: 0,\r\n                openRate: 0,\r\n                openRatio: 0,\r\n                coveredBays: 0,\r\n                coveredRate: 0,\r\n                coveredRatio: 0,\r\n                shadedBays: 0,\r\n                shadedRate: 0,\r\n                shadedRatio: 0,\r\n                parkingRatio: 0,\r\n                tenantName: \"-\",\r\n                leaseExpiry: getNextMonth(),\r\n                tenantNotes: \"\",\r\n                yard: 0,\r\n                height: 0,\r\n                doors: 0,\r\n                loading: \"\",\r\n                sprinklered: \"\",\r\n                canopies: \"\",\r\n                power: \"\",\r\n\r\n            }\r\n        }\r\n    }, [getPremises])\r\n\r\n\r\n    React.useEffect(() => {\r\n        setUpdatedPremises(handlePremisesData)\r\n        setSelectedPremisesType({ key: handlePremisesData().type!, text: handlePremisesData().type! })\r\n        setSelectedPremisesIndex(({ key: handlePremisesData().premisesIndex!, text: String(handlePremisesData().premisesIndex!) }))\r\n\r\n    }, [handlePremisesData])\r\n\r\n\r\n\r\n\r\n    const hideUpdatePremisesModal = () => {\r\n\r\n        navigationState({ ...navigationState(), showUpdatePremisesModal: false })\r\n\r\n    }\r\n\r\n    const getNextMonth = () => {\r\n        const date = new Date();\r\n        const today = date.getDate();\r\n        const currentMonth = date.getMonth() + 1;\r\n        const currentYear = date.getFullYear();\r\n        var newDate = new Date(currentYear, currentMonth, 1);\r\n        return newDate.toISOString()\r\n\r\n    }\r\n\r\n\r\n    const [updatedPremises, setUpdatedPremises] = React.useState<any>(\r\n        {\r\n            floor: \"\",\r\n            area: 0,\r\n            vacant: \"true\",\r\n            type: \"\",\r\n            premisesIndex: 0,\r\n            occupation: getNextMonth(),\r\n            premisesNotes: \"\",\r\n            netRental: 0,\r\n            opCosts: 0,\r\n            other: 0,\r\n            grossRental: 0,\r\n            esc: 0,\r\n            openBays: 0,\r\n            openRate: 0,\r\n            openRatio: 0,\r\n            coveredBays: 0,\r\n            coveredRate: 0,\r\n            coveredRatio: 0,\r\n            shadedBays: 0,\r\n            shadedRate: 0,\r\n            shadedRatio: 0,\r\n            parkingRatio: 0,\r\n            tenantName: \"-\",\r\n            leaseExpiry: getNextMonth(),\r\n            tenantNotes: \"\",\r\n            yard: 0,\r\n            height: 0,\r\n            doors: 0,\r\n            loading: \"\",\r\n            sprinklered: \"\",\r\n            canopies: \"\",\r\n            power: \"\",\r\n\r\n        });\r\n\r\n\r\n\r\n\r\n    const [updatePremises, { data }] = useMutation<Mutation, MutationUpdatePremisesArgs>(UPDATE_PREMISES);\r\n\r\n    const saveUpdatedPremises = () => {\r\n\r\n        updatePremises({\r\n            variables: {\r\n                premisesId: premisesId,\r\n                floor: updatedPremises.floor,\r\n                area: updatedPremises.area,\r\n                vacant: updatedPremises.vacant,\r\n                type: updatedPremises.type,\r\n                premisesIndex: updatedPremises.premisesIndex,\r\n                occupation: updatedPremises.occupation,\r\n                premisesNotes: updatedPremises.premisesNotes,\r\n                netRental: updatedPremises.netRental,\r\n                opCosts: updatedPremises.opCosts,\r\n                other: updatedPremises.other,\r\n                grossRental: updatedPremises.grossRental,\r\n                esc: updatedPremises.esc,\r\n                openBays: updatedPremises.openBays,\r\n                openRate: updatedPremises.openRate,\r\n                coveredBays: updatedPremises.coveredBays,\r\n                coveredRate: updatedPremises.coveredRate,\r\n                shadedBays: updatedPremises.shadedBays,\r\n                shadedRate: updatedPremises.shadedRate,\r\n                parkingRatio: updatedPremises.parkingRatio,\r\n                tenantName: updatedPremises.tenantName,\r\n                leaseExpiry: updatedPremises.leaseExpiry,\r\n                tenantNotes: updatedPremises.tenantNotes,\r\n                yard: updatedPremises.yard,\r\n                height: updatedPremises.height,\r\n                doors: updatedPremises.doors,\r\n                loading: updatedPremises.loading,\r\n                sprinklered: updatedPremises.sprinklered,\r\n                canopies: updatedPremises.canopies,\r\n                power: updatedPremises.power,\r\n            },\r\n\r\n            update(cache, { data }) {\r\n\r\n                if (!data) {\r\n                    return null;\r\n                }\r\n\r\n                const getExistingProperty = cache.readQuery<Query>({ query: GET_SINGLE_PROPERTY, variables: { propertyId: propertyId } })\r\n                const existingProperty: Property = getExistingProperty ? getExistingProperty.singleProperty! : { propertyId: 1, propertyName: \"\" };\r\n\r\n                const existingPremises = getExistingProperty ? getExistingProperty.singleProperty?.premisesList : [];\r\n                const filteredPremises = existingPremises?.filter(premises => {\r\n                    return premises.premisesId !== premisesId\r\n                })\r\n\r\n                const updatedPremises = data.updatePremises\r\n\r\n                const newPremisesList = [...filteredPremises!, updatedPremises]\r\n\r\n                const newProperty = { ...existingProperty, premisesList: newPremisesList }\r\n                if (existingPremises)\r\n                    cache.writeQuery<Query>({\r\n                        query: GET_SINGLE_PROPERTY,\r\n                        variables: { propertyId: propertyId },\r\n                        data: { singleProperty: newProperty }\r\n                    });\r\n            }\r\n\r\n\r\n        })\r\n        hideUpdatePremisesModal()\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /* const [isModalOpen, { setTrue: showModal, setFalse: hideModal }] = useBoolean(false);\r\n    const [isDraggable, { toggle: toggleIsDraggable }] = useBoolean(false); */\r\n\r\n    // Use useId() to ensure that the IDs are unique on the page.\r\n    // (It's also okay to use plain strings and manually ensure uniqueness.)\r\n\r\n\r\n    const textFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldFloorStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldAreaStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 150, marginRight: 20 } };\r\n    const textFieldYardStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 125, marginRight: 20 } };\r\n    const textFieldPowerStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldEscStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 150, marginRight: 20 } };\r\n    const textFieldCoordinatesStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 150, marginRight: 20 } };\r\n    const textFieldErfStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldNotesStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 470 } };\r\n    const dropdownStyles: Partial<IDropdownStyles> = { dropdown: { width: 125, marginRight: 20 } };\r\n    const dropdownSectorStyles: Partial<IDropdownStyles> = { dropdown: { width: 420, marginRight: 20 } };\r\n    const dropdownProvinceStyles: Partial<IDropdownStyles> = { dropdown: { width: 140, marginRight: 20 } };\r\n    const comboBoxStyles: Partial<IComboBoxStyles> = { root: { width: 140, marginRight: 20 } }\r\n\r\n    const textFieldParkingBaysStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 100, marginRight: 20 } };\r\n    const textFieldParkingRateStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 185, marginRight: 20 } };\r\n    const textFieldParkingRatioStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 140, marginRight: 20 } };\r\n\r\n    const toggleStyles: Partial<IToggleStyles> = { container: { marginTop: 5 }, label: { marginLeft: 4 } };\r\n    const modalStyles: Partial<IModalStyles> = { main: { position: \"absolute\", top: 150 }, };\r\n\r\n    const datePickerStyles: IStyleFunctionOrObject<IDatePickerStyleProps, IDatePickerStyles> = { root: { width: 160, marginRight: 20 }, callout: {} }\r\n\r\n    /* const calendarProps: ICalendarProps ={styles  } */\r\n\r\n\r\n\r\n    const headerIconStackStyles: Partial<IStackStyles> = { root: { marginRight: 0, marginLeft: \"auto\", } }\r\n\r\n    const DayPickerStrings: IDatePickerStrings = {\r\n        months: [\r\n            'January',\r\n            'February',\r\n            'March',\r\n            'April',\r\n            'May',\r\n            'June',\r\n            'July',\r\n            'August',\r\n            'September',\r\n            'October',\r\n            'November',\r\n            'December',\r\n        ],\r\n\r\n        shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n\r\n        days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n\r\n        shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\r\n\r\n        goToToday: 'Go to today',\r\n        prevMonthAriaLabel: 'Go to previous month',\r\n        nextMonthAriaLabel: 'Go to next month',\r\n        prevYearAriaLabel: 'Go to previous year',\r\n        nextYearAriaLabel: 'Go to next year',\r\n        closeButtonAriaLabel: 'Close date picker',\r\n        monthPickerHeaderAriaLabel: '{0}, select to change the year',\r\n        yearPickerHeaderAriaLabel: '{0}, select to change the month',\r\n    };\r\n\r\n    const controlClass = mergeStyleSets({\r\n        control: {\r\n            margin: '0 0 15px 0',\r\n            maxWidth: '300px',\r\n        },\r\n\r\n    });\r\n\r\n    const premisesTypeOptions = [\r\n\r\n        { key: 'Office', text: 'Office' },\r\n        { key: 'Warehouse', text: 'Warehouse' },\r\n        { key: 'Retail', text: 'Retail' },\r\n        { key: 'Stores', text: 'Stores' },\r\n        { key: 'Balcony', text: 'Balcony' },\r\n    ];\r\n\r\n    const premisesIndexOptions = [\r\n\r\n        { key: 1, text: \"1\" },\r\n        { key: 2, text: \"2\" },\r\n        { key: 3, text: \"3\" },\r\n        { key: 4, text: \"4\" },\r\n        { key: 5, text: \"5\" },\r\n        { key: 6, text: \"6\" },\r\n    ];\r\n\r\n\r\n\r\n    const [selectedPremisesType, setSelectedPremisesType] = React.useState<IDropdownOption>();\r\n    const [selectedPremisesIndex, setSelectedPremisesIndex] = React.useState<IDropdownOption>();\r\n\r\n\r\n    const onChangePremisesType = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        if (item !== undefined) {\r\n            setSelectedPremisesType(item);\r\n            setUpdatedPremises({ ...updatedPremises, type: item.text });\r\n        }\r\n    };\r\n\r\n    const onChangePremisesIndex = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        if (item !== undefined) {\r\n            setSelectedPremisesIndex(item);\r\n            setUpdatedPremises({ ...updatedPremises, premisesIndex: parseInt(item.text) });\r\n        }\r\n    };\r\n\r\n\r\n    const stackTokens = { childrenGap: 15 };\r\n\r\n\r\n\r\n    const onChangeFloor = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, floor: newValue || '' });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeArea = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            console.log(newValue)\r\n            setUpdatedPremises({ ...updatedPremises, area: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n\r\n    const handleChecked = () => {\r\n        if (updatedPremises.vacant === \"false\") {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n\r\n    }\r\n\r\n    const onChangeVacantToggle = React.useCallback(\r\n        (ev: React.MouseEvent<HTMLElement>, checked: boolean | undefined) => {\r\n            if (updatedPremises.vacant === \"false\") {\r\n                setUpdatedPremises({ ...updatedPremises, vacant: \"true\" });\r\n\r\n            } else {\r\n                setUpdatedPremises({ ...updatedPremises, vacant: \"false\" });\r\n            }\r\n        },\r\n        [updatedPremises])\r\n\r\n    const onSelectOccupationDate = React.useCallback(\r\n        (date: Date | null | undefined) => {\r\n            if (date !== undefined && date !== null)\r\n                setUpdatedPremises({ ...updatedPremises, occupation: date.toISOString() });\r\n        },\r\n        [updatedPremises])\r\n\r\n    const onFormatDate = (date?: Date): string => {\r\n        return !date ? '' : date.toLocaleDateString(\r\n            'en-gb',\r\n            {\r\n                year: 'numeric',\r\n                month: 'long',\r\n                day: 'numeric'\r\n            }\r\n        );\r\n    };\r\n\r\n\r\n\r\n    const onChangePremisesNotes = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, premisesNotes: newValue || '' });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeNetRental = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, netRental: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeOpCosts = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, opCosts: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeOther = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, other: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeGrossRental = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, grossRental: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeEsc = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, esc: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const getOpenBays = (ratio: number) => {\r\n        return (ratio * (updatedPremises.area / 100))\r\n    }\r\n\r\n    const getOpenRatio = (bays: number) => {\r\n        return (bays / (updatedPremises.area / 100))\r\n    }\r\n\r\n    const getCoveredBays = (ratio: number) => {\r\n        return (ratio * (updatedPremises.area / 100))\r\n    }\r\n\r\n    const getCoveredRatio = (bays: number) => {\r\n        return (bays / (updatedPremises.area / 100))\r\n    }\r\n\r\n    const getShadedBays = (ratio: number) => {\r\n        return (ratio * (updatedPremises.area / 100))\r\n    }\r\n\r\n    const getShadedRatio = (bays: number) => {\r\n        return (bays / (updatedPremises.area / 100))\r\n    }\r\n\r\n    const onChangeOpenBays = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, openBays: parseFloat(newValue!) || 0, openRatio: getOpenRatio(parseFloat(newValue!)) });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeOpenRate = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, openRate: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n\r\n    const onChangeOpenRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, openRatio: parseFloat(newValue!) || 0, openBays: getOpenBays(parseFloat(newValue!)) });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeCoveredBays = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, coveredBays: parseFloat(newValue!) || 0, coveredRatio: getCoveredRatio(parseFloat(newValue!)) });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeCoveredRate = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, coveredRate: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeCoveredRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, coveredRatio: parseFloat(newValue!) || 0, coveredBays: getCoveredBays(parseFloat(newValue!)) });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeShadedBays = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, shadedBays: parseFloat(newValue!) || 0, shadedRatio: getShadedRatio(parseFloat(newValue!)) });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeShadedRate = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, shadedRate: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeShadedRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, shadedRatio: parseFloat(newValue!) || 0, shadedBays: getShadedBays(parseFloat(newValue!)) });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeParkingRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, parkingRatio: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeTenantName = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, tenantName: newValue || '' });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onSelectLeaseExpiry = React.useCallback(\r\n        (date: Date | null | undefined) => {\r\n            if (date !== undefined && date !== null)\r\n                setUpdatedPremises({ ...updatedPremises, leaseExpiry: date.toISOString() });\r\n        },\r\n        [updatedPremises])\r\n\r\n    const onChangeTenantNotes = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, tenantNotes: newValue || '' });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeYard = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, yard: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeHeight = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, height: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeDoors = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, doors: parseFloat(newValue!) || 0 });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeLoading = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, loading: newValue || '' });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeSprinklered = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, sprinklered: newValue || '' });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangeCanopies = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, canopies: newValue || '' });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n    const onChangePower = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setUpdatedPremises({ ...updatedPremises, power: newValue || '' });\r\n        },\r\n        [updatedPremises],\r\n    );\r\n\r\n\r\n\r\n\r\n    /* const onChangeCoordinates = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, coordinates: newValue || '' });\r\n        },\r\n        [newProperty],\r\n    );\r\n    const onChangeErfExtent = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, erfExtent: parseInt(newValue!) || 0 });\r\n        },\r\n        [newProperty],\r\n    );\r\n    const onChangeTotalGLA = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, totalGLA: parseInt(newValue!) || 0 });\r\n        },\r\n        [newProperty],\r\n    );\r\n    const onChangeNotes = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewProperty({ ...newProperty, notes: newValue || '' });\r\n        },\r\n        [newProperty],\r\n    ); */\r\n\r\n    const [selectedKey, setSelectedKey] = React.useState('Premises Details');\r\n\r\n    const handleLinkClick = (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => {\r\n\r\n        setSelectedKey(item!.props.itemKey!);\r\n    };\r\n\r\n    const getTabId = (itemKey: string | undefined) => {\r\n        return `NewPremisesPivot_${itemKey}`;\r\n    };\r\n\r\n    const titleId = useId('title');\r\n\r\n\r\n\r\n    const updatePremisesTab = () => {\r\n\r\n        switch (selectedKey) {\r\n            case \"Premises Details\":\r\n                return (\r\n                    <>\r\n                        <Stack horizontal /* style={{marginLeft: 50}} */\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"0px\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Floor/Unit\"\r\n                                value={updatedPremises.floor}\r\n                                onChange={onChangeFloor}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                            />\r\n                            <TextField\r\n                                label=\"Area\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.area === 0 ? \"\" : String(updatedPremises.area)}\r\n                                onChange={onChangeArea}\r\n                                styles={textFieldAreaStyles}\r\n                                suffix=\"m²\"\r\n                            />\r\n\r\n                            <Toggle styles={toggleStyles} label=\"Vacant?\" checked={handleChecked()} onChange={onChangeVacantToggle} />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                /* width: '400px', */\r\n                                /*  margin: '10px', */\r\n\r\n                                color: '#605e5c',\r\n\r\n                                marginLeft: \"0px\",\r\n                                marginRight: \"auto\",\r\n                                /* display: \"block\" */\r\n\r\n                            }\r\n\r\n                        }}>\r\n\r\n                            <Dropdown\r\n                                label=\"Premises Type\"\r\n                                selectedKey={selectedPremisesType ? selectedPremisesType.key : undefined}\r\n                                // eslint-disable-next-line react/jsx-no-bind\r\n                                onChange={onChangePremisesType}\r\n                                placeholder=\"Select type\"\r\n                                options={premisesTypeOptions}\r\n                                styles={dropdownStyles}\r\n                            />\r\n\r\n                            <Dropdown\r\n                                label=\"Premises Index\"\r\n                                selectedKey={selectedPremisesIndex ? selectedPremisesIndex.key : undefined}\r\n                                // eslint-disable-next-line react/jsx-no-bind\r\n                                onChange={onChangePremisesIndex}\r\n                                placeholder=\"Select index\"\r\n                                options={premisesIndexOptions}\r\n                                styles={dropdownStyles}\r\n                            />\r\n\r\n                            <DatePicker\r\n                                label=\"Occupation Date\"\r\n                                className={controlClass.control}\r\n                                firstDayOfWeek={DayOfWeek.Monday}\r\n                                strings={DayPickerStrings}\r\n                                placeholder=\"Select a date...\"\r\n                                ariaLabel=\"Select a date\"\r\n                                value={new Date(updatedPremises.occupation)}\r\n                                onSelectDate={onSelectOccupationDate}\r\n                                formatDate={onFormatDate}\r\n                                styles={datePickerStyles}\r\n\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal>\r\n\r\n                            <TextField\r\n                                label=\"Premises Notes\"\r\n                                value={updatedPremises.premisesNotes}\r\n                                onChange={onChangePremisesNotes}\r\n                                styles={textFieldNotesStyles}\r\n                                multiline\r\n                                autoAdjustHeight\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n            case \"Rental Details\":\r\n\r\n                return (\r\n                    <>\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Net Rental\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.netRental === 0 ? \"\" : String(updatedPremises.netRental)}\r\n                                onChange={onChangeNetRental}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Op Costs\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.opCosts === 0 ? \"\" : String(updatedPremises.opCosts)}\r\n                                onChange={onChangeOpCosts}\r\n                                styles={textFieldFloorStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Other\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.other === 0 ? \"\" : String(updatedPremises.other)}\r\n                                onChange={onChangeOther}\r\n                                styles={textFieldFloorStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Gross Rental\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.grossRental === 0 ? \"\" : String(updatedPremises.grossRental)}\r\n                                onChange={onChangeGrossRental}\r\n                                styles={textFieldFloorStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n\r\n\r\n                            <TextField\r\n                                label=\"Esc\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.esc === 0 ? \"\" : String(updatedPremises.esc)}\r\n                                onChange={onChangeEsc}\r\n                                styles={textFieldEscStyles}\r\n                                suffix=\"% per annum\"\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n            case \"Parking Details\":\r\n\r\n                return (\r\n                    <>\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Open Bays\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.openBays === 0 ? \"\" : String(updatedPremises.openBays)}\r\n                                onChange={onChangeOpenBays}\r\n                                styles={textFieldParkingBaysStyles}\r\n                                suffix=\"bays\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Open Rate\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.openRate === 0 ? \"\" : String(updatedPremises.openRate)}\r\n                                onChange={onChangeOpenRate}\r\n                                styles={textFieldParkingRateStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/bay/month\"\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Open Ratio\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.openRatio === 0 ? \"\" : String(updatedPremises.openRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeOpenRatio}\r\n                                styles={textFieldParkingRatioStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Covered Bays\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.coveredBays === 0 ? \"\" : String(updatedPremises.coveredBays)}\r\n                                onChange={onChangeCoveredBays}\r\n                                styles={textFieldParkingBaysStyles}\r\n                                suffix=\"bays\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Covered Rate\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.coveredRate === 0 ? \"\" : String(updatedPremises.coveredRate)}\r\n                                onChange={onChangeCoveredRate}\r\n                                styles={textFieldParkingRateStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/bay/month\"\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Covered Ratio\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.coveredRatio === 0 ? \"\" : String(updatedPremises.coveredRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeCoveredRatio}\r\n                                styles={textFieldParkingRatioStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n\r\n\r\n                            <TextField\r\n                                label=\"Shaded Bays\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.shadedBays === 0 ? \"\" : String(updatedPremises.shadedBays)}\r\n                                onChange={onChangeShadedBays}\r\n                                styles={textFieldParkingBaysStyles}\r\n                                suffix=\"bays\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Shaded Rate\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.shadedRate === 0 ? \"\" : String(updatedPremises.shadedRate)}\r\n                                onChange={onChangeShadedRate}\r\n                                styles={textFieldParkingRateStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/bay/month\"\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Shaded Ratio\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.shadedRatio === 0 ? \"\" : String(updatedPremises.shadedRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeShadedRatio}\r\n                                styles={textFieldParkingRatioStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n                        </Stack>\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n\r\n\r\n                            <TextField\r\n                                label=\"Parking Ratio\"\r\n                                type=\"number\"\r\n                                value={updatedPremises.parkingRatio === 0 ? \"\" : String(updatedPremises.parkingRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeParkingRatio}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n            case \"Industrial Features\":\r\n\r\n                return (\r\n                    <>\r\n\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                color: '#605e5c',\r\n                                marginLeft: \"auto\",\r\n                                marginRight: \"auto\",\r\n                            }\r\n                        }}>\r\n\r\n                            <TextField\r\n                                label=\"Yard Size\"\r\n                                value={updatedPremises.yard === 0 ? \"\" : String(updatedPremises.yard)}\r\n                                onChange={onChangeYard}\r\n                                styles={textFieldYardStyles}\r\n                                suffix=\"m²\"\r\n\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Floor to Eave Height\"\r\n                                value={updatedPremises.height === 0 ? \"\" : String(updatedPremises.height)}\r\n                                onChange={onChangeHeight}\r\n                                styles={textFieldYardStyles}\r\n                                suffix=\"m\"\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"No of Doors\"\r\n                                value={updatedPremises.doors === 0 ? \"\" : String(updatedPremises.doors)}\r\n                                onChange={onChangeDoors}\r\n                                styles={textFieldYardStyles}\r\n\r\n                            />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                color: '#605e5c',\r\n                                marginLeft: \"auto\",\r\n                                marginRight: \"auto\",\r\n                            }\r\n                        }}>\r\n\r\n                            <TextField\r\n                                label=\"Loading Type\"\r\n                                value={updatedPremises.loading === \"\" ? \"\" : updatedPremises.loading}\r\n                                onChange={onChangeLoading}\r\n                                styles={textFieldPowerStyles}\r\n\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Sprinkler Type\"\r\n                                value={updatedPremises.sprinklered === \"\" ? \"\" : updatedPremises.sprinklered}\r\n                                onChange={onChangeSprinklered}\r\n                                styles={textFieldPowerStyles}\r\n\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                color: '#605e5c',\r\n                                marginLeft: \"auto\",\r\n                                marginRight: \"auto\",\r\n                            }\r\n                        }}>\r\n\r\n                            <TextField\r\n                                label=\"Canopy Details\"\r\n                                value={updatedPremises.canopies === \"\" ? \"\" : updatedPremises.canopies}\r\n                                onChange={onChangeCanopies}\r\n                                styles={textFieldPowerStyles}\r\n\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Power\"\r\n                                value={updatedPremises.power === \"\" ? \"\" : updatedPremises.power}\r\n                                onChange={onChangePower}\r\n                                styles={textFieldPowerStyles}\r\n\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n\r\n            case \"Tenant Details\":\r\n\r\n                return (\r\n                    <>\r\n\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                /* width: '400px', */\r\n                                /*  margin: '10px', */\r\n\r\n                                color: '#605e5c',\r\n\r\n                                marginLeft: \"0px\",\r\n                                marginRight: \"auto\",\r\n                                /* display: \"block\" */\r\n\r\n                            }\r\n\r\n                        }}>\r\n\r\n                            <TextField\r\n                                label=\"Tenant Name\"\r\n                                value={updatedPremises.tenantName === \"-\" ? \"\" : updatedPremises.tenantName}\r\n                                onChange={onChangeTenantName}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                            />\r\n\r\n                            <DatePicker\r\n                                label=\"Lease Expiry Date\"\r\n                                className={controlClass.control}\r\n                                firstDayOfWeek={DayOfWeek.Monday}\r\n                                strings={DayPickerStrings}\r\n                                placeholder=\"Select a date...\"\r\n                                ariaLabel=\"Select a date\"\r\n                                value={new Date(updatedPremises.leaseExpiry)}\r\n                                onSelectDate={onSelectLeaseExpiry}\r\n                                formatDate={onFormatDate}\r\n                                styles={datePickerStyles}\r\n\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal>\r\n\r\n                            <TextField\r\n                                label=\"Tenant Notes\"\r\n                                value={updatedPremises.tenantNotes}\r\n                                onChange={onChangeTenantNotes}\r\n                                styles={textFieldNotesStyles}\r\n                                multiline\r\n                                autoAdjustHeight\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n\r\n            default:\r\n            // code block\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <Modal\r\n                styles={modalStyles}\r\n\r\n                titleAriaId={titleId}\r\n                isOpen={showUpdatePremisesModal}\r\n                /*  onDismiss={hideUpdatePremisesModal} */\r\n                isBlocking={false}\r\n                containerClassName={contentStyles.container}\r\n            /* dragOptions={dragOptions} */\r\n            >\r\n                <div className={contentStyles.header}>\r\n                    <span id={titleId}>Update Premises</span>\r\n                    <Stack horizontal\r\n                        styles={headerIconStackStyles}\r\n                    >\r\n\r\n                        <IconButton\r\n                            styles={iconButtonStyles}\r\n                            iconProps={saveIcon}\r\n                            ariaLabel=\"Save Premises\"\r\n                            onClick={saveUpdatedPremises}\r\n                        />\r\n                        <IconButton\r\n                            styles={iconButtonStyles}\r\n                            iconProps={cancelIcon}\r\n                            ariaLabel=\"Close popup modal\"\r\n                            onClick={hideUpdatePremisesModal}\r\n                        />\r\n\r\n                    </Stack>\r\n\r\n                </div>\r\n                <div className={contentStyles.body} >\r\n\r\n                    <Stack tokens={stackTokens}>\r\n\r\n                        <Pivot\r\n                            aria-label=\"Separately Rendered Content Pivot Example\"\r\n                            selectedKey={selectedKey}\r\n                            // eslint-disable-next-line react/jsx-no-bind\r\n                            onLinkClick={handleLinkClick}\r\n                            headersOnly={true}\r\n                            getTabId={getTabId}\r\n                            styles={{ link: {/* padding:0, margin:0, fontSize:14 */  marginRight: 20 }, linkIsSelected: {/* padding:0, margin:0, fontSize:14 */marginRight: 20 }, root: { marginLeft: \"auto\", marginRight: \"auto\" } }}\r\n                        >\r\n                            <PivotItem headerText=\"Premises\" itemKey=\"Premises Details\" />\r\n                            <PivotItem headerText=\"Rental\" itemKey=\"Rental Details\" />\r\n                            <PivotItem headerText=\"Parking\" itemKey=\"Parking Details\" />\r\n                            <PivotItem headerText=\"Industrial\" itemKey=\"Industrial Features\" />\r\n                            <PivotItem headerText=\"Tenant\" itemKey=\"Tenant Details\" />\r\n                        </Pivot>\r\n\r\n                        {updatePremisesTab()}\r\n\r\n\r\n\r\n\r\n\r\n                    </Stack>\r\n\r\n\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst theme = getTheme();\r\nconst contentStyles = mergeStyleSets({\r\n    container: {\r\n        display: 'flex',\r\n        flexFlow: 'column nowrap',\r\n        alignItems: 'stretch',\r\n        width: 525,\r\n\r\n    },\r\n\r\n    header: [\r\n\r\n        theme.fonts.xLargePlus,\r\n        {\r\n            flex: '1 1 auto',\r\n            borderTop: `4px solid ${theme.palette.themePrimary}`,\r\n            color: theme.palette.neutralPrimary,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            fontWeight: FontWeights.semibold,\r\n            padding: '12px 12px 14px 24px',\r\n        },\r\n    ],\r\n    body: {\r\n        flex: '4 4 auto',\r\n        padding: '0 24px 24px 24px',\r\n        overflowY: 'hidden',\r\n        selectors: {\r\n            p: { margin: '14px 0' },\r\n            'p:first-child': { marginTop: 0 },\r\n            'p:last-child': { marginBottom: 0 },\r\n        },\r\n    },\r\n});\r\n\r\nconst iconButtonStyles = {\r\n    root: {\r\n        color: theme.palette.neutralPrimary,\r\n        marginLeft: \"10px !important\",\r\n        marginTop: '4px',\r\n        marginRight: '2px',\r\n\r\n    },\r\n    rootHovered: {\r\n        color: theme.palette.neutralDark,\r\n    },\r\n    icon: {\r\n        fontSize: \"24px\",\r\n\r\n    }\r\n};\r\n\r\nexport default UpdatePremisesModal\r\n","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\ContactListItem.tsx",["612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642"],"import * as React from 'react';\r\nimport { getTheme } from '@fluentui/react';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\r\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\r\nimport { Checkbox, ICheckboxProps } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { Query, Property, Mutation, MutationDeleteLandlordContactArgs, MutationUpdateLandlordContactArgs, LandlordContact } from \"../schematypes/schematypes\"\r\nimport { GET_SELECTED_PROPERTIES, GET_PROPERTIES, DELETE_PROPERTY, DELETE_LANDLORD_CONTACT, UPDATE_LANDLORD_CONTACT, GET_LANDLORDS } from \"../gql/gql\"\r\nimport { gql, useMutation, useQuery } from '@apollo/client';\r\nimport { selectedPropertyList } from \"../reactivevariables/reactivevariables\"\r\nimport { mergeStyles, registerIcons } from 'office-ui-fabric-react/lib/Styling';\r\nimport { CommandBarButton, IContextualMenuProps, Stack, Text, FontWeights, IconButton, IIconProps, IStackStyles, initializeIcons, DefaultButton, FocusTrapCallout, FocusZone, PrimaryButton, mergeStyleSets, ITextFieldStyles, DirectionalHint } from 'office-ui-fabric-react';\r\nimport { useBoolean } from '@uifabric/react-hooks';\r\nimport { IndustrialIcon, RetailIcon, OfficeIcon, MixedUseIcon } from \"../assets/svgIcons.js\"\r\nimport { FontIcon } from 'office-ui-fabric-react/lib/Icon';\r\nimport { navigationState } from \"../reactivevariables/reactivevariables\"\r\nimport \"./PropertyListItem.css\"\r\n\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\n\r\n\r\ninterface Props {\r\n  contact: LandlordContact\r\n  key: any\r\n  landlordId: number\r\n\r\n}\r\n\r\nexport const ContactListItem: React.FunctionComponent<Props> = ({ contact, landlordId }) => {\r\n\r\n\r\n\r\n\r\n  const [isDeleteCalloutVisible, { toggle: toggleIsDeleteCalloutVisible }] = useBoolean(false);\r\n\r\n  const [isEditContactCalloutVisible, { toggle: toggleIsEditContactCalloutVisible }] = useBoolean(false);\r\n\r\n  const [editContact, setEditContact] = React.useState({\r\n    name: contact?.name,\r\n    email: contact?.email,\r\n    mobileNo: contact?.mobileNo,\r\n    officeNo: contact?.officeNo,\r\n  })\r\n\r\n\r\n\r\n  const [deleteLandlordContact, { data: deleteLandlordContactData }] = useMutation<Mutation, MutationDeleteLandlordContactArgs>(DELETE_LANDLORD_CONTACT);\r\n\r\n  const deleteLandlordContactButton = () => {\r\n\r\n    deleteLandlordContact({\r\n      variables: {\r\n        contactId: contact.contactId\r\n      },\r\n      update(cache, { data }) {\r\n\r\n        if (!data) {\r\n            return null;\r\n        }\r\n\r\n        const getExistingLandlords = cache.readQuery<Query>({ query: GET_LANDLORDS });\r\n        // Add the new todo to the cache\r\n        const existingLandlords = getExistingLandlords ? getExistingLandlords.landlords : [];\r\n        const selectedLandlord = existingLandlords!.find(t => \r\n          t.landlordId === landlordId\r\n        )\r\n        const otherLandlords = existingLandlords!.filter (t => {\r\n          return t.landlordId !== landlordId\r\n        })\r\n        const existingContacts = selectedLandlord?.contactsList\r\n        const newContacts = existingContacts!.filter (t => {\r\n          return t.contactId !== contact.contactId\r\n        })\r\n       const updatedLandlord = {landlordId: selectedLandlord!.landlordId, landlordName: selectedLandlord!.landlordName , contactsList: [...newContacts ]}\r\n        if (existingLandlords)\r\n            cache.writeQuery<Query>({\r\n                query: GET_LANDLORDS,\r\n                data: { landlords: [updatedLandlord!, ...otherLandlords] }\r\n            });\r\n    }\r\n\r\n    })\r\n    toggleIsDeleteCalloutVisible()\r\n  }\r\n\r\n  const [updateLandlordContact, { data: updateLandlordData }] = useMutation<Mutation, MutationUpdateLandlordContactArgs>(UPDATE_LANDLORD_CONTACT);\r\n\r\n  const updateLandlordContactButton = () => {\r\n\r\n      updateLandlordContact({\r\n        variables: {\r\n          contactId: contact.contactId,\r\n          name: editContact.name,\r\n          email: editContact.email,\r\n          mobileNo: editContact.mobileNo,\r\n          officeNo: editContact.officeNo,\r\n        },\r\n\r\n        update(cache, { data }) {\r\n\r\n          if (!data) {\r\n              return null;\r\n          }\r\n  \r\n          const getExistingLandlords = cache.readQuery<Query>({ query: GET_LANDLORDS });\r\n          // Add the new todo to the cache\r\n          const existingLandlords = getExistingLandlords ? getExistingLandlords.landlords : [];\r\n          const selectedLandlord = existingLandlords!.find(t => \r\n            t.landlordId === landlordId\r\n          )\r\n          const otherLandlords = existingLandlords!.filter (t => {\r\n            return t.landlordId !== landlordId\r\n          })\r\n          const existingContacts = selectedLandlord?.contactsList\r\n          const otherContacts = existingContacts!.filter (t => {\r\n            return t.contactId !== contact.contactId\r\n          })\r\n          const newContact = data.updateLandlordContact\r\n         const updatedLandlord = {landlordId: selectedLandlord!.landlordId, landlordName: selectedLandlord!.landlordName , contactsList: [...otherContacts, newContact ]}\r\n          if (existingLandlords)\r\n              cache.writeQuery<Query>({\r\n                  query: GET_LANDLORDS,\r\n                  data: { landlords: [updatedLandlord!, ...otherLandlords] }\r\n              });\r\n      }\r\n\r\n    })\r\n    setEditContact(\r\n      {name: \"\",\r\n    email: \"\",\r\n    mobileNo: \"\",\r\n    officeNo: \"\"}\r\n    )\r\n    toggleIsEditContactCalloutVisible()\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /* const [deleteProperty, { data: deletePropertyData }] = useMutation<Mutation, MutationDeletePropertyArgs>(DELETE_PROPERTY);\r\n\r\n  const deletePropertyButton = () => {\r\n\r\n    deleteProperty({\r\n      variables: {\r\n        propertyId: property.propertyId\r\n      },\r\n      update(cache, { data }) {\r\n\r\n        if (!data) {\r\n          return null;\r\n        }\r\n\r\n        const getExistingProperties = cache.readQuery<Query>({ query: GET_PROPERTIES });\r\n        \r\n        const existingProperties = getExistingProperties ? getExistingProperties.properties : [];\r\n        const newProperties = existingProperties!.filter(t => {\r\n          if (t)\r\n            return (t.propertyId !== property.propertyId)\r\n        });  \r\n        if (existingProperties)\r\n          cache.writeQuery<Query>({\r\n            query: GET_PROPERTIES,\r\n            data: { properties: newProperties }\r\n          });\r\n      }\r\n\r\n    })\r\n\r\n  } */\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const styles = mergeStyleSets({\r\n    /*  buttonArea: {\r\n       verticalAlign: 'top',\r\n       display: 'inline-block',\r\n       textAlign: 'center',\r\n       margin: '0 100px',\r\n       minWidth: 130,\r\n       height: 32,\r\n     }, */\r\n    callout: {\r\n      maxWidth: 400,\r\n    },\r\n    header: {\r\n      padding: '18px 24px 12px',\r\n    },\r\n    title: [\r\n      {\r\n        margin: 0,\r\n        fontWeight: FontWeights.bold,\r\n      },\r\n    ],\r\n    inner: {\r\n      height: '100%',\r\n      padding: '0 24px 20px',\r\n    },\r\n    actions: {\r\n      position: 'relative',\r\n      marginTop: 20,\r\n      width: '100%',\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    buttons: {\r\n      display: 'flex',\r\n      justifyContent: 'flex-end',\r\n      padding: '0 24px 24px',\r\n    },\r\n    subtext: [\r\n      {\r\n        margin: 0,\r\n        fontWeight: FontWeights.semilight,\r\n      },\r\n    ],\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const chevronClass = mergeStyles({\r\n    alignSelf: 'center',\r\n    marginLeft: 2,\r\n    /*  marginRight: 5, */\r\n    marginTop: \"0 !important\",\r\n    /* color: palette.neutralTertiary, */\r\n    fontSize: 20,\r\n    flexShrink: 0,\r\n    cursor: \"pointer\",\r\n    /* selectors: {\r\n      '&:hover': { \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.1)\" },\r\n    }, */\r\n\r\n  });\r\n\r\n  const iconClass = mergeStyles({\r\n    fontSize: 50,\r\n    height: 50,\r\n    width: 50,\r\n\r\n\r\n    marginLeft: 15,\r\n    marginRight: 15,\r\n    marginTop: \"-10px !important\",\r\n    padding: \"5px\",\r\n\r\n\r\n\r\n  });\r\n\r\n  const chevronIconDiv = mergeStyles({\r\n    /* fontSize: 50, */\r\n    height: 40,\r\n    width: 40,\r\n    lineHeight: 40,\r\n    textAlign: \"center\",\r\n    marginLeft: 15,\r\n    marginRight: 15,\r\n    marginTop: \"0px !important\",\r\n    /* padding: \"5px\", */\r\n    selectors: {\r\n      '&:hover': { backgroundColor: \"rgb(0 13 255 / 14%)\", borderRadius: 30, \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.2)\" },\r\n    },\r\n\r\n  });\r\n\r\n  const boldStyle = { root: { fontWeight: FontWeights.semibold } };\r\n  const propertyHeadingStyles = { alignSelf: \"start\", fontSize: \"23px\", padding: 5 }\r\n  const contactDetailsStyles = { alignSelf: \"start\", fontSize: \"14px\", padding: 5, width: \"100%\", display: \"flex\", }\r\n  const theme = getTheme();\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: theme.palette.neutralPrimary,\r\n      marginLeft: \"auto\",\r\n      marginTop: '0px !important',\r\n      marginBottom:0,\r\n      marginRight: 5,\r\n      width: 30,\r\n      height: 30,\r\n      /* visibility: isChecked() ? \"visible\" : \"hidden\", */\r\n\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n      backgroundColor: \"rgb(255 0 0 / 14%)\",\r\n      borderRadius: 30,\r\n      \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.2)\"\r\n\r\n    },\r\n    icon: {\r\n      fontSize: \"18px\",\r\n      marginLeft: 6\r\n\r\n    }\r\n  };\r\n\r\n  const contactIconClass = mergeStyles({\r\n    transform: \"translateY(2px)\",\r\n    marginRight: 15,\r\n    fontSize: \"medium\"\r\n\r\n});\r\n\r\n  const deleteIcon: IIconProps = { iconName: 'Delete' };\r\n  const editIcon: IIconProps = { iconName: 'Edit' };\r\n\r\n  const textFieldContactStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 250 } };\r\n\r\n\r\n  const onChangeContactName = React.useCallback(\r\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n      setEditContact({ ...editContact, name: newValue! });\r\n    },\r\n    [editContact],\r\n  );\r\n\r\n  const onChangeContactEmail = React.useCallback(\r\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n      setEditContact({ ...editContact, email: newValue! });\r\n    },\r\n    [editContact],\r\n  );\r\n\r\n  const onChangeContactMobileNo = React.useCallback(\r\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n      setEditContact({ ...editContact, mobileNo: newValue! });\r\n    },\r\n    [editContact],\r\n  );\r\n\r\n  const onChangeContactOfficeNo = React.useCallback(\r\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n      setEditContact({ ...editContact, officeNo: newValue! });\r\n    },\r\n    [editContact],\r\n  );\r\n\r\n  return (\r\n\r\n\r\n\r\n    <Stack\r\n      horizontalAlign=\"start\"\r\n      verticalAlign=\"start\"\r\n      id=\"card\"\r\nverticalFill\r\n      styles={{\r\n        root: {\r\n          width: \"47%\",\r\n          marginBottom: 10,\r\n          marginLeft: \"auto !important\",\r\n          marginRight: \"auto\",\r\n          marginTop: 10,\r\n          padding: '10px',\r\n          textAlign: 'center',\r\n          color: '#605e5c',\r\n         /*  alignItems: \"center\", */\r\n          display: \"flex\",\r\n         /*  flexFlow: \"row\", */\r\n          /*  borderTop: \"4px solid #2557a2;\",\r\n           borderBottom: \"4px solid #2557a2;\", */\r\n          backgroundColor: \"white\",\r\n          background: /* isChecked() ? \"rgb(104 113 140 / 14%)\" : */ \"white\",\r\n          boxShadow: \"-1px 1px 7px 2px #d4cece\",\r\n          selectors: {\r\n            '&:hover': { background: /* palette.neutralLight */  \"rgb(104 113 140 / 14%)\" },\r\n          },\r\n\r\n        }\r\n      }}\r\n      gap={15}>\r\n\r\n\r\n\r\n     \r\n\r\n      <Stack styles={{ root: { paddingTop: 0, marginTop: \"0 !important\", marginBottom: \"auto\", width: \"100%\" } }} verticalFill>\r\n        <Text block={true} nowrap={true} style={contactDetailsStyles}><Icon className={contactIconClass} iconName=\"Contact\" /> {contact.name}</Text>\r\n        <Text block={true} nowrap={true} style={contactDetailsStyles}><Icon className={contactIconClass} iconName=\"Mail\" />{contact.email!.length <26? contact.email: `${contact.email?.slice(0,25)}...` }</Text>\r\n        <Text  style={contactDetailsStyles}><Icon className={contactIconClass} iconName=\"Phone\" />{contact.officeNo}</Text>\r\n        <Text  style={contactDetailsStyles}> <Icon className={contactIconClass} iconName=\"CellPhone\" />{contact.mobileNo}</Text>\r\n\r\n\r\n\r\n      </Stack>\r\n\r\n      <Stack styles={{root:{marginRight:5, marginLeft: \"auto !important\", marginTop:\"-30px !important\"}}} horizontal>\r\n\r\n      <IconButton\r\n        styles={iconButtonStyles}\r\n        id={`contactDeleteButton${contact.contactId}`}\r\n        iconProps={deleteIcon}\r\n        ariaLabel=\"Delete Contact\"\r\n        onClick={toggleIsDeleteCalloutVisible}\r\n      />\r\n      {isDeleteCalloutVisible ? (\r\n        <div>\r\n          <FocusTrapCallout\r\n            role=\"alertdialog\"\r\n            className={styles.callout}\r\n            gapSpace={0}\r\n            target={`#contactDeleteButton${contact.contactId}`}\r\n            onDismiss={toggleIsDeleteCalloutVisible}\r\n            setInitialFocus\r\n          >\r\n            <div className={styles.header}>\r\n              <Text className={styles.title}>Delete Contact</Text>\r\n            </div>\r\n            <div className={styles.inner}>\r\n              <div>\r\n                <Text className={styles.subtext}>\r\n                  Are you sure you want to delete this contact?\r\n                </Text>\r\n              </div>\r\n            </div>\r\n            <FocusZone>\r\n              <Stack className={styles.buttons} gap={8} horizontal>\r\n                <PrimaryButton onClick={deleteLandlordContactButton}>Confirm</PrimaryButton>\r\n                <DefaultButton onClick={toggleIsDeleteCalloutVisible}>Cancel</DefaultButton>\r\n              </Stack>\r\n            </FocusZone>\r\n          </FocusTrapCallout>\r\n        </div>\r\n      ) : null}\r\n\r\n      <IconButton\r\n        styles={iconButtonStyles}\r\n        id={`editContactButton${contact.contactId}`}\r\n        iconProps={editIcon}\r\n        ariaLabel=\"Edit Contact\"\r\n        onClick={toggleIsEditContactCalloutVisible}\r\n      />\r\n      {isEditContactCalloutVisible ? (\r\n          <div>\r\n            <FocusTrapCallout\r\n              role=\"alertdialog\"\r\n              className={styles.callout}\r\n              gapSpace={0}\r\n              target={`#editContactButton${contact.contactId}`}\r\n              onDismiss={toggleIsEditContactCalloutVisible}\r\n              setInitialFocus\r\n              directionalHint={DirectionalHint.bottomCenter}\r\n            >\r\n              <div className={styles.header}>\r\n                <Text className={styles.title}>Edit Contact</Text>\r\n              </div>\r\n              <div className={styles.inner}>\r\n                <div>\r\n\r\n                  <TextField\r\n                    styles={textFieldContactStyles}\r\n                    label=\"Name\"\r\n                    value={editContact.name}\r\n                    onChange={onChangeContactName}>\r\n                  </TextField>\r\n                  <TextField\r\n                    styles={textFieldContactStyles}\r\n                    label=\"Email\"\r\n                    value={editContact.email}\r\n                    onChange={onChangeContactEmail}>\r\n                  </TextField>\r\n                  <TextField\r\n                    styles={textFieldContactStyles}\r\n                    label=\"Mobile No\"\r\n                    value={editContact.mobileNo}\r\n                    onChange={onChangeContactMobileNo}>\r\n                  </TextField>\r\n                  <TextField\r\n                    styles={textFieldContactStyles}\r\n                    label=\"Office No\"\r\n                    value={editContact.officeNo}\r\n                    onChange={onChangeContactOfficeNo}>\r\n                  </TextField>\r\n                </div>\r\n              </div>\r\n              <FocusZone>\r\n                <Stack className={styles.buttons} gap={8} horizontal>\r\n                  <PrimaryButton onClick={updateLandlordContactButton}>Confirm</PrimaryButton>\r\n                  <DefaultButton onClick={toggleIsEditContactCalloutVisible}>Cancel</DefaultButton>\r\n                </Stack>\r\n              </FocusZone>\r\n            </FocusTrapCallout>\r\n          </div>\r\n        ) : null}\r\n\r\n\r\n      </Stack>\r\n      \r\n\r\n\r\n    </Stack>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  );\r\n};\r\n\r\nexport default ContactListItem","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PremisesList.tsx",["643","644","645","646","647","648","649","650","651"],"import * as React from 'react';\r\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\r\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\r\nimport { Checkbox, ICheckboxProps } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { Query, Property } from \"../schematypes/schematypes\"\r\nimport { useQuery } from '@apollo/client';\r\nimport { selectedPropertyList } from \"../reactivevariables/reactivevariables\"\r\nimport PremisesListItem from \"./PremisesListItem\"\r\nimport { Text, Stack, ITextStyles, IStyleFunctionOrObject, IconButton, IIconProps } from 'office-ui-fabric-react';\r\n/* import { DeepPartial  } from 'office-ui-fabric-react/lib/Styling'; */\r\nimport { TooltipHost, ITooltipHostStyles, ITooltipHostStyleProps, } from 'office-ui-fabric-react/lib/Tooltip';\r\nimport { useId } from '@uifabric/react-hooks';\r\nimport { getTheme } from '@fluentui/react';\r\nimport { navigationState } from \"../reactivevariables/reactivevariables\"\r\nconst calloutProps = { gapSpace: 0 };\r\n// The TooltipHost root uses display: inline by default.\r\n// If that's causing sizing issues or tooltip positioning issues, try overriding to inline-block.\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface Props {\r\n    singleProperty: Property | undefined\r\n}\r\n\r\nexport const PremisesList: React.FunctionComponent<Props> = ({ singleProperty }) => {\r\n\r\n   \r\n\r\n    const tooltipNetRentalId = useId('NetRental');\r\n    const tooltipOpCostsId = useId('NetRental');\r\n    const tooltipOtherId = useId('NetRental');\r\n    const tooltipGrossRentalId = useId('NetRental');\r\n    const tooltipOpenRateId = useId('NetRental');\r\n    const tooltipCoveredRateId = useId('NetRental');\r\n    const tooltipShadedRateId = useId('NetRental');\r\n    const tooltipEscId = useId('NetRental');\r\n    const tooltipParkingRatioId = useId('NetRental');\r\n\r\n    const tooltipHostStyles: IStyleFunctionOrObject<ITooltipHostStyleProps, ITooltipHostStyles> = { root: { display: \"flex\" } }\r\n\r\n    var originalPropertyData = singleProperty\r\n    var originalPremises = originalPropertyData!.premisesList!\r\n    var indexSortedPremises = originalPremises.slice().sort((a, b) => {\r\n        return (a.premisesIndex!) - (b.premisesIndex!)\r\n    });\r\n\r\n    var floorSortedPremises = indexSortedPremises.slice().sort((a, b) => {\r\n        var floorA = a.floor!.toUpperCase();\r\n        var floorB = b.floor!.toUpperCase();\r\n        if (floorA < floorB && a.premisesIndex=== b.premisesIndex) {\r\n            return -1;\r\n        }\r\n        if (floorA > floorB && a.premisesIndex=== b.premisesIndex) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    });\r\n\r\n\r\n    const tableCellStyles: ITextStyles = { root: { alignSelf: \"start\", fontSize: \"14px\", padding: 5, marginTop: \"auto !important\", marginBottom: \"auto\", width: 45, /* fontStyle : \"italic\", */ fontWeight: 600, } }\r\n    const tableCellTenantStyles: ITextStyles = { root: {height: 19, marginTop: \"9.5px !important\", marginBottom:9.5 , alignSelf: \"start\", fontSize: \"14px\", padding: 5,   /* fontStyle : \"italic\", */ fontWeight: 600, } }\r\n    const tableCellNotesStyles: ITextStyles = { root: {height: 19, marginTop: \"auto !important\", marginBottom:18 , alignSelf: \"start\", fontSize: \"14px\", padding: 5,   /* fontStyle : \"italic\", */ fontWeight: 600, } }\r\n    const tableHeadingStyles: ITextStyles = { root: { fontSize: \"18px\", paddingTop: 5, fontWeight: 600, } }\r\n    const tableCellBelowStyles: ITextStyles = { root: { alignSelf: \"start\", fontSize: \"10px\", padding: 0, marginTop: \"auto !important\", marginBottom: \"auto\", width: 50, } }\r\n    const theme = getTheme();\r\n    const iconButtonStyles = {\r\n        root: {\r\n            color: theme.palette.neutralPrimary,\r\n            marginLeft: 20,\r\n            marginTop: '0px !important',\r\n            marginRight: 5,\r\n            width: 35,\r\n            height: 35,\r\n            /*  visibility: isChecked() ? \"visible\" : \"hidden\", */\r\n\r\n        },\r\n        rootHovered: {\r\n            color: theme.palette.neutralDark,\r\n            backgroundColor: \"rgb(3 122 212 / 16%);\",\r\n            /* borderRadius: 30, */\r\n            \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.1)\"\r\n\r\n        },\r\n        icon: {\r\n            fontSize: \"24px\",\r\n            marginLeft: 6\r\n\r\n        }\r\n    };\r\n\r\n    const addIcon: IIconProps = { iconName: 'Add' };\r\n\r\n    /* const onFilterChanged = (_: any, text: string): void => {\r\n      setItems(originalItems.filter(item => item.name.toLowerCase().indexOf(text.toLowerCase()) >= 0));\r\n    }; */\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Stack\r\n                horizontalAlign=\"start\"\r\n                verticalAlign=\"start\"\r\n                id=\"premisesListHeadings\"\r\n\r\n                styles={{\r\n                    root: {\r\n                        width: \"fit-content\",\r\n                        marginBottom: 10,\r\n                        marginTop: 20,\r\n                        marginLeft: 20,\r\n                        marginRight: \"auto\",\r\n                        /* padding: '10px', */\r\n                        textAlign: 'center',\r\n                        color: '#605e5c',\r\n                        alignItems: \"center\",\r\n                        display: \"flex\",\r\n                        flexFlow: \"row\",\r\n                        /*  borderTop: \"4px solid #2557a2;\",\r\n                         borderBottom: \"4px solid #2557a2;\", */\r\n                        backgroundColor: \"white\",\r\n                        /*  background: isChecked() ? \"rgb(104 113 140 / 14%)\" : \"white\", */\r\n                        /* boxShadow: \"-1px 1px 7px 2px #d4cece\", */\r\n                        /* selectors: {\r\n                            '&:hover': { background:   \"rgb(104 113 140 / 14%)\" },\r\n                        }, */\r\n\r\n                    }\r\n                }}\r\n            >\r\n\r\n                {/*  <Stack verticalAlign=\"start\" horizontalAlign=\"start\" styles={{\r\n                    root: {\r\n                        textAlign: 'center',\r\n                        alignItems: \"center\",\r\n                        display: \"flex\",\r\n                        flexFlow: \"row\",\r\n                    }\r\n                }}>\r\n                    <div style={{ width: 50, display: \"flex\" }}></div>\r\n                    <div style={{ width: 350, display: \"flex\" }}>Premises Details</div>\r\n                    <div style={{ width: 250, display: \"flex\" }}>Rental Details</div>\r\n                    <div style={{ width: 390, display: \"flex\" }}>Parking Details</div>\r\n                    <div style={{ width: 275, display: \"flex\" }}>Tenant Details</div>\r\n                    <div style={{ width: 50, display: \"flex\" }}></div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </Stack> */}\r\n\r\n                <Stack verticalAlign=\"start\" horizontalAlign=\"start\" styles={{\r\n                    root: {\r\n                        textAlign: 'center',\r\n                        alignItems: \"center\",\r\n                        display: \"flex\",\r\n                        flexFlow: \"row\",\r\n                    }\r\n                }}>\r\n\r\n                    <div style={{ width: 80, display: \"flex\" }}>\r\n                        <IconButton\r\n                            styles={iconButtonStyles}\r\n                            iconProps={addIcon}\r\n                            ariaLabel=\"Add Premises\"\r\n                            onClick={() => navigationState({ ...navigationState(), showNewPremisesModal: true })}\r\n                        />\r\n                    </div>\r\n\r\n\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        flexFlow: \"column\",\r\n                        borderTop: \"3px solid rgb(210 26 69 / 42%)\",\r\n                        borderRight: \"3px solid rgb(210 26 69 / 42%)\",\r\n                        borderLeft: \"3px solid rgb(210 26 69 / 42%)\",\r\n                        marginRight: 2,\r\n                        marginLeft: 2,\r\n                    }}>\r\n                        <Text styles={tableHeadingStyles}>Premises Details</Text>\r\n                        <div style={{ display: \"flex\", flexFlow: \"row\" }}>\r\n                            <Text styles={tableCellStyles} style={{ width: 100 }}>Floor/ Unit</Text>\r\n                            <Text styles={tableCellStyles}>Area</Text>\r\n                            <Text styles={tableCellStyles}>Vacant</Text>\r\n                            <Text styles={tableCellStyles} style={{ width: 55 }}>Type</Text>\r\n                            <Text styles={tableCellStyles} style={{ width: 100 }}>Occupation Date</Text>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        flexFlow: \"column\",\r\n                        borderTop: \"3px solid rgb(63 55 189 / 42%)\",\r\n                        borderRight: \"3px solid rgb(63 55 189 / 42%)\",\r\n                        borderLeft: \"3px solid rgb(63 55 189 / 42%)\",\r\n                        marginRight: 2,\r\n                        marginLeft: 2,\r\n                    }}>\r\n                        <Text styles={tableHeadingStyles}>Rental Details</Text>\r\n                        <div style={{ display: \"flex\", flexFlow: \"row\" }}>\r\n                            <TooltipHost styles={tooltipHostStyles} content=\"R/m²/month\" id={tooltipNetRentalId} calloutProps={calloutProps}> <Text styles={tableCellStyles}>Net Rental</Text> </TooltipHost>\r\n                            <TooltipHost styles={tooltipHostStyles} content=\"R/m²/month\" id={tooltipOpCostsId} calloutProps={calloutProps}> <Text styles={tableCellStyles}>Op Costs</Text></TooltipHost>\r\n                            <TooltipHost styles={tooltipHostStyles} content=\"R/m²/month\" id={tooltipOtherId} calloutProps={calloutProps}> <Text styles={tableCellStyles}>Other Costs</Text></TooltipHost>\r\n                            <TooltipHost styles={tooltipHostStyles} content=\"R/m²/month\" id={tooltipGrossRentalId} calloutProps={calloutProps}> <Text styles={tableCellStyles}>Gross Rental</Text></TooltipHost>\r\n                            <TooltipHost styles={tooltipHostStyles} content=\"annual %\" id={tooltipEscId} calloutProps={calloutProps}> <Text styles={tableCellStyles}>Esc</Text></TooltipHost>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        flexFlow: \"column\",\r\n                        borderTop: \"3px solid rgb(61 177 123 / 42%)\",\r\n                        borderRight: \"3px solid rgb(61 177 123 / 42%)\",\r\n                        borderLeft: \"3px solid rgb(61 177 123 / 42%)\",\r\n                        marginRight: 2,\r\n                        marginLeft: 2,\r\n                    }}>\r\n                        <Text styles={tableHeadingStyles}>Parking Details</Text>\r\n                        <div style={{ display: \"flex\", flexFlow: \"row\" }}>\r\n                            <Text styles={tableCellStyles}>Open Bays</Text>\r\n                            <TooltipHost styles={tooltipHostStyles} content=\"R/bay/month\" id={tooltipOpenRateId} calloutProps={calloutProps}><Text styles={tableCellStyles}>Open Rate</Text></TooltipHost>\r\n                            <Text styles={tableCellStyles} style={{ width: 50 }}>Covered Bays</Text>\r\n                            <TooltipHost styles={tooltipHostStyles} content=\"R/bay/month\" id={tooltipCoveredRateId} calloutProps={calloutProps}> <Text styles={tableCellStyles} style={{ width: 50 }}>Covered Rate</Text></TooltipHost>\r\n                            <Text styles={tableCellStyles} style={{ width: 50 }}>Shaded Bays</Text>\r\n                            <TooltipHost styles={tooltipHostStyles} content=\"R/bay/month\" id={tooltipShadedRateId} calloutProps={calloutProps}><Text styles={tableCellStyles} style={{ width: 50 }}>Shaded Rate</Text></TooltipHost>\r\n                            <TooltipHost styles={tooltipHostStyles} content=\"bays/100m²\" id={tooltipParkingRatioId} calloutProps={calloutProps}><Text styles={tableCellStyles} style={{ width: 50 }}>Parking Ratio</Text></TooltipHost>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        flexFlow: \"column\",\r\n                        borderTop: \"3px solid rgb(212 236 10 / 42%)\",\r\n                        borderRight: \"3px solid rgb(212 236 10 / 42%)\",\r\n                        borderLeft: \"3px solid rgb(212 236 10 / 42%)\",\r\n                        marginRight: 2,\r\n                        marginLeft: 2,\r\n                    }}>\r\n                        <Text styles={tableHeadingStyles}>Tenant Details</Text>\r\n                        <div style={{ display: \"flex\", flexFlow: \"row\" }}>\r\n                            <Text styles={tableCellTenantStyles} style={{ width: 125, height: 19, marginTop: \"9.5px !important\", marginBottom:9.5 }}>Tenant Name</Text>\r\n                            <Text styles={tableCellTenantStyles} style={{ width: 100 }}>Lease Expiry </Text>\r\n                        </div>\r\n                    </div>\r\n                    <Text style={{ width: 60 }} styles={tableCellNotesStyles}>{`Notes & Features`}</Text>\r\n                </Stack>\r\n            </Stack>\r\n\r\n\r\n            {floorSortedPremises.map(premises => {\r\n\r\n                return (\r\n                    <PremisesListItem key={premises?.premisesId} premises={premises!} propertyId={singleProperty?.propertyId!}> </PremisesListItem>\r\n                )\r\n\r\n            })}\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default PremisesList","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\ImageGalleryModal.tsx",["652","653","654","655","656","657","658","659","660","661","662","663","664","665","666"],"import * as React from 'react';\r\nimport { useId, useBoolean } from '@uifabric/react-hooks';\r\nimport {\r\n  getTheme,\r\n  mergeStyleSets,\r\n  FontWeights,\r\n  ContextualMenu,\r\n  Toggle,\r\n  DefaultButton,\r\n  Modal,\r\n  IDragOptions,\r\n  IconButton,\r\n  IIconProps,\r\n  ILayerProps,\r\n  IModalProps\r\n} from 'office-ui-fabric-react';\r\n\r\nimport { GET_NAV_STATE, } from \"../gql/gql\"\r\nimport { Query, NavigationState } from \"../schematypes/schematypes\"\r\nimport { gql, useQuery, } from '@apollo/client';\r\nimport {navigationState as navigationStateVar} from \"../reactivevariables/reactivevariables\"\r\nimport ImageSlider from \"./ImageSlider\"\r\n\r\ntype Maybe<T> = T | null;\r\nconst cancelIcon: IIconProps = { iconName: 'Cancel' };\r\n\r\ninterface Props {\r\n    propertyId: number;\r\n    showImageGalleryModal: boolean;\r\n    /* imagesArray: Maybe<string>[] */\r\n}\r\n\r\nconst ImageGalleryModal: React.FC<Props> = ({showImageGalleryModal, propertyId}) => {\r\n  const [isModalOpen, { setTrue: showModal, setFalse: hideModal }] = useBoolean(false);\r\n  \r\n  /* const {\r\n    data: navigationStateData,\r\n    loading: navigationLoading,\r\n    error: navigationError\r\n  } = useQuery<Query>(GET_NAV_STATE);\r\n\r\n  \r\nconst navStateQuery =() => {\r\n    const {\r\n        data: navigationStateData,\r\n        loading: navigationLoading,\r\n        error: navigationError\r\n      } = useQuery<Query>(GET_NAV_STATE);\r\n\r\n} */\r\n\r\n\r\n  /* console.log(navigationStateData?.navigationState) */\r\n\r\n  const hideImageGalleryModal = () => {\r\n    navigationStateVar({ ...navigationStateVar(), showImageGalleryModal: false })\r\n}\r\n\r\nconst modalProps: IModalProps = {\r\n    isBlocking: false,\r\n    styles: { main: { maxWidth: 450 } },\r\n  };\r\n\r\n/* const onLayerDidMount: ILayerProps ={\r\n    onLayerDidMount: true\r\n} */\r\n\r\n  // Use useId() to ensure that the IDs are unique on the page.\r\n  // (It's also okay to use plain strings and manually ensure uniqueness.)\r\n  const titleId = useId('ImageGallery');\r\n\r\n  return (\r\n    <div>\r\n      \r\n      <Modal\r\n        titleAriaId={titleId}\r\n        isOpen={showImageGalleryModal}\r\n        onDismiss={hideModal}\r\n        isBlocking={true}\r\n        containerClassName={contentStyles.container}\r\n        /* modalProps={modalProps} */\r\n       /*  layerProps={onLayerDidMount} */\r\n        \r\n      >\r\n        <div className={contentStyles.header}>\r\n          <span id={titleId}>Image Gallery</span>\r\n          <IconButton\r\n            styles={iconButtonStyles}\r\n            iconProps={cancelIcon}\r\n            ariaLabel=\"Close image gallery\"\r\n            onClick={hideImageGalleryModal}\r\n          />\r\n        </div>\r\n        <div className={contentStyles.body}>\r\n        <ImageSlider propertyId={propertyId} ></ImageSlider>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst theme = getTheme();\r\nconst contentStyles = mergeStyleSets({\r\n  container: {\r\n    display: 'flex',\r\n    flexFlow: 'column nowrap',\r\n    alignItems: 'stretch',\r\n  },\r\n  header: [\r\n    \r\n    theme.fonts.xLargePlus,\r\n    {\r\n      flex: '1 1 auto',\r\n      borderTop: `4px solid ${theme.palette.themePrimary}`,\r\n      color: theme.palette.neutralPrimary,\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      fontWeight: FontWeights.semibold,\r\n      padding: '12px 12px 14px 24px',\r\n    },\r\n  ],\r\n  body: {\r\n    flex: '4 4 auto',\r\n    padding: '0 24px 24px 24px',\r\n    overflowY: 'hidden',\r\n    selectors: {\r\n      p: { margin: '14px 0' },\r\n      'p:first-child': { marginTop: 0 },\r\n      'p:last-child': { marginBottom: 0 },\r\n    },\r\n  },\r\n});\r\nconst toggleStyles = { root: { marginBottom: '20px' } };\r\nconst iconButtonStyles = {\r\n  root: {\r\n    color: theme.palette.neutralPrimary,\r\n    marginLeft: 'auto',\r\n    marginTop: '4px',\r\n    marginRight: '2px',\r\n  },\r\n  rootHovered: {\r\n    color: theme.palette.neutralDark,\r\n  },\r\n};\r\n\r\nexport default ImageGalleryModal","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\NewPremisesModal.tsx",["667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698"],"import React, { useState } from 'react';\r\nimport { useId, useBoolean } from '@uifabric/react-hooks';\r\nimport { TextField, ITextFieldStyles } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Dropdown, DropdownMenuItemType, IDropdownOption, IDropdownStyles } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\r\nimport { IStackStyles, Stack } from 'office-ui-fabric-react/lib/Stack';\r\nimport { IRenderFunction, IStyleFunctionOrObject } from 'office-ui-fabric-react/lib/Utilities';\r\nimport {\r\n    getTheme,\r\n    mergeStyleSets,\r\n    FontWeights,\r\n    ContextualMenu,\r\n    Toggle,\r\n    IToggleStyles,\r\n    DefaultButton,\r\n    Modal,\r\n    IDragOptions,\r\n    IconButton,\r\n    IIconProps,\r\n    IModalStyles,\r\n    mergeStyles,\r\n    ComboBox,\r\n    Fabric,\r\n    IComboBoxOption,\r\n    IComboBox,\r\n    SelectableOptionMenuItemType,\r\n    IComboBoxStyles,\r\n    DatePicker,\r\n    DayOfWeek,\r\n    IDatePickerStrings,\r\n    IDatePickerStyleProps,\r\n    IDatePickerStyles,\r\n    ICalendarProps\r\n} from 'office-ui-fabric-react';\r\nimport { Pivot, PivotItem } from 'office-ui-fabric-react/lib/Pivot';\r\nimport { defaultDataIdFromObject, gql, useMutation, useQuery } from '@apollo/client';\r\nimport { GET_SINGLE_PROPERTY, NEW_PREMISES, GET_NAV_STATE } from \"../gql/gql\"\r\nimport { Mutation, MutationPostPremisesArgs, Query, Property } from \"../schematypes/schematypes\"\r\nimport { navigationState } from \"../reactivevariables/reactivevariables\"\r\nimport \"./NewPremisesModal.css\"\r\n\r\n\r\n\r\n\r\nconst dragOptions: IDragOptions = {\r\n    moveMenuItemText: 'Move',\r\n    closeMenuItemText: 'Close',\r\n    menu: ContextualMenu,\r\n};\r\nconst cancelIcon: IIconProps = { iconName: 'Cancel' };\r\nconst saveIcon: IIconProps = { iconName: 'Save' };\r\n\r\ninterface Props {\r\n    propertyId: number;\r\n    showNewPremisesModal: boolean;\r\n}\r\n\r\nexport const NewPremisesModal: React.FC<Props> = ({ showNewPremisesModal, propertyId }) => {\r\n\r\n    const hideNewPremisesModal = () => {\r\n        navigationState({ ...navigationState(), showNewPremisesModal: false })\r\n        setSelectedPremisesType(undefined)\r\n        setSelectedPremisesIndex(undefined)\r\n        setNewPremises({\r\n            floor: \"\",\r\n            area: 0,\r\n            vacant: \"true\",\r\n            type: \"\",\r\n            premisesIndex: 0,\r\n            occupation: getNextMonth(),\r\n            premisesNotes: \"\",\r\n            netRental: 0,\r\n            opCosts: 0,\r\n            other: 0,\r\n            grossRental: 0,\r\n            esc: 0,\r\n            openBays: 0,\r\n            openRate: 0,\r\n            openRatio: 0,\r\n            coveredBays: 0,\r\n            coveredRate: 0,\r\n            coveredRatio: 0,\r\n            shadedBays: 0,\r\n            shadedRate: 0,\r\n            shadedRatio: 0,\r\n            parkingRatio: 0,\r\n            tenantName: \"-\",\r\n            leaseExpiry: getNextMonth(),\r\n            tenantNotes: \"\",\r\n            yard: 0,\r\n            height: 0,\r\n            doors: 0,\r\n            loading: \"\",\r\n            sprinklered: \"\",\r\n            canopies: \"\",\r\n            power: \"\",\r\n        })\r\n\r\n    }\r\n\r\n    const getNextMonth = () => {\r\n        const date = new Date();\r\n        const today = date.getDate();\r\n        const currentMonth = date.getMonth() + 1;\r\n        const currentYear = date.getFullYear();\r\n        var newDate = new Date(currentYear, currentMonth, 1);\r\n        return newDate.toISOString()\r\n\r\n    }\r\n\r\n\r\n    const [newPremises, setNewPremises] = React.useState(\r\n        {\r\n            floor: \"\",\r\n            area: 0,\r\n            vacant: \"true\",\r\n            type: \"\",\r\n            premisesIndex: 0,\r\n            occupation: getNextMonth(),\r\n            premisesNotes: \"\",\r\n            netRental: 0,\r\n            opCosts: 0,\r\n            other: 0,\r\n            grossRental: 0,\r\n            esc: 0,\r\n            openBays: 0,\r\n            openRate: 0,\r\n            openRatio: 0,\r\n            coveredBays: 0,\r\n            coveredRate: 0,\r\n            coveredRatio: 0,\r\n            shadedBays: 0,\r\n            shadedRate: 0,\r\n            shadedRatio: 0,\r\n            parkingRatio: 0,\r\n            tenantName: \"-\",\r\n            leaseExpiry: getNextMonth(),\r\n            tenantNotes: \"\",\r\n            yard: 0,\r\n            height: 0,\r\n            doors: 0,\r\n            loading: \"\",\r\n            sprinklered: \"\",\r\n            canopies: \"\",\r\n            power: \"\",\r\n\r\n        });\r\n\r\n\r\n\r\n    const [postPremises, { data }] = useMutation<Mutation, MutationPostPremisesArgs>(NEW_PREMISES);\r\n\r\n    const saveNewPremises = () => {\r\n\r\n        postPremises({\r\n            variables: {\r\n                propertyId: propertyId,\r\n                floor: newPremises.floor,\r\n                area: newPremises.area,\r\n                vacant: newPremises.vacant,\r\n                type: newPremises.type,\r\n                premisesIndex: newPremises.premisesIndex,\r\n                occupation: newPremises.occupation,\r\n                premisesNotes: newPremises.premisesNotes,\r\n                netRental: newPremises.netRental,\r\n                opCosts: newPremises.opCosts,\r\n                other: newPremises.other,\r\n                grossRental: newPremises.grossRental,\r\n                esc: newPremises.esc,\r\n                openBays: newPremises.openBays,\r\n                openRate: newPremises.openRate,\r\n                coveredBays: newPremises.coveredBays,\r\n                coveredRate: newPremises.coveredRate,\r\n                shadedBays: newPremises.shadedBays,\r\n                shadedRate: newPremises.shadedRate,\r\n                parkingRatio: newPremises.parkingRatio,\r\n                tenantName: newPremises.tenantName,\r\n                leaseExpiry: newPremises.leaseExpiry,\r\n                tenantNotes: newPremises.tenantNotes,\r\n                yard: newPremises.yard,\r\n                height: newPremises.height,\r\n                doors: newPremises.doors,\r\n                loading: newPremises.loading,\r\n                sprinklered: newPremises.sprinklered,\r\n                canopies: newPremises.canopies,\r\n                power: newPremises.power,\r\n            },\r\n\r\n            update(cache, { data }) {\r\n\r\n                if (!data) {\r\n                    return null;\r\n                }\r\n\r\n                const getExistingProperty = cache.readQuery<Query>({ query: GET_SINGLE_PROPERTY, variables: { propertyId: propertyId } })\r\n                const existingProperty: Property = getExistingProperty ? getExistingProperty.singleProperty! : { propertyId: 1, propertyName: \"\" };\r\n\r\n                const existingPremises = getExistingProperty ? getExistingProperty.singleProperty?.premisesList : [];\r\n                const newPremises = [...existingPremises!, data.postPremises]\r\n\r\n                const newProperty = { ...existingProperty, premisesList: newPremises }\r\n                if (existingPremises)\r\n                    cache.writeQuery<Query>({\r\n                        query: GET_SINGLE_PROPERTY,\r\n                        variables: { propertyId: propertyId },\r\n                        data: { singleProperty: newProperty }\r\n                    });\r\n            }\r\n\r\n\r\n        })\r\n        hideNewPremisesModal()\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /* const [isModalOpen, { setTrue: showModal, setFalse: hideModal }] = useBoolean(false);\r\n    const [isDraggable, { toggle: toggleIsDraggable }] = useBoolean(false); */\r\n\r\n    // Use useId() to ensure that the IDs are unique on the page.\r\n    // (It's also okay to use plain strings and manually ensure uniqueness.)\r\n\r\n\r\n    const textFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldFloorStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldAreaStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 150, marginRight: 20 } };\r\n    const textFieldEscStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 150, marginRight: 20 } };\r\n    const textFieldYardStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 125, marginRight: 20 } };\r\n    const textFieldPowerStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldCoordinatesStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 150, marginRight: 20 } };\r\n    const textFieldErfStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200, marginRight: 20 } };\r\n    const textFieldNotesStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 470 } };\r\n    const dropdownStyles: Partial<IDropdownStyles> = { dropdown: { width: 125, marginRight: 20 } };\r\n    const dropdownSectorStyles: Partial<IDropdownStyles> = { dropdown: { width: 420, marginRight: 20 } };\r\n    const dropdownProvinceStyles: Partial<IDropdownStyles> = { dropdown: { width: 140, marginRight: 20 } };\r\n    const comboBoxStyles: Partial<IComboBoxStyles> = { root: { width: 140, marginRight: 20 } }\r\n\r\n    const toggleStyles: Partial<IToggleStyles> = { container: { marginTop: 5 }, label: { marginLeft: 4 } };\r\n    const modalStyles: Partial<IModalStyles> = { main: { position: \"absolute\", top: 150 }, };\r\n\r\n    const textFieldParkingBaysStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 100, marginRight: 20 } };\r\n    const textFieldParkingRateStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 185, marginRight: 20 } };\r\n    const textFieldParkingRatioStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 140, marginRight: 20 } };\r\n\r\n    const datePickerStyles: IStyleFunctionOrObject<IDatePickerStyleProps, IDatePickerStyles> = { root: { width: 160, marginRight: 20 }, callout: {} }\r\n\r\n    /* const calendarProps: ICalendarProps ={styles  } */\r\n\r\n\r\n\r\n    const headerIconStackStyles: Partial<IStackStyles> = { root: { marginRight: 0, marginLeft: \"auto\", } }\r\n\r\n    const DayPickerStrings: IDatePickerStrings = {\r\n        months: [\r\n            'January',\r\n            'February',\r\n            'March',\r\n            'April',\r\n            'May',\r\n            'June',\r\n            'July',\r\n            'August',\r\n            'September',\r\n            'October',\r\n            'November',\r\n            'December',\r\n        ],\r\n\r\n        shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n\r\n        days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n\r\n        shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\r\n\r\n        goToToday: 'Go to today',\r\n        prevMonthAriaLabel: 'Go to previous month',\r\n        nextMonthAriaLabel: 'Go to next month',\r\n        prevYearAriaLabel: 'Go to previous year',\r\n        nextYearAriaLabel: 'Go to next year',\r\n        closeButtonAriaLabel: 'Close date picker',\r\n        monthPickerHeaderAriaLabel: '{0}, select to change the year',\r\n        yearPickerHeaderAriaLabel: '{0}, select to change the month',\r\n    };\r\n\r\n    const controlClass = mergeStyleSets({\r\n        control: {\r\n            margin: '0 0 15px 0',\r\n            maxWidth: '300px',\r\n        },\r\n\r\n    });\r\n\r\n    const premisesTypeOptions = [\r\n\r\n        { key: 'Office', text: 'Office' },\r\n        { key: 'Warehouse', text: 'Warehouse' },\r\n        { key: 'Retail', text: 'Retail' },\r\n        { key: 'Stores', text: 'Stores' },\r\n        { key: 'Balcony', text: 'Balcony' },\r\n    ];\r\n\r\n    const premisesIndexOptions = [\r\n\r\n        { key: '1', text: '1' },\r\n        { key: '2', text: '2' },\r\n        { key: '3', text: '3' },\r\n        { key: '4', text: '5' },\r\n        { key: '5', text: '5' },\r\n        { key: '6', text: '6' },\r\n    ];\r\n\r\n\r\n\r\n    const [selectedPremisesType, setSelectedPremisesType] = React.useState<IDropdownOption>();\r\n    const [selectedPremisesIndex, setSelectedPremisesIndex] = React.useState<IDropdownOption>();\r\n\r\n\r\n\r\n    const onChangePremisesType = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        if (item !== undefined) {\r\n            setSelectedPremisesType(item);\r\n            setNewPremises({ ...newPremises, type: item.text });\r\n        }\r\n    };\r\n\r\n    const onChangePremisesIndex = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        if (item !== undefined) {\r\n            setSelectedPremisesIndex(item);\r\n            setNewPremises({ ...newPremises, premisesIndex: parseInt(item.text) });\r\n        }\r\n    };\r\n\r\n\r\n    const stackTokens = { childrenGap: 15 };\r\n\r\n\r\n\r\n    const onChangeFloor = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, floor: newValue || '' });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeArea = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            console.log(newValue)\r\n            setNewPremises({ ...newPremises, area: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n\r\n    const handleChecked = () => {\r\n        if (newPremises.vacant === \"false\") {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n\r\n    }\r\n\r\n    const onChangeVacantToggle = React.useCallback(\r\n        (ev: React.MouseEvent<HTMLElement>, checked: boolean | undefined) => {\r\n            if (newPremises.vacant === \"false\") {\r\n                setNewPremises({ ...newPremises, vacant: \"true\" });\r\n\r\n            } else {\r\n                setNewPremises({ ...newPremises, vacant: \"false\" });\r\n            }\r\n        },\r\n        [newPremises])\r\n\r\n    const onSelectOccupationDate = React.useCallback(\r\n        (date: Date | null | undefined) => {\r\n            if (date !== undefined && date !== null)\r\n                setNewPremises({ ...newPremises, occupation: date.toISOString() });\r\n        },\r\n        [newPremises])\r\n\r\n    const onFormatDate = (date?: Date): string => {\r\n        return !date ? '' : date.toLocaleDateString(\r\n            'en-gb',\r\n            {\r\n                year: 'numeric',\r\n                month: 'long',\r\n                day: 'numeric'\r\n            }\r\n        );\r\n    };\r\n\r\n\r\n\r\n    const onChangePremisesNotes = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, premisesNotes: newValue || '' });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeNetRental = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, netRental: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeOpCosts = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, opCosts: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeOther = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, other: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeGrossRental = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, grossRental: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeEsc = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, esc: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const getOpenBays = (ratio: number) => {\r\n        return (ratio * (newPremises.area / 100))\r\n    }\r\n\r\n    const getOpenRatio = (bays: number) => {\r\n        return (bays / (newPremises.area/100 ))\r\n    }\r\n\r\n    const getCoveredBays = (ratio: number) => {\r\n        return (ratio * (newPremises.area / 100))\r\n    }\r\n\r\n    const getCoveredRatio = (bays: number) => {\r\n        return (bays / (newPremises.area/100 ))\r\n    }\r\n\r\n    const getShadedBays = (ratio: number) => {\r\n        return (ratio * (newPremises.area / 100))\r\n    }\r\n\r\n    const getShadedRatio = (bays: number) => {\r\n        return (bays / (newPremises.area/100 ))\r\n    }\r\n\r\n\r\n    const onChangeOpenBays = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, openBays: parseFloat(newValue!) || 0, openRatio: getOpenRatio(parseFloat(newValue!)) } );\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeOpenRate = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, openRate: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n   \r\n    const onChangeOpenRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, openRatio: parseFloat(newValue!) || 0, openBays: getOpenBays(parseFloat(newValue!)) });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeCoveredBays = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, coveredBays: parseFloat(newValue!) || 0, coveredRatio: getCoveredRatio(parseFloat(newValue!)) } );\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeCoveredRate = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, coveredRate: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeCoveredRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, coveredRatio: parseFloat(newValue!) || 0, coveredBays: getCoveredBays(parseFloat(newValue!)) });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeShadedBays = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, shadedBays: parseFloat(newValue!) || 0, shadedRatio: getShadedRatio(parseFloat(newValue!)) } );\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeShadedRate = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, shadedRate: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeShadedRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, shadedRatio: parseFloat(newValue!) || 0, shadedBays: getShadedBays(parseFloat(newValue!)) });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeParkingRatio = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, parkingRatio: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeTenantName = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, tenantName: newValue || '' });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onSelectLeaseExpiry = React.useCallback(\r\n        (date: Date | null | undefined) => {\r\n            if (date !== undefined && date !== null)\r\n                setNewPremises({ ...newPremises, leaseExpiry: date.toISOString() });\r\n        },\r\n        [newPremises])\r\n\r\n    const onChangeTenantNotes = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, tenantNotes: newValue || '' });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeYard = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, yard: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeHeight = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, height: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeDoors = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, doors: parseFloat(newValue!) || 0 });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeLoading = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, loading: newValue || '' });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeSprinklered = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, sprinklered: newValue || '' });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangeCanopies = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, canopies: newValue || '' });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n    const onChangePower = React.useCallback(\r\n        (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n            setNewPremises({ ...newPremises, power: newValue || '' });\r\n        },\r\n        [newPremises],\r\n    );\r\n\r\n\r\n    const [selectedKey, setSelectedKey] = React.useState('Premises Details');\r\n\r\n    const handleLinkClick = (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => {\r\n\r\n        setSelectedKey(item!.props.itemKey!);\r\n    };\r\n\r\n    const getTabId = (itemKey: string | undefined) => {\r\n        return `NewPremisesPivot_${itemKey}`;\r\n    };\r\n\r\n    const titleId = useId('New Premises');\r\n\r\n\r\n    const newPremisesTab = () => {\r\n\r\n        switch (selectedKey) {\r\n            case \"Premises Details\":\r\n                return (\r\n                    <>\r\n                        <Stack horizontal /* style={{marginLeft: 50}} */\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"0px\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Floor/Unit\"\r\n                                value={newPremises.floor}\r\n                                onChange={onChangeFloor}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                            />\r\n                            <TextField\r\n                                label=\"Area\"\r\n                                type=\"number\"\r\n                                value={newPremises.area === 0 ? \"\" : String(newPremises.area)}\r\n                                onChange={onChangeArea}\r\n                                styles={textFieldAreaStyles}\r\n                                suffix=\"m²\"\r\n                            />\r\n\r\n                            <Toggle styles={toggleStyles} label=\"Vacant?\" checked={handleChecked()} onChange={onChangeVacantToggle} />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                /* width: '400px', */\r\n                                /*  margin: '10px', */\r\n\r\n                                color: '#605e5c',\r\n\r\n                                marginLeft: \"0px\",\r\n                                marginRight: \"auto\",\r\n                                /* display: \"block\" */\r\n\r\n                            }\r\n\r\n                        }}>\r\n\r\n                            <Dropdown\r\n                                label=\"Premises Type\"\r\n                                selectedKey={selectedPremisesType ? selectedPremisesType.key : undefined}\r\n                                // eslint-disable-next-line react/jsx-no-bind\r\n                                onChange={onChangePremisesType}\r\n                                placeholder=\"Select type\"\r\n                                options={premisesTypeOptions}\r\n                                styles={dropdownStyles}\r\n                            />\r\n\r\n                            <Dropdown\r\n                                label=\"Premises Index\"\r\n                                selectedKey={selectedPremisesIndex ? selectedPremisesIndex.key : undefined}\r\n                                // eslint-disable-next-line react/jsx-no-bind\r\n                                onChange={onChangePremisesIndex}\r\n                                placeholder=\"Select index\"\r\n                                options={premisesIndexOptions}\r\n                                styles={dropdownStyles}\r\n                            />\r\n\r\n                            <DatePicker\r\n                                label=\"Occupation Date\"\r\n                                className={controlClass.control}\r\n                                firstDayOfWeek={DayOfWeek.Monday}\r\n                                strings={DayPickerStrings}\r\n                                placeholder=\"Select a date...\"\r\n                                ariaLabel=\"Select a date\"\r\n                                value={new Date(newPremises.occupation)}\r\n                                onSelectDate={onSelectOccupationDate}\r\n                                formatDate={onFormatDate}\r\n                                styles={datePickerStyles}\r\n\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal>\r\n\r\n                            <TextField\r\n                                label=\"Premises Notes\"\r\n                                value={newPremises.premisesNotes}\r\n                                onChange={onChangePremisesNotes}\r\n                                styles={textFieldNotesStyles}\r\n                                multiline\r\n                                autoAdjustHeight\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n            case \"Rental Details\":\r\n\r\n                return (\r\n                    <>\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Net Rental\"\r\n                                type=\"number\"\r\n                                value={newPremises.netRental === 0 ? \"\" : String(newPremises.netRental)}\r\n                                onChange={onChangeNetRental}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Op Costs\"\r\n                                type=\"number\"\r\n                                value={newPremises.opCosts === 0 ? \"\" : String(newPremises.opCosts)}\r\n                                onChange={onChangeOpCosts}\r\n                                styles={textFieldFloorStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Other\"\r\n                                type=\"number\"\r\n                                value={newPremises.other === 0 ? \"\" : String(newPremises.other)}\r\n                                onChange={onChangeOther}\r\n                                styles={textFieldFloorStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Gross Rental\"\r\n                                type=\"number\"\r\n                                value={newPremises.grossRental === 0 ? \"\" : String(newPremises.grossRental)}\r\n                                onChange={onChangeGrossRental}\r\n                                styles={textFieldFloorStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/m²/month\"\r\n                            />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n\r\n\r\n                            <TextField\r\n                                label=\"Esc\"\r\n                                type=\"number\"\r\n                                value={newPremises.esc === 0 ? \"\" : String(newPremises.esc)}\r\n                                onChange={onChangeEsc}\r\n                                styles={textFieldEscStyles}\r\n                                suffix=\"% per annum\"\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n            case \"Parking Details\":\r\n\r\n                return (\r\n                    <>\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Open Bays\"\r\n                                type=\"number\"\r\n                                value={newPremises.openBays === 0 ? \"\" : String(newPremises.openBays)}\r\n                                onChange={onChangeOpenBays}\r\n                                styles={textFieldParkingBaysStyles}\r\n                                suffix=\"bays\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Open Rate\"\r\n                                type=\"number\"\r\n                                value={newPremises.openRate === 0 ? \"\" : String(newPremises.openRate)}\r\n                                onChange={onChangeOpenRate}\r\n                                styles={textFieldParkingRateStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/bay/month\"\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Open Ratio\"\r\n                                type=\"number\"\r\n                                value={newPremises.openRatio === 0 ? \"\" : String(newPremises.openRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeOpenRatio}\r\n                                styles={textFieldParkingRatioStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n                            <TextField\r\n                                label=\"Covered Bays\"\r\n                                type=\"number\"\r\n                                value={newPremises.coveredBays === 0 ? \"\" : String(newPremises.coveredBays)}\r\n                                onChange={onChangeCoveredBays}\r\n                                styles={textFieldParkingBaysStyles}\r\n                                suffix=\"bays\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Covered Rate\"\r\n                                type=\"number\"\r\n                                value={newPremises.coveredRate === 0 ? \"\" : String(newPremises.coveredRate)}\r\n                                onChange={onChangeCoveredRate}\r\n                                styles={textFieldParkingRateStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/bay/month\"\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Covered Ratio\"\r\n                                type=\"number\"\r\n                                value={newPremises.coveredRatio === 0 ? \"\" : String(newPremises.coveredRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeCoveredRatio}\r\n                                styles={textFieldParkingRatioStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n\r\n\r\n                            <TextField\r\n                                label=\"Shaded Bays\"\r\n                                type=\"number\"\r\n                                value={newPremises.shadedBays === 0 ? \"\" : String(newPremises.shadedBays)}\r\n                                onChange={onChangeShadedBays}\r\n                                styles={textFieldParkingBaysStyles}\r\n                                suffix=\"bays\"\r\n                            />\r\n                            <TextField\r\n                                label=\"Shaded Rate\"\r\n                                type=\"number\"\r\n                                value={newPremises.shadedRate === 0 ? \"\" : String(newPremises.shadedRate)}\r\n                                onChange={onChangeShadedRate}\r\n                                styles={textFieldParkingRateStyles}\r\n                                prefix=\"R\"\r\n                                suffix=\"/bay/month\"\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Shaded Ratio\"\r\n                                type=\"number\"\r\n                                value={newPremises.shadedRatio === 0 ? \"\" : String(newPremises.shadedRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeShadedRatio}\r\n                                styles={textFieldParkingRatioStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n                        </Stack>\r\n                        <Stack horizontal\r\n                            styles={{\r\n                                root: {\r\n                                    /* width: '400px', */\r\n                                    /*  margin: '10px', */\r\n\r\n                                    color: '#605e5c',\r\n\r\n                                    marginLeft: \"auto\",\r\n                                    marginRight: \"auto\",\r\n                                    /* display: \"block\" */\r\n\r\n                                }\r\n                            }}>\r\n\r\n\r\n                            <TextField\r\n                                label=\"Overall Parking Ratio\"\r\n                                type=\"number\"\r\n                                value={newPremises.parkingRatio === 0 ? \"\" : String(newPremises.parkingRatio.toFixed(1).replace(/[.,]0$/, \"\"))}\r\n                                onChange={onChangeParkingRatio}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                                suffix=\"bays/100m²\"\r\n                            />\r\n\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n            case \"Industrial Features\":\r\n\r\n                return (\r\n                    <>\r\n\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                color: '#605e5c',\r\n                                marginLeft: \"auto\",\r\n                                marginRight: \"auto\",\r\n                            }\r\n                        }}>\r\n\r\n                            <TextField\r\n                                label=\"Yard Size\"\r\n                                value={newPremises.yard === 0 ? \"\" : String(newPremises.yard)}\r\n                                onChange={onChangeYard}\r\n                                styles={textFieldYardStyles}\r\n                                suffix=\"m²\"\r\n\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Floor to Eave Height\"\r\n                                value={newPremises.height === 0 ? \"\" : String(newPremises.height)}\r\n                                onChange={onChangeHeight}\r\n                                styles={textFieldYardStyles}\r\n                                suffix=\"m\"\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"No of Doors\"\r\n                                value={newPremises.doors === 0 ? \"\" : String(newPremises.doors)}\r\n                                onChange={onChangeDoors}\r\n                                styles={textFieldYardStyles}\r\n\r\n                            />\r\n\r\n\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                color: '#605e5c',\r\n                                marginLeft: \"auto\",\r\n                                marginRight: \"auto\",\r\n                            }\r\n                        }}>\r\n\r\n                            <TextField\r\n                                label=\"Loading Type\"\r\n                                value={newPremises.loading === \"\" ? \"\" : newPremises.loading}\r\n                                onChange={onChangeLoading}\r\n                                styles={textFieldPowerStyles}\r\n\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Sprinkler Type\"\r\n                                value={newPremises.sprinklered === \"\" ? \"\" : newPremises.sprinklered}\r\n                                onChange={onChangeSprinklered}\r\n                                styles={textFieldPowerStyles}\r\n\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                color: '#605e5c',\r\n                                marginLeft: \"auto\",\r\n                                marginRight: \"auto\",\r\n                            }\r\n                        }}>\r\n\r\n                            <TextField\r\n                                label=\"Canopy Details\"\r\n                                value={newPremises.canopies === \"\" ? \"\" : newPremises.canopies}\r\n                                onChange={onChangeCanopies}\r\n                                styles={textFieldPowerStyles}\r\n\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Power\"\r\n                                value={newPremises.power === \"\" ? \"\" : newPremises.power}\r\n                                onChange={onChangePower}\r\n                                styles={textFieldPowerStyles}\r\n\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n\r\n            case \"Tenant Details\":\r\n\r\n                return (\r\n                    <>\r\n\r\n\r\n                        <Stack horizontal styles={{\r\n                            root: {\r\n                                /* width: '400px', */\r\n                                /*  margin: '10px', */\r\n\r\n                                color: '#605e5c',\r\n\r\n                                marginLeft: \"0px\",\r\n                                marginRight: \"auto\",\r\n                                /* display: \"block\" */\r\n\r\n                            }\r\n\r\n                        }}>\r\n\r\n                            <TextField\r\n                                label=\"Tenant Name\"\r\n                                value={newPremises.tenantName === \"-\" ? \"\" : newPremises.tenantName}\r\n                                onChange={onChangeTenantName}\r\n                                styles={textFieldFloorStyles}\r\n\r\n                            />\r\n\r\n                            <DatePicker\r\n                                label=\"Lease Expiry Date\"\r\n                                className={controlClass.control}\r\n                                firstDayOfWeek={DayOfWeek.Monday}\r\n                                strings={DayPickerStrings}\r\n                                placeholder=\"Select a date...\"\r\n                                ariaLabel=\"Select a date\"\r\n                                value={new Date(newPremises.leaseExpiry)}\r\n                                onSelectDate={onSelectLeaseExpiry}\r\n                                formatDate={onFormatDate}\r\n                                styles={datePickerStyles}\r\n\r\n                            />\r\n\r\n                        </Stack>\r\n\r\n                        <Stack horizontal>\r\n\r\n                            <TextField\r\n                                label=\"Tenant Notes\"\r\n                                value={newPremises.tenantNotes}\r\n                                onChange={onChangeTenantNotes}\r\n                                styles={textFieldNotesStyles}\r\n                                multiline\r\n                                autoAdjustHeight\r\n                            />\r\n\r\n                        </Stack>\r\n                    </>\r\n                )\r\n\r\n\r\n            default:\r\n            // code block\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <Modal\r\n                styles={modalStyles}\r\n\r\n                titleAriaId={titleId}\r\n                isOpen={showNewPremisesModal}\r\n                /* onDismiss={hideNewPremisesModal} */\r\n                isBlocking={false}\r\n                containerClassName={contentStyles.container}\r\n            /* dragOptions={dragOptions} */\r\n            >\r\n                <div className={contentStyles.header}>\r\n                    <span id={titleId}>New Premises</span>\r\n                    <Stack horizontal\r\n                        styles={headerIconStackStyles}\r\n                    >\r\n\r\n                        <IconButton\r\n                            styles={iconButtonStyles}\r\n                            iconProps={saveIcon}\r\n                            ariaLabel=\"Save Premises\"\r\n                            onClick={saveNewPremises}\r\n                        />\r\n                        <IconButton\r\n                            styles={iconButtonStyles}\r\n                            iconProps={cancelIcon}\r\n                            ariaLabel=\"Close popup modal\"\r\n                            onClick={hideNewPremisesModal}\r\n                        />\r\n\r\n                    </Stack>\r\n\r\n                </div>\r\n                <div className={contentStyles.body} >\r\n\r\n                    <Stack tokens={stackTokens}>\r\n\r\n                        <Pivot\r\n                            aria-label=\"Separately Rendered Content Pivot Example\"\r\n                            selectedKey={selectedKey}\r\n                            // eslint-disable-next-line react/jsx-no-bind\r\n                            onLinkClick={handleLinkClick}\r\n                            headersOnly={true}\r\n                            getTabId={getTabId}\r\n                            styles={{ link: {/* padding:0, margin:0, fontSize:14 */  marginRight: 20 }, linkIsSelected: {/* padding:0, margin:0, fontSize:14 */marginRight: 20 }, root: { marginLeft: \"auto\", marginRight: \"auto\" } }}\r\n                        >\r\n                            <PivotItem headerText=\"Premises\" itemKey=\"Premises Details\" />\r\n                            <PivotItem headerText=\"Rental\" itemKey=\"Rental Details\" />\r\n                            <PivotItem headerText=\"Parking\" itemKey=\"Parking Details\" />\r\n                            <PivotItem headerText=\"Industrial\" itemKey=\"Industrial Features\" />\r\n                            <PivotItem headerText=\"Tenant\" itemKey=\"Tenant Details\" />\r\n                        </Pivot>\r\n\r\n                        {newPremisesTab()}\r\n\r\n\r\n\r\n\r\n\r\n                    </Stack>\r\n\r\n\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst theme = getTheme();\r\nconst contentStyles = mergeStyleSets({\r\n    container: {\r\n        display: 'flex',\r\n        flexFlow: 'column nowrap',\r\n        alignItems: 'stretch',\r\n        width: 525,\r\n\r\n    },\r\n\r\n    header: [\r\n\r\n        theme.fonts.xLargePlus,\r\n        {\r\n            flex: '1 1 auto',\r\n            borderTop: `4px solid ${theme.palette.themePrimary}`,\r\n            color: theme.palette.neutralPrimary,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            fontWeight: FontWeights.semibold,\r\n            padding: '12px 12px 14px 24px',\r\n        },\r\n    ],\r\n    body: {\r\n        flex: '4 4 auto',\r\n        padding: '0 24px 24px 24px',\r\n        overflowY: 'hidden',\r\n        selectors: {\r\n            p: { margin: '14px 0' },\r\n            'p:first-child': { marginTop: 0 },\r\n            'p:last-child': { marginBottom: 0 },\r\n        },\r\n    },\r\n});\r\n\r\nconst iconButtonStyles = {\r\n    root: {\r\n        color: theme.palette.neutralPrimary,\r\n        marginLeft: \"10px !important\",\r\n        marginTop: '4px',\r\n        marginRight: '2px',\r\n\r\n    },\r\n    rootHovered: {\r\n        color: theme.palette.neutralDark,\r\n    },\r\n    icon: {\r\n        fontSize: \"24px\",\r\n\r\n    }\r\n};\r\n\r\nexport default NewPremisesModal\r\n","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\Map.tsx",["699","700","701","702","703"],"import React, { useState, useEffect } from 'react';\r\nimport MapGL, { Marker, NavigationControl } from 'react-map-gl';\r\nimport Pin from \"../assets/pin\";\r\nimport { Dropdown, DropdownMenuItemType, IDropdownOption, IDropdownStyles } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport {\r\n    FontWeights,\r\n    Text,\r\n    IconButton,\r\n    getTheme,\r\n    IIconProps\r\n    \r\n} from 'office-ui-fabric-react';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { UPDATE_COORDINATES, GET_SINGLE_PROPERTY } from \"../gql/gql\"\r\nimport { Mutation, MutationUpdatePropertyArgs, Query } from \"../schematypes/schematypes\"\r\n\r\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\r\n\r\ninterface Props {\r\n    coordinatesArray: string[] | undefined,\r\n    propertyId: number,\r\n    contactId: number\r\n}\r\n\r\nexport const Map: React.FC<Props> = ({ coordinatesArray, propertyId, contactId }) => {\r\n\r\n    const [updateProperty, { data }] = useMutation<Mutation, MutationUpdatePropertyArgs>(UPDATE_COORDINATES);\r\n\r\n    const saveUpdatedCoordinates = () => {\r\n\r\n        updateProperty({\r\n            variables: {\r\n                contactId: contactId,\r\n                propertyId: propertyId,\r\n                coordinates: `${marker.latitude},${marker.longitude}`\r\n            },\r\n\r\n            update(cache, { data }) {\r\n\r\n                if (!data) {\r\n                    return null;\r\n                }\r\n\r\n                const getExistingProperty = cache.readQuery<Query>({ query: GET_SINGLE_PROPERTY, variables: { propertyId: propertyId } })\r\n\r\n                const updatedProperty = data.updateProperty!;\r\n                console.log(updatedProperty)\r\n                if (getExistingProperty)\r\n                    cache.writeQuery<Query>({\r\n                        query: GET_SINGLE_PROPERTY,\r\n                        variables: { propertyId: propertyId },\r\n                        data: { singleProperty: updatedProperty }\r\n                    });\r\n            }\r\n        })\r\n       \r\n        \r\n    }\r\n\r\n\r\n    var latitude = -33.973564350686324\r\n    var longitude = 18.456012615707248\r\n\r\n    console.log(coordinatesArray)\r\n\r\n    if (coordinatesArray !== undefined && coordinatesArray !== null && isNaN(Number(coordinatesArray[0])) === false && isNaN(Number(coordinatesArray[1])) === false) {\r\n        latitude = Number(coordinatesArray[0])\r\n        longitude = Number(coordinatesArray[1])\r\n    } else {\r\n        latitude = -33.973564350686324\r\n        longitude = 18.456012615707248\r\n\r\n    }\r\n\r\n    const navStyle: any = {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        padding: '10px'\r\n    };\r\n\r\n    const dropdownStyle: any = {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        right: 0,\r\n        padding: '10px'\r\n    };\r\n\r\n    const coordinatesStyle: any = {\r\n        position: \"absolute\",\r\n        bottom: 0,\r\n        left: \"35%\",\r\n        margin: 10,\r\n        paddingLeft: '5px',\r\n        border: \"1px solid\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"white\"\r\n    };\r\n\r\n    const theme = getTheme();\r\n    const saveIconStyles = {\r\n        root: {\r\n            color: theme.palette.neutralPrimary,\r\n             marginLeft: 5,\r\n             \r\n\r\n        },\r\n        rootHovered: {\r\n            color: theme.palette.neutralDark,\r\n        },\r\n        icon: {\r\n            fontSize: \"16px\",\r\n\r\n        }\r\n    };\r\n\r\n    const saveIcon: IIconProps = { iconName: 'Save' };\r\n\r\n    const [viewport, setViewport] = useState({\r\n        width: 600,\r\n        height: 400,\r\n        latitude: latitude,\r\n        longitude: longitude,\r\n        zoom: 15\r\n    });\r\n\r\n\r\n    const [marker, setMarker] = useState({\r\n        latitude: latitude,\r\n        longitude: longitude\r\n    });\r\n\r\n\r\n\r\n    const handleDragEnd: any | undefined = (event: any) => {\r\n\r\n        setMarker({\r\n            longitude: event.lngLat[0],\r\n            latitude: event.lngLat[1]\r\n        })\r\n    }\r\n\r\n    const mapTypeOptions = [\r\n\r\n        { key: \"mapbox://styles/mapbox/outdoors-v11\", text: 'Default' },\r\n        { key: \"mapbox://styles/mapbox/satellite-streets-v11\", text: 'Satelite' },\r\n    \r\n    ];\r\n\r\n\r\n\r\n    const [selectedMapType, setSelectedMapType] = React.useState<IDropdownOption>({ key: \"mapbox://styles/mapbox/outdoors-v11\", text: 'Default' });\r\n\r\n\r\n\r\n    const onChangeMapType = (event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void => {\r\n        if (item !== undefined) {\r\n            setSelectedMapType(item);\r\n           \r\n        }\r\n    };\r\n\r\n    const dropdownStyles: Partial<IDropdownStyles> = { dropdown: { width: 100, marginRight: 5 } };\r\n\r\n    return (\r\n        <MapGL\r\n            {...viewport}\r\n            /* width=\"100%\"\r\n            height=\"100%\" */\r\n            mapStyle={String(selectedMapType.key)}\r\n            onViewportChange={setViewport}\r\n            mapboxApiAccessToken={MAPBOX_TOKEN}\r\n        >\r\n            <Marker\r\n                longitude={marker.longitude}\r\n                latitude={marker.latitude}\r\n                offsetTop={-20}\r\n                offsetLeft={-10}\r\n                draggable\r\n                /* onDragStart={this._onMarkerDragStart}\r\n                onDrag={this._onMarkerDrag} */\r\n                onDragEnd={handleDragEnd}\r\n            >\r\n                <Pin size={20} />\r\n            </Marker>\r\n\r\n            <div className=\"nav\" style={navStyle}>\r\n                <NavigationControl onViewportChange={setViewport} />\r\n            </div>\r\n\r\n            <div className=\"dropdown\" style={dropdownStyle}>\r\n            <Dropdown\r\n                                \r\n                                selectedKey={selectedMapType ? selectedMapType.key : undefined}\r\n                                // eslint-disable-next-line react/jsx-no-bind\r\n                                onChange={onChangeMapType}\r\n                                placeholder=\"Select type\"\r\n                                options={mapTypeOptions}\r\n                                styles={dropdownStyles}\r\n                            />\r\n            </div>\r\n\r\n            <div className=\"coordinates\" style={coordinatesStyle}>\r\n                \r\n                <Text>{`${marker.latitude.toFixed(4)} ,${marker.longitude.toFixed(4)}`}</Text>\r\n                <IconButton\r\n                    styles={saveIconStyles}\r\n                    iconProps={saveIcon}\r\n                    ariaLabel=\"Close panel\"\r\n                    onClick={saveUpdatedCoordinates}\r\n                />\r\n            </div>\r\n\r\n            \r\n\r\n\r\n        </MapGL>\r\n\r\n    );\r\n}\r\n\r\nexport default Map;","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PropertyListItem.tsx",["704","705","706","707","708","709","710","711","712","713","714","715","716","717","718"],"import * as React from 'react';\r\nimport { getTheme } from '@fluentui/react';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\r\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\r\nimport { Checkbox, ICheckboxProps } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { Query, Property, Mutation, MutationDeletePropertyArgs } from \"../schematypes/schematypes\"\r\nimport { GET_SELECTED_PROPERTIES, GET_PROPERTIES, DELETE_PROPERTY } from \"../gql/gql\"\r\nimport { gql, useMutation, useQuery } from '@apollo/client';\r\nimport { selectedPropertyList } from \"../reactivevariables/reactivevariables\"\r\nimport { mergeStyles, registerIcons } from 'office-ui-fabric-react/lib/Styling';\r\nimport { CommandBarButton, IContextualMenuProps, Stack, Text, FontWeights, IconButton, IIconProps, IStackStyles, initializeIcons, DefaultButton, FocusTrapCallout, FocusZone, PrimaryButton, mergeStyleSets, } from 'office-ui-fabric-react';\r\nimport { useBoolean } from '@uifabric/react-hooks';\r\nimport { IndustrialIcon, RetailIcon, OfficeIcon, MixedUseIcon } from \"../assets/svgIcons.js\"\r\nimport { FontIcon } from 'office-ui-fabric-react/lib/Icon';\r\nimport {navigationState} from \"../reactivevariables/reactivevariables\"\r\nimport \"./PropertyListItem.css\"\r\n\r\n\r\ninterface Props {\r\n  property: Property\r\n  key: any\r\n}\r\n\r\nexport const PropertyListItem: React.FunctionComponent<Props> = ({ property }) => {\r\n\r\n  registerIcons({\r\n    icons: {\r\n      'office': <OfficeIcon></OfficeIcon>,\r\n      'industrial': <IndustrialIcon></IndustrialIcon>,\r\n      'retail': <RetailIcon></RetailIcon>,\r\n      'mixeduse': <MixedUseIcon></MixedUseIcon>\r\n    }\r\n  })\r\n\r\n\r\n\r\n  const [isDeleteCalloutVisible, { toggle: toggleIsDeleteCalloutVisible }] = useBoolean(false);\r\n\r\n  const {\r\n    data,\r\n    loading,\r\n    error\r\n  } = useQuery<Query>(GET_SELECTED_PROPERTIES);\r\n\r\n\r\n\r\n\r\n\r\n var selectedProperties = data!.selectedPropertyList!\r\n\r\n  \r\n\r\n\r\n  const onCheckProperty = React.useCallback((): void => {\r\n\r\n    const found = !!selectedPropertyList().find((t) => t.propertyId === property.propertyId);\r\n\r\n    \r\n    if (found) {\r\n      selectedPropertyList(\r\n        selectedProperties.filter((t) => t.propertyId !== property.propertyId)\r\n      )\r\n    } else {\r\n      selectedPropertyList(\r\n        selectedProperties.concat(property)\r\n      )\r\n    }\r\n\r\n  }, [selectedProperties]);\r\n\r\n  var isChecked = () => {\r\n    const found = !!selectedProperties.find((t) => t.propertyId === property.propertyId);\r\n    \r\n    if (found) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  const [deleteProperty, { data: deletePropertyData }] = useMutation<Mutation, MutationDeletePropertyArgs>(DELETE_PROPERTY);\r\n\r\n  const deletePropertyButton = () => {\r\n\r\n    deleteProperty({\r\n      variables: {\r\n        propertyId: property.propertyId\r\n      },\r\n      update(cache, { data }) {\r\n\r\n        if (!data) {\r\n          return null;\r\n        }\r\n\r\n        const getExistingProperties = cache.readQuery<Query>({ query: GET_PROPERTIES });\r\n        // Add the new todo to the cache\r\n        const existingProperties = getExistingProperties ? getExistingProperties.properties : [];\r\n        const newProperties = existingProperties!.filter(t => {\r\n          if (t)\r\n            return (t.propertyId !== property.propertyId)\r\n        });  /* .returning[0] */;\r\n        if (existingProperties)\r\n          cache.writeQuery<Query>({\r\n            query: GET_PROPERTIES,\r\n            data: { properties: newProperties }\r\n          });\r\n      }\r\n\r\n    })\r\n\r\n  }\r\n\r\n  const getPropertyIconType =() => {\r\n    var buildingType= \"\"\r\n    switch(property.buildingType) {\r\n      case \"Office\":\r\n        buildingType = \"office\"\r\n        break;\r\n      case \"Industrial\":\r\n        buildingType = \"industrial\"\r\n        break;\r\n        case \"Retail\":\r\n          buildingType = \"retail\"\r\n          break;\r\n        case \"Mixed Use\":\r\n          buildingType = \"mixeduse\"\r\n          break;\r\n      default:\r\n        buildingType = \"mixeduse\"\r\n    }\r\n    return buildingType\r\n  }\r\n\r\n  const handleSelectedPropertyClick = () => {\r\n    navigationState ( {...navigationState(), selectedPropertyId: property.propertyId, showSelectedPropertyPanel: true})\r\n  }\r\n\r\n\r\n  const styles = mergeStyleSets({\r\n    /*  buttonArea: {\r\n       verticalAlign: 'top',\r\n       display: 'inline-block',\r\n       textAlign: 'center',\r\n       margin: '0 100px',\r\n       minWidth: 130,\r\n       height: 32,\r\n     }, */\r\n    callout: {\r\n      maxWidth: 400,\r\n    },\r\n    header: {\r\n      padding: '18px 24px 12px',\r\n    },\r\n    title: [\r\n      {\r\n        margin: 0,\r\n        fontWeight: FontWeights.bold,\r\n      },\r\n    ],\r\n    inner: {\r\n      height: '100%',\r\n      padding: '0 24px 20px',\r\n    },\r\n    actions: {\r\n      position: 'relative',\r\n      marginTop: 20,\r\n      width: '100%',\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    buttons: {\r\n      display: 'flex',\r\n      justifyContent: 'flex-end',\r\n      padding: '0 24px 24px',\r\n    },\r\n    subtext: [\r\n      {\r\n        margin: 0,\r\n        fontWeight: FontWeights.semilight,\r\n      },\r\n    ],\r\n  });\r\n\r\n\r\n  const checkClass = {\r\n    root: {\r\n      marginLeft: 5,\r\n      visibility: isChecked() ? \"visible\" : \"hidden\",\r\n    },\r\n    checkbox: {\r\n      borderRadius: \"50%\"\r\n    }\r\n  }\r\n\r\n  const imageClass = mergeStyles({\r\n    width: 100,\r\n    height: 80\r\n\r\n  });\r\n\r\n  const chevronClass = mergeStyles({\r\n    alignSelf: 'center',\r\n    marginLeft: 2,\r\n   /*  marginRight: 5, */\r\n    marginTop: \"0 !important\",\r\n    /* color: palette.neutralTertiary, */\r\n    fontSize: 20,\r\n    flexShrink: 0,\r\n    cursor: \"pointer\",\r\n    /* selectors: {\r\n      '&:hover': { \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.1)\" },\r\n    }, */\r\n\r\n  });\r\n\r\n  const iconClass = mergeStyles({\r\n    fontSize: 50,\r\n    height: 50,\r\n    width: 50,\r\n    \r\n   \r\n    marginLeft:15,\r\n    marginRight:15,\r\n    marginTop: \"-10px !important\",\r\n    padding: \"5px\",\r\n    \r\n    \r\n\r\n});\r\n\r\nconst chevronIconDiv = mergeStyles({\r\n  /* fontSize: 50, */\r\n  height: 40,\r\n  width: 40,\r\n  lineHeight: 40,\r\n  textAlign: \"center\",\r\n  marginLeft:15,\r\n  marginRight:15,\r\n  marginTop: \"0px !important\",\r\n  /* padding: \"5px\", */\r\n  selectors: {\r\n    '&:hover': { backgroundColor: \"rgb(0 13 255 / 14%)\" , borderRadius: 30, \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.2)\" },\r\n  },\r\n\r\n});\r\n\r\n  const boldStyle = { root: { fontWeight: FontWeights.semibold } };\r\n  const propertyHeadingStyles = { alignSelf: \"start\", fontSize: \"23px\", padding: 5, paddingLeft: \"25px\" }\r\n  const propertyAddressStyles = { alignSelf: \"start\", fontSize: \"14px\", padding: 5, paddingLeft: \"25px\" }\r\n  const theme = getTheme();\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: theme.palette.neutralPrimary,\r\n      marginLeft: \"auto\",\r\n      marginTop: '0px !important',\r\n      marginRight: 5,\r\n      width: 40,\r\n      height: 40,\r\n      visibility: isChecked() ? \"visible\" : \"hidden\",\r\n\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n      backgroundColor: \"rgb(255 0 0 / 14%)\",\r\n      borderRadius: 30,\r\n      \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.2)\"\r\n\r\n    },\r\n    icon: {\r\n      fontSize: \"24px\",\r\n      marginLeft: 6\r\n\r\n    }\r\n  };\r\n\r\n  const deleteIcon: IIconProps = { iconName: 'Delete' };\r\n\r\n\r\n  return (\r\n\r\n    <Stack\r\n      horizontalAlign=\"start\"\r\n      verticalAlign=\"start\"\r\n      id=\"card\"\r\n\r\n      styles={{\r\n        root: {\r\n          width: 700,\r\n          marginBottom: 10,\r\n          padding: '10px',\r\n          textAlign: 'center',\r\n          color: '#605e5c',\r\n          alignItems: \"center\",\r\n          display: \"flex\",\r\n          flexFlow: \"row\",\r\n          /*  borderTop: \"4px solid #2557a2;\",\r\n           borderBottom: \"4px solid #2557a2;\", */\r\n          backgroundColor: \"white\",\r\n          background: isChecked() ? \"rgb(104 113 140 / 14%)\" : \"white\",\r\n          boxShadow: \"-1px 1px 7px 2px #d4cece\",\r\n          selectors: {\r\n            '&:hover': { background: /* palette.neutralLight */  \"rgb(104 113 140 / 14%)\" },\r\n          },\r\n\r\n        }\r\n      }}\r\n      gap={15}>\r\n\r\n\r\n\r\n      <Checkbox styles={checkClass} checked={isChecked()} onChange={onCheckProperty} />\r\n      {/* <div className={imageClass}>Image</div> */}\r\n\r\n      <FontIcon iconName={getPropertyIconType()}  className={iconClass} />\r\n\r\n      <Stack styles={{ root: { paddingTop: 0, marginTop: \"0 !important\", marginBottom: \"auto\" } }} verticalFill>\r\n        <Text styles={boldStyle} style={propertyHeadingStyles}>{property.propertyName}</Text>\r\n        <Text style={propertyAddressStyles}>{property.address}<span style={{ paddingLeft: 20, paddingRight: 20 }}>|</span>{property.suburb}<span style={{ paddingLeft: 20, paddingRight: 20 }}>|</span>{property.province} </Text>\r\n\r\n\r\n      </Stack>\r\n      <IconButton\r\n        styles={iconButtonStyles}\r\n        id={`deleteButton${property.propertyId}`}\r\n        iconProps={deleteIcon}\r\n        ariaLabel=\"Delete Property\"\r\n        onClick={toggleIsDeleteCalloutVisible}\r\n      />\r\n      {isDeleteCalloutVisible ? (\r\n        <div>\r\n          <FocusTrapCallout\r\n            role=\"alertdialog\"\r\n            className={styles.callout}\r\n            gapSpace={0}\r\n            target={`#deleteButton${property.propertyId}`}\r\n            onDismiss={toggleIsDeleteCalloutVisible}\r\n            setInitialFocus\r\n          >\r\n            <div className={styles.header}>\r\n              <Text className={styles.title}>Delete Property</Text>\r\n            </div>\r\n            <div className={styles.inner}>\r\n              <div>\r\n                <Text className={styles.subtext}>\r\n                  Are you sure you want to delete this property?\r\n                </Text>\r\n              </div>\r\n            </div>\r\n            <FocusZone>\r\n              <Stack className={styles.buttons} gap={8} horizontal>\r\n                <PrimaryButton onClick={deletePropertyButton}>Confirm</PrimaryButton>\r\n                <DefaultButton onClick={toggleIsDeleteCalloutVisible}>Cancel</DefaultButton>\r\n              </Stack>\r\n            </FocusZone>\r\n          </FocusTrapCallout>\r\n        </div>\r\n      ) : null}\r\n<div className={chevronIconDiv} onClick={handleSelectedPropertyClick}><Icon className={chevronClass} iconName={'ChevronRight'} /></div>\r\n      \r\n\r\n    </Stack>\r\n\r\n  );\r\n};\r\n\r\nexport default PropertyListItem","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\assets\\svgIcons.js",[],["719","720"],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\assets\\pin.js",[],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PremisesListItem.tsx",["721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748"],"import * as React from 'react';\r\nimport { getTheme } from '@fluentui/react';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\r\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\r\nimport { Checkbox, ICheckboxProps } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { Query, Premises, Mutation, MutationDeletePremisesArgs, Property } from \"../schematypes/schematypes\"\r\nimport { GET_SELECTED_PROPERTIES, GET_PREMISES, DELETE_PREMISES, GET_SINGLE_PROPERTY } from \"../gql/gql\"\r\nimport { gql, useMutation, useQuery } from '@apollo/client';\r\nimport { selectedPropertyList } from \"../reactivevariables/reactivevariables\"\r\nimport { mergeStyles, registerIcons } from 'office-ui-fabric-react/lib/Styling';\r\nimport { CommandBarButton, IContextualMenuProps, Stack, Text, FontWeights, IconButton, IIconProps, IStackStyles, initializeIcons, DefaultButton, FocusTrapCallout, FocusZone, PrimaryButton, mergeStyleSets, ITextStyles, } from 'office-ui-fabric-react';\r\nimport { useBoolean } from '@uifabric/react-hooks';\r\nimport { IndustrialIcon, RetailIcon, OfficeIcon, MixedUseIcon } from \"../assets/svgIcons.js\"\r\nimport { FontIcon } from 'office-ui-fabric-react/lib/Icon';\r\nimport { navigationState } from \"../reactivevariables/reactivevariables\"\r\nimport \"./PropertyListItem.css\"\r\n\r\n\r\n\r\n\r\ninterface Props {\r\n    premises: Premises\r\n    propertyId: number,\r\n    key: any\r\n}\r\n\r\nexport const PremisesListItem: React.FunctionComponent<Props> = ({ premises, propertyId }) => {\r\n\r\n\r\n\r\n    const [isDeleteCalloutVisible, { toggle: toggleIsDeleteCalloutVisible }] = useBoolean(false);\r\n\r\n    \r\n\r\n\r\n    /* var selectedItems = data!.selectedItemsList!.propertyIds\r\n  \r\n  \r\n    const onChange = React.useCallback((): void => {\r\n  \r\n      const found = !!selectedItemsList().propertyIds.find((t) => t === property.propertyId);\r\n  \r\n      console.log(found)\r\n      console.log(selectedItemsList().propertyIds)\r\n      if (found) {\r\n        selectedItemsList({\r\n          propertyIds: selectedItems.filter((t) => t !== property.propertyId)\r\n        })\r\n      } else {\r\n        selectedItemsList({\r\n          propertyIds: selectedItems.concat(property.propertyId)\r\n        })\r\n      }\r\n  \r\n    }, [selectedItems]);\r\n  \r\n    var isChecked = () => {\r\n      const found = !!selectedItems.find((t) => t === property.propertyId);\r\n      console.log(found)\r\n      if (found) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    } */\r\n\r\n    const [deletePremises, { data: deletePremisesData }] = useMutation<Mutation, MutationDeletePremisesArgs>(DELETE_PREMISES);\r\n\r\n    const deletePremisesButton = () => {\r\n\r\n        deletePremises({\r\n            variables: {\r\n                premisesId: premises.premisesId\r\n            },\r\n            update(cache, { data }) {\r\n\r\n                if (!data) {\r\n                    return null;\r\n                }\r\n\r\n                const getExistingProperty = cache.readQuery<Query>({ query: GET_SINGLE_PROPERTY, variables: { propertyId: propertyId } })\r\n                const existingProperty: Property = getExistingProperty ? getExistingProperty.singleProperty! : {propertyId:1, propertyName:\"\"};\r\n             \r\n                const existingPremises = getExistingProperty ? getExistingProperty.singleProperty?.premisesList : [];\r\n                const newPremises = existingPremises!.filter(t => {\r\n                    if (t)\r\n                        return (t.premisesId !== premises.premisesId)\r\n                });  /* .returning[0] */;\r\n\r\n            const newProperty= {...existingProperty, premisesList: newPremises}\r\n                if (existingPremises)\r\n                    cache.writeQuery<Query>({\r\n                        query: GET_SINGLE_PROPERTY,\r\n                        variables: { propertyId: propertyId},\r\n                        data: { singleProperty: newProperty }\r\n                    });\r\n            }\r\n\r\n        })\r\n        toggleIsDeleteCalloutVisible()\r\n    }\r\n\r\n    /* const getPropertyIconType =() => {\r\n      var buildingType= \"\"\r\n      switch(property.buildingType) {\r\n        case \"Office\":\r\n          buildingType = \"office\"\r\n          break;\r\n        case \"Industrial\":\r\n          buildingType = \"industrial\"\r\n          break;\r\n          case \"Retail\":\r\n            buildingType = \"retail\"\r\n            break;\r\n          case \"Mixed Use\":\r\n            buildingType = \"mixeduse\"\r\n            break;\r\n        default:\r\n          buildingType = \"mixeduse\"\r\n      }\r\n      return buildingType\r\n    } */\r\n\r\n    /*  const handleSelectedPropertyClick = () => {\r\n       navigationState ( {...navigationState(), selectedPropertyId: property.propertyId})\r\n     } */\r\n\r\n\r\n    const styles = mergeStyleSets({\r\n        /*  buttonArea: {\r\n           verticalAlign: 'top',\r\n           display: 'inline-block',\r\n           textAlign: 'center',\r\n           margin: '0 100px',\r\n           minWidth: 130,\r\n           height: 32,\r\n         }, */\r\n        callout: {\r\n            maxWidth: 400,\r\n        },\r\n        header: {\r\n            padding: '18px 24px 12px',\r\n        },\r\n        title: [\r\n            {\r\n                margin: 0,\r\n                fontWeight: FontWeights.bold,\r\n            },\r\n        ],\r\n        inner: {\r\n            height: '100%',\r\n            padding: '0 24px 20px',\r\n        },\r\n        actions: {\r\n            position: 'relative',\r\n            marginTop: 20,\r\n            width: '100%',\r\n            whiteSpace: 'nowrap',\r\n        },\r\n        buttons: {\r\n            display: 'flex',\r\n            justifyContent: 'flex-end',\r\n            padding: '0 24px 24px',\r\n        },\r\n        subtext: [\r\n            {\r\n                margin: 0,\r\n                fontWeight: FontWeights.semilight,\r\n            },\r\n        ],\r\n    });\r\n\r\n\r\n    /* const checkClass = {\r\n      root: {\r\n        marginLeft: 5,\r\n        visibility: isChecked() ? \"visible\" : \"hidden\",\r\n      },\r\n      checkbox: {\r\n        borderRadius: \"50%\"\r\n      }\r\n    } */\r\n\r\n    const imageClass = mergeStyles({\r\n        width: 100,\r\n        height: 80\r\n\r\n    });\r\n\r\n    const chevronClass = mergeStyles({\r\n        alignSelf: 'center',\r\n        marginLeft: 2,\r\n        /*  marginRight: 5, */\r\n        marginTop: \"0 !important\",\r\n        /* color: palette.neutralTertiary, */\r\n        fontSize: 20,\r\n        flexShrink: 0,\r\n        cursor: \"pointer\",\r\n        /* selectors: {\r\n          '&:hover': { \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.1)\" },\r\n        }, */\r\n\r\n    });\r\n\r\n    const iconClass = mergeStyles({\r\n        fontSize: 50,\r\n        height: 50,\r\n        width: 50,\r\n\r\n\r\n        marginLeft: 15,\r\n        marginRight: 15,\r\n        marginTop: \"-10px !important\",\r\n        padding: \"5px\",\r\n\r\n\r\n\r\n    });\r\n\r\n    const chevronIconDiv = mergeStyles({\r\n        /* fontSize: 50, */\r\n        height: 40,\r\n        width: 40,\r\n        lineHeight: 40,\r\n        textAlign: \"center\",\r\n        marginLeft: 15,\r\n        marginRight: 15,\r\n        marginTop: \"0px !important\",\r\n        /* padding: \"5px\", */\r\n        selectors: {\r\n            '&:hover': { backgroundColor: \"rgb(0 13 255 / 14%)\", borderRadius: 30, \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.2)\" },\r\n        },\r\n\r\n    });\r\n\r\n    const boldStyle = { root: { fontWeight: FontWeights.semibold } };\r\n    const propertyHeadingStyles = { alignSelf: \"start\", fontSize: \"23px\", padding: 5, paddingLeft: \"25px\" }\r\n    const tableCellStyles: ITextStyles = { root: { alignSelf: \"start\", fontSize: \"14px\", padding: 5, marginTop: \"auto !important\", marginBottom: \"auto\", width: 45 } }\r\n    const theme = getTheme();\r\n    const iconButtonStyles = {\r\n        root: {\r\n            color: theme.palette.neutralPrimary,\r\n            marginLeft: 5,\r\n            marginTop: '0px !important',\r\n            marginRight: 5,\r\n            width: 35,\r\n            height: 35,\r\n            /*  visibility: isChecked() ? \"visible\" : \"hidden\", */\r\n\r\n        },\r\n        rootHovered: {\r\n            color: theme.palette.neutralDark,\r\n            backgroundColor: \"rgb(3 122 212 / 16%);\",\r\n            /* borderRadius: 30, */\r\n            \"transition\": \"all .2s ease-in-out\", transform: \"scale(1.1)\"\r\n\r\n        },\r\n        icon: {\r\n            fontSize: \"24px\",\r\n            marginLeft: 6\r\n\r\n        }\r\n    };\r\n\r\n    const vacantIconStyles = {\r\n        root: {\r\n           \r\n\r\n        },\r\n        rootHovered: {\r\n            backgroundColor:  \"rgb(104 113 140 / 0%)\",\r\n        },\r\n        rootActive: {\r\n            backgroundColor:    \"rgb(104 113 140 / 0%)\",\r\n        },\r\n        icon: {\r\n            fontSize: \"24px\",\r\n            marginLeft: 6\r\n\r\n        }\r\n    };\r\n\r\n    const menuIcon: IIconProps = { iconName: 'SingleColumnEdit' };\r\n    const checkIcon: IIconProps = { iconName: 'StatusCircleCheckmark' };\r\n    const crossIcon: IIconProps = { iconName: 'StatusCircleErrorX' };\r\n    const notesIcon: IIconProps = { iconName: 'DietPlanNotebook' };\r\n\r\n    const getOccDate = () => {\r\n\r\n        var date = new Date(premises.occupation)\r\n        return date.toLocaleDateString(\r\n            'en-gb',\r\n            {\r\n                year: 'numeric',\r\n                month: 'short',\r\n                day: 'numeric'\r\n            }\r\n        );\r\n    }\r\n\r\n    const getExpDate = () => {\r\n\r\n        var date = new Date(premises.leaseExpiry)\r\n        return date.toLocaleDateString(\r\n            'en-gb',\r\n            {\r\n                year: 'numeric',\r\n                month: 'short',\r\n                day: 'numeric'\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    const handlePremisesNotesClick =() => {\r\n        navigationState({ ...navigationState(), selectedPremisesId: premises.premisesId! })\r\n        navigationState({ ...navigationState(), showPremisesNotesModal: true })\r\n    \r\n    }\r\n\r\n    const handlePremisesEditClick =() => {\r\n        navigationState({ ...navigationState(), selectedPremisesId: premises.premisesId! })\r\n        navigationState({ ...navigationState(), showUpdatePremisesModal: true })\r\n    \r\n    }\r\n\r\n    const handlePremisesDuplicateClick =() => {\r\n        navigationState({ ...navigationState(), selectedPremisesId: premises.premisesId! })\r\n        navigationState({ ...navigationState(), showDuplicatePremisesModal: true })\r\n    \r\n    }\r\n\r\n    const menuProps: IContextualMenuProps = {\r\n        items: [\r\n          {\r\n            key: 'Delete Premises',\r\n            text: 'Delete Premises',\r\n            iconProps: { iconName: 'Delete' },\r\n            onClick: toggleIsDeleteCalloutVisible\r\n          },\r\n          {\r\n            key: 'Edit Premises',\r\n            text: 'Edit Premises',\r\n            iconProps: { iconName: 'Edit' },\r\n            onClick: handlePremisesEditClick\r\n          },\r\n          {\r\n            key: 'Duplicate Premises',\r\n            text: 'Duplicate Premises',\r\n            iconProps: { iconName: 'DuplicateRow' },\r\n            onClick: handlePremisesDuplicateClick\r\n          },\r\n        ],\r\n        directionalHintFixed: false,\r\n      };\r\n\r\n\r\n    return (\r\n\r\n        <Stack\r\n            horizontalAlign=\"start\"\r\n            verticalAlign=\"start\"\r\n            id={`premisesRow${premises.premisesId}`}\r\n\r\n            styles={{\r\n                root: {\r\n                     width: \"fit-content\",\r\n                    marginBottom: 10,\r\n                    marginLeft: 20,\r\n                    marginRight:\"auto\",\r\n                    /* padding: '10px', */\r\n                    textAlign: 'center',\r\n                    color: '#605e5c',\r\n                    alignItems: \"center\",\r\n                    display: \"flex\",\r\n                    flexFlow: \"row\",\r\n                    /*  borderTop: \"4px solid #2557a2;\",\r\n                     borderBottom: \"4px solid #2557a2;\", */\r\n                    backgroundColor: \"white\",\r\n                    /*  background: isChecked() ? \"rgb(104 113 140 / 14%)\" : \"white\", */\r\n                    boxShadow: \"-1px 1px 7px 2px #d4cece\",\r\n                    selectors: {\r\n                        '&:hover': { background: /* palette.neutralLight */  \"rgb(104 113 140 / 14%)\" },\r\n                    },\r\n\r\n                }\r\n            }}\r\n        >\r\n\r\n\r\n\r\n            <Stack horizontalAlign=\"start\" styles={{\r\n                root: {\r\n                   /*  width:60, */\r\n                   marginRight: 10,\r\n                    textAlign: 'center',\r\n                    color: '#605e5c',\r\n                    alignItems: \"center\",\r\n                    display: \"flex\",\r\n                    flexFlow: \"row\",\r\n                }\r\n            }}>\r\n                <IconButton\r\n                    styles={iconButtonStyles}\r\n                    id={`deletePremisesButton${premises.premisesId}`}\r\n                    menuProps={menuProps}\r\n                    iconProps={menuIcon}\r\n                    ariaLabel=\"Delete Premises\"\r\n                   /*  onClick={toggleIsDeleteCalloutVisible} */\r\n                />\r\n                {isDeleteCalloutVisible ? (\r\n                    <div>\r\n                        <FocusTrapCallout\r\n                            role=\"alertdialog\"\r\n                            className={styles.callout}\r\n                            gapSpace={0}\r\n                            target={`#deletePremisesButton${premises.premisesId}`}\r\n                            onDismiss={toggleIsDeleteCalloutVisible}\r\n                            setInitialFocus\r\n                        >\r\n                            <div className={styles.header}>\r\n                                <Text className={styles.title}>Delete Premises</Text>\r\n                            </div>\r\n                            <div className={styles.inner}>\r\n                                <div>\r\n                                    <Text className={styles.subtext}>\r\n                                        Are you sure you want to delete this premises?\r\n                </Text>\r\n                                </div>\r\n                            </div>\r\n                            <FocusZone>\r\n                                <Stack className={styles.buttons} gap={8} horizontal>\r\n                                    <PrimaryButton onClick={deletePremisesButton}>Confirm</PrimaryButton>\r\n                                    <DefaultButton onClick={toggleIsDeleteCalloutVisible}>Cancel</DefaultButton>\r\n                                </Stack>\r\n                            </FocusZone>\r\n                        </FocusTrapCallout>\r\n                    </div>\r\n                ) : null}\r\n                {/* <IconButton\r\n                    styles={iconButtonStyles}\r\n                    id={`deletePremisesButton${premises.premisesId}`}\r\n                    iconProps={deleteIcon}\r\n                    ariaLabel=\"Delete Premises\"\r\n                    onClick={toggleIsDeleteCalloutVisible}\r\n                /> */}\r\n\r\n            </Stack>\r\n\r\n\r\n\r\n            <Text styles={tableCellStyles} style={{ width: 100, borderLeft: \"3px solid rgba(210, 26, 69, 0.42) \"}}>{premises.floor}</Text>\r\n            <Text styles={tableCellStyles}>{premises.area}</Text>\r\n            <Text styles={tableCellStyles}>{premises.vacant === \"true\"?\r\n            <IconButton\r\n                    styles={vacantIconStyles}\r\n                    iconProps={checkIcon}\r\n                    ariaLabel=\"Vacant\"\r\n                />: <IconButton\r\n                styles={vacantIconStyles}\r\n                iconProps={crossIcon}\r\n                ariaLabel=\"Not vacant\"\r\n            /> }</Text>\r\n            <Text styles={tableCellStyles} style={{ width: 55,}}>{premises.type}</Text>\r\n            <Text styles={tableCellStyles} style={{ width: 100, borderRight: \"3px solid rgba(210, 26, 69, 0.42) \" , marginRight:2 }}>{getOccDate()}</Text>\r\n           {/*  <Text styles={tableCellStyles} style={{ width: 70 }}>{premises.premisesNotes}</Text> */}\r\n            <Text styles={tableCellStyles} style={{ borderLeft: \"3px solid rgba(63, 55, 189, 0.42) \", marginLeft:2}}>{premises.netRental}</Text>\r\n            <Text styles={tableCellStyles}>{premises.opCosts}</Text>\r\n            <Text styles={tableCellStyles}>{premises.other}</Text>\r\n            <Text styles={tableCellStyles}>{premises.grossRental}</Text>\r\n            <Text styles={tableCellStyles} style={{borderRight: \"3px solid rgba(63, 55, 189, 0.42) \", marginRight:2 }}>{premises.esc}</Text>\r\n            <Text styles={tableCellStyles} style={{ borderLeft: \"3px solid rgba(61, 177, 123, 0.42) \" , marginLeft:2}}>{premises.openBays?.toFixed(1).replace(/[.,]0$/, \"\")}</Text>\r\n            <Text styles={tableCellStyles}>{premises.openRate}</Text>\r\n            <Text styles={tableCellStyles} style={{ width: 50 }}>{premises.coveredBays?.toFixed(1).replace(/[.,]0$/, \"\")}</Text>\r\n            <Text styles={tableCellStyles} style={{ width: 50 }}>{premises.coveredRate}</Text>\r\n            <Text styles={tableCellStyles} style={{ width: 50 }}>{premises.shadedBays?.toFixed(1).replace(/[.,]0$/, \"\")}</Text>\r\n            <Text styles={tableCellStyles} style={{ width: 50 }}>{premises.shadedRate}</Text>\r\n            <Text styles={tableCellStyles} style={{ width: 50, borderRight: \"3px solid rgba(61, 177, 123, 0.42) \", marginRight:2 }}>{premises.parkingRatio?.toFixed(1).replace(/[.,]0$/, \"\")}</Text>\r\n            <Text styles={tableCellStyles}  style={{ width: 125, borderLeft: \"3px solid rgba(212, 236, 10, 0.42) \" , marginLeft:2 }}>{premises.tenantName}</Text>\r\n            <Text styles={tableCellStyles} style={{ width: 100, borderRight: \"3px solid rgba(212, 236, 10, 0.42) \", marginRight:2 }}>{getExpDate()}</Text>\r\n            <div style={{ width: 60, marginLeft: 10, marginRight: \"auto\", display: \"flex\" }}>\r\n                    <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={notesIcon}\r\n                    ariaLabel=\"Premises Notes\"\r\n                    onClick={handlePremisesNotesClick}\r\n                />\r\n                    </div>\r\n\r\n\r\n\r\n\r\n        </Stack>\r\n\r\n    );\r\n};\r\n\r\nexport default PremisesListItem","C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\ImageSlider.tsx",["749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774"],"C:\\Users\\ruper\\Desktop\\Web\\Own Projects\\Property Stock App V2\\psafrontendv2\\src\\components\\PDFOutput\\PropertyListScheduleNoImages.tsx",[],{"ruleId":"775","severity":1,"message":"776","line":6,"column":10,"nodeType":"777","messageId":"778","endLine":6,"endColumn":20},{"ruleId":"775","severity":1,"message":"779","line":8,"column":10,"nodeType":"777","messageId":"778","endLine":8,"endColumn":20},{"ruleId":"775","severity":1,"message":"780","line":9,"column":10,"nodeType":"777","messageId":"778","endLine":9,"endColumn":19},{"ruleId":"775","severity":1,"message":"781","line":13,"column":3,"nodeType":"777","messageId":"778","endLine":13,"endColumn":16},{"ruleId":"775","severity":1,"message":"782","line":14,"column":3,"nodeType":"777","messageId":"778","endLine":14,"endColumn":6},{"ruleId":"775","severity":1,"message":"783","line":17,"column":3,"nodeType":"777","messageId":"778","endLine":17,"endColumn":13},{"ruleId":"775","severity":1,"message":"784","line":18,"column":13,"nodeType":"777","messageId":"778","endLine":18,"endColumn":21},{"ruleId":"785","replacedBy":"786"},{"ruleId":"787","replacedBy":"788"},{"ruleId":"775","severity":1,"message":"789","line":17,"column":11,"nodeType":"777","messageId":"778","endLine":17,"endColumn":22},{"ruleId":"775","severity":1,"message":"790","line":21,"column":11,"nodeType":"777","messageId":"778","endLine":21,"endColumn":23},{"ruleId":"775","severity":1,"message":"791","line":2,"column":8,"nodeType":"777","messageId":"778","endLine":2,"endColumn":12},{"ruleId":"775","severity":1,"message":"792","line":7,"column":10,"nodeType":"777","messageId":"778","endLine":7,"endColumn":14},{"ruleId":"775","severity":1,"message":"793","line":7,"column":16,"nodeType":"777","messageId":"778","endLine":7,"endColumn":20},{"ruleId":"775","severity":1,"message":"794","line":7,"column":22,"nodeType":"777","messageId":"778","endLine":7,"endColumn":33},{"ruleId":"775","severity":1,"message":"795","line":8,"column":3,"nodeType":"777","messageId":"778","endLine":8,"endColumn":12},{"ruleId":"775","severity":1,"message":"796","line":12,"column":34,"nodeType":"777","messageId":"778","endLine":12,"endColumn":54},{"ruleId":"775","severity":1,"message":"782","line":13,"column":10,"nodeType":"777","messageId":"778","endLine":13,"endColumn":13},{"ruleId":"775","severity":1,"message":"797","line":13,"column":25,"nodeType":"777","messageId":"778","endLine":13,"endColumn":40},{"ruleId":"775","severity":1,"message":"798","line":24,"column":10,"nodeType":"777","messageId":"778","endLine":24,"endColumn":19},{"ruleId":"775","severity":1,"message":"799","line":24,"column":21,"nodeType":"777","messageId":"778","endLine":24,"endColumn":36},{"ruleId":"775","severity":1,"message":"800","line":24,"column":38,"nodeType":"777","messageId":"778","endLine":24,"endColumn":46},{"ruleId":"775","severity":1,"message":"801","line":24,"column":48,"nodeType":"777","messageId":"778","endLine":24,"endColumn":52},{"ruleId":"775","severity":1,"message":"802","line":28,"column":7,"nodeType":"777","messageId":"778","endLine":28,"endColumn":9},{"ruleId":"775","severity":1,"message":"803","line":44,"column":14,"nodeType":"777","messageId":"778","endLine":44,"endColumn":27},{"ruleId":"775","severity":1,"message":"804","line":45,"column":12,"nodeType":"777","messageId":"778","endLine":45,"endColumn":23},{"ruleId":"775","severity":1,"message":"805","line":50,"column":14,"nodeType":"777","messageId":"778","endLine":50,"endColumn":27},{"ruleId":"775","severity":1,"message":"806","line":51,"column":12,"nodeType":"777","messageId":"778","endLine":51,"endColumn":23},{"ruleId":"775","severity":1,"message":"807","line":57,"column":12,"nodeType":"777","messageId":"778","endLine":57,"endColumn":27},{"ruleId":"775","severity":1,"message":"808","line":62,"column":14,"nodeType":"777","messageId":"778","endLine":62,"endColumn":24},{"ruleId":"775","severity":1,"message":"809","line":63,"column":12,"nodeType":"777","messageId":"778","endLine":63,"endColumn":20},{"ruleId":"775","severity":1,"message":"810","line":68,"column":14,"nodeType":"777","messageId":"778","endLine":68,"endColumn":33},{"ruleId":"775","severity":1,"message":"811","line":69,"column":12,"nodeType":"777","messageId":"778","endLine":69,"endColumn":29},{"ruleId":"775","severity":1,"message":"812","line":179,"column":14,"nodeType":"777","messageId":"778","endLine":179,"endColumn":29},{"ruleId":"775","severity":1,"message":"813","line":180,"column":12,"nodeType":"777","messageId":"778","endLine":180,"endColumn":25},{"ruleId":"775","severity":1,"message":"814","line":196,"column":12,"nodeType":"777","messageId":"778","endLine":196,"endColumn":32},{"ruleId":"775","severity":1,"message":"815","line":197,"column":10,"nodeType":"777","messageId":"778","endLine":197,"endColumn":28},{"ruleId":"775","severity":1,"message":"816","line":3,"column":10,"nodeType":"777","messageId":"778","endLine":3,"endColumn":15},{"ruleId":"775","severity":1,"message":"817","line":7,"column":28,"nodeType":"777","messageId":"778","endLine":7,"endColumn":48},{"ruleId":"775","severity":1,"message":"818","line":7,"column":100,"nodeType":"777","messageId":"778","endLine":7,"endColumn":106},{"ruleId":"775","severity":1,"message":"819","line":7,"column":123,"nodeType":"777","messageId":"778","endLine":7,"endColumn":136},{"ruleId":"775","severity":1,"message":"820","line":9,"column":10,"nodeType":"777","messageId":"778","endLine":9,"endColumn":23},{"ruleId":"775","severity":1,"message":"821","line":13,"column":9,"nodeType":"777","messageId":"778","endLine":13,"endColumn":24},{"ruleId":"775","severity":1,"message":"822","line":21,"column":7,"nodeType":"777","messageId":"778","endLine":21,"endColumn":41},{"ruleId":"775","severity":1,"message":"823","line":42,"column":7,"nodeType":"777","messageId":"778","endLine":42,"endColumn":43},{"ruleId":"775","severity":1,"message":"824","line":44,"column":7,"nodeType":"777","messageId":"778","endLine":44,"endColumn":30},{"ruleId":"775","severity":1,"message":"825","line":46,"column":7,"nodeType":"777","messageId":"778","endLine":46,"endColumn":15},{"ruleId":"775","severity":1,"message":"826","line":66,"column":9,"nodeType":"777","messageId":"778","endLine":66,"endColumn":24},{"ruleId":"775","severity":1,"message":"827","line":82,"column":9,"nodeType":"777","messageId":"778","endLine":82,"endColumn":43},{"ruleId":"775","severity":1,"message":"828","line":132,"column":9,"nodeType":"777","messageId":"778","endLine":132,"endColumn":52},{"ruleId":"775","severity":1,"message":"829","line":2,"column":10,"nodeType":"777","messageId":"778","endLine":2,"endColumn":19},{"ruleId":"775","severity":1,"message":"830","line":8,"column":3,"nodeType":"777","messageId":"778","endLine":8,"endColumn":11},{"ruleId":"775","severity":1,"message":"831","line":9,"column":3,"nodeType":"777","messageId":"778","endLine":9,"endColumn":17},{"ruleId":"775","severity":1,"message":"794","line":10,"column":3,"nodeType":"777","messageId":"778","endLine":10,"endColumn":14},{"ruleId":"775","severity":1,"message":"832","line":11,"column":3,"nodeType":"777","messageId":"778","endLine":11,"endColumn":17},{"ruleId":"775","severity":1,"message":"792","line":12,"column":3,"nodeType":"777","messageId":"778","endLine":12,"endColumn":7},{"ruleId":"775","severity":1,"message":"819","line":13,"column":3,"nodeType":"777","messageId":"778","endLine":13,"endColumn":16},{"ruleId":"775","severity":1,"message":"833","line":15,"column":3,"nodeType":"777","messageId":"778","endLine":15,"endColumn":16},{"ruleId":"775","severity":1,"message":"834","line":16,"column":3,"nodeType":"777","messageId":"778","endLine":16,"endColumn":13},{"ruleId":"775","severity":1,"message":"835","line":24,"column":7,"nodeType":"777","messageId":"778","endLine":24,"endColumn":49},{"ruleId":"775","severity":1,"message":"828","line":25,"column":7,"nodeType":"777","messageId":"778","endLine":25,"endColumn":50},{"ruleId":"775","severity":1,"message":"836","line":26,"column":7,"nodeType":"777","messageId":"778","endLine":26,"endColumn":29},{"ruleId":"775","severity":1,"message":"829","line":2,"column":10,"nodeType":"777","messageId":"778","endLine":2,"endColumn":19},{"ruleId":"775","severity":1,"message":"837","line":3,"column":10,"nodeType":"777","messageId":"778","endLine":3,"endColumn":15},{"ruleId":"775","severity":1,"message":"838","line":3,"column":17,"nodeType":"777","messageId":"778","endLine":3,"endColumn":25},{"ruleId":"775","severity":1,"message":"839","line":4,"column":10,"nodeType":"777","messageId":"778","endLine":4,"endColumn":14},{"ruleId":"775","severity":1,"message":"840","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":18},{"ruleId":"775","severity":1,"message":"841","line":5,"column":20,"nodeType":"777","messageId":"778","endLine":5,"endColumn":34},{"ruleId":"775","severity":1,"message":"842","line":6,"column":17,"nodeType":"777","messageId":"778","endLine":6,"endColumn":25},{"ruleId":"775","severity":1,"message":"784","line":7,"column":10,"nodeType":"777","messageId":"778","endLine":7,"endColumn":18},{"ruleId":"775","severity":1,"message":"843","line":8,"column":10,"nodeType":"777","messageId":"778","endLine":8,"endColumn":30},{"ruleId":"844","severity":1,"message":"845","line":32,"column":70,"nodeType":"846","messageId":"847","endLine":32,"endColumn":72},{"ruleId":"775","severity":1,"message":"848","line":2,"column":10,"nodeType":"777","messageId":"778","endLine":2,"endColumn":26},{"ruleId":"775","severity":1,"message":"793","line":6,"column":10,"nodeType":"777","messageId":"778","endLine":6,"endColumn":14},{"ruleId":"775","severity":1,"message":"849","line":8,"column":10,"nodeType":"777","messageId":"778","endLine":8,"endColumn":33},{"ruleId":"775","severity":1,"message":"850","line":8,"column":35,"nodeType":"777","messageId":"778","endLine":8,"endColumn":48},{"ruleId":"775","severity":1,"message":"851","line":8,"column":50,"nodeType":"777","messageId":"778","endLine":8,"endColumn":70},{"ruleId":"775","severity":1,"message":"852","line":8,"column":72,"nodeType":"777","messageId":"778","endLine":8,"endColumn":92},{"ruleId":"775","severity":1,"message":"853","line":8,"column":94,"nodeType":"777","messageId":"778","endLine":8,"endColumn":107},{"ruleId":"775","severity":1,"message":"854","line":10,"column":20,"nodeType":"777","messageId":"778","endLine":10,"endColumn":42},{"ruleId":"775","severity":1,"message":"821","line":10,"column":51,"nodeType":"777","messageId":"778","endLine":10,"endColumn":66},{"ruleId":"775","severity":1,"message":"855","line":10,"column":68,"nodeType":"777","messageId":"778","endLine":10,"endColumn":76},{"ruleId":"775","severity":1,"message":"842","line":10,"column":100,"nodeType":"777","messageId":"778","endLine":10,"endColumn":108},{"ruleId":"775","severity":1,"message":"856","line":10,"column":110,"nodeType":"777","messageId":"778","endLine":10,"endColumn":115},{"ruleId":"775","severity":1,"message":"857","line":10,"column":147,"nodeType":"777","messageId":"778","endLine":10,"endColumn":159},{"ruleId":"775","severity":1,"message":"799","line":12,"column":10,"nodeType":"777","messageId":"778","endLine":12,"endColumn":25},{"ruleId":"775","severity":1,"message":"858","line":12,"column":27,"nodeType":"777","messageId":"778","endLine":12,"endColumn":39},{"ruleId":"775","severity":1,"message":"839","line":13,"column":10,"nodeType":"777","messageId":"778","endLine":13,"endColumn":14},{"ruleId":"775","severity":1,"message":"859","line":14,"column":8,"nodeType":"777","messageId":"778","endLine":14,"endColumn":23},{"ruleId":"775","severity":1,"message":"832","line":24,"column":5,"nodeType":"777","messageId":"778","endLine":24,"endColumn":19},{"ruleId":"775","severity":1,"message":"860","line":29,"column":5,"nodeType":"777","messageId":"778","endLine":29,"endColumn":10},{"ruleId":"775","severity":1,"message":"861","line":30,"column":5,"nodeType":"777","messageId":"778","endLine":30,"endColumn":17},{"ruleId":"775","severity":1,"message":"862","line":33,"column":5,"nodeType":"777","messageId":"778","endLine":33,"endColumn":17},{"ruleId":"775","severity":1,"message":"863","line":34,"column":5,"nodeType":"777","messageId":"778","endLine":34,"endColumn":16},{"ruleId":"775","severity":1,"message":"864","line":35,"column":5,"nodeType":"777","messageId":"778","endLine":35,"endColumn":13},{"ruleId":"775","severity":1,"message":"865","line":36,"column":5,"nodeType":"777","messageId":"778","endLine":36,"endColumn":11},{"ruleId":"775","severity":1,"message":"866","line":37,"column":5,"nodeType":"777","messageId":"778","endLine":37,"endColumn":20},{"ruleId":"775","severity":1,"message":"795","line":38,"column":5,"nodeType":"777","messageId":"778","endLine":38,"endColumn":14},{"ruleId":"775","severity":1,"message":"867","line":39,"column":5,"nodeType":"777","messageId":"778","endLine":39,"endColumn":33},{"ruleId":"775","severity":1,"message":"868","line":40,"column":5,"nodeType":"777","messageId":"778","endLine":40,"endColumn":20},{"ruleId":"775","severity":1,"message":"869","line":43,"column":5,"nodeType":"777","messageId":"778","endLine":43,"endColumn":17},{"ruleId":"775","severity":1,"message":"870","line":56,"column":8,"nodeType":"777","messageId":"778","endLine":56,"endColumn":31},{"ruleId":"775","severity":1,"message":"808","line":69,"column":18,"nodeType":"777","messageId":"778","endLine":69,"endColumn":28},{"ruleId":"775","severity":1,"message":"809","line":70,"column":16,"nodeType":"777","messageId":"778","endLine":70,"endColumn":24},{"ruleId":"775","severity":1,"message":"871","line":77,"column":18,"nodeType":"777","messageId":"778","endLine":77,"endColumn":41},{"ruleId":"775","severity":1,"message":"872","line":78,"column":16,"nodeType":"777","messageId":"778","endLine":78,"endColumn":37},{"ruleId":"775","severity":1,"message":"873","line":90,"column":38,"nodeType":"777","messageId":"778","endLine":90,"endColumn":58},{"ruleId":"775","severity":1,"message":"874","line":285,"column":11,"nodeType":"777","messageId":"778","endLine":285,"endColumn":29},{"ruleId":"775","severity":1,"message":"875","line":355,"column":11,"nodeType":"777","messageId":"778","endLine":355,"endColumn":51},{"ruleId":"775","severity":1,"message":"876","line":379,"column":11,"nodeType":"777","messageId":"778","endLine":379,"endColumn":20},{"ruleId":"775","severity":1,"message":"877","line":380,"column":11,"nodeType":"777","messageId":"778","endLine":380,"endColumn":32},{"ruleId":"775","severity":1,"message":"878","line":382,"column":11,"nodeType":"777","messageId":"778","endLine":382,"endColumn":21},{"ruleId":"775","severity":1,"message":"879","line":383,"column":11,"nodeType":"777","messageId":"778","endLine":383,"endColumn":39},{"ruleId":"775","severity":1,"message":"880","line":384,"column":11,"nodeType":"777","messageId":"778","endLine":384,"endColumn":30},{"ruleId":"881","severity":1,"message":"882","line":428,"column":9,"nodeType":"883","endLine":428,"endColumn":11,"suggestions":"884"},{"ruleId":"881","severity":1,"message":"885","line":552,"column":9,"nodeType":"883","endLine":552,"endColumn":22,"suggestions":"886"},{"ruleId":"775","severity":1,"message":"887","line":1,"column":17,"nodeType":"777","messageId":"778","endLine":1,"endColumn":25},{"ruleId":"775","severity":1,"message":"888","line":2,"column":17,"nodeType":"777","messageId":"778","endLine":2,"endColumn":27},{"ruleId":"775","severity":1,"message":"889","line":4,"column":20,"nodeType":"777","messageId":"778","endLine":4,"endColumn":40},{"ruleId":"775","severity":1,"message":"890","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":16},{"ruleId":"775","severity":1,"message":"818","line":12,"column":5,"nodeType":"777","messageId":"778","endLine":12,"endColumn":11},{"ruleId":"775","severity":1,"message":"891","line":13,"column":5,"nodeType":"777","messageId":"778","endLine":13,"endColumn":18},{"ruleId":"775","severity":1,"message":"819","line":14,"column":5,"nodeType":"777","messageId":"778","endLine":14,"endColumn":18},{"ruleId":"775","severity":1,"message":"863","line":20,"column":5,"nodeType":"777","messageId":"778","endLine":20,"endColumn":16},{"ruleId":"775","severity":1,"message":"865","line":22,"column":5,"nodeType":"777","messageId":"778","endLine":22,"endColumn":11},{"ruleId":"775","severity":1,"message":"867","line":25,"column":5,"nodeType":"777","messageId":"778","endLine":25,"endColumn":33},{"ruleId":"775","severity":1,"message":"782","line":30,"column":10,"nodeType":"777","messageId":"778","endLine":30,"endColumn":13},{"ruleId":"775","severity":1,"message":"784","line":30,"column":28,"nodeType":"777","messageId":"778","endLine":30,"endColumn":36},{"ruleId":"775","severity":1,"message":"850","line":31,"column":40,"nodeType":"777","messageId":"778","endLine":31,"endColumn":53},{"ruleId":"775","severity":1,"message":"892","line":31,"column":55,"nodeType":"777","messageId":"778","endLine":31,"endColumn":68},{"ruleId":"775","severity":1,"message":"893","line":39,"column":7,"nodeType":"777","messageId":"778","endLine":39,"endColumn":32},{"ruleId":"775","severity":1,"message":"894","line":123,"column":28,"nodeType":"777","messageId":"778","endLine":123,"endColumn":32},{"ruleId":"775","severity":1,"message":"835","line":196,"column":11,"nodeType":"777","messageId":"778","endLine":196,"endColumn":53},{"ruleId":"775","severity":1,"message":"895","line":203,"column":11,"nodeType":"777","messageId":"778","endLine":203,"endColumn":57},{"ruleId":"881","severity":1,"message":"896","line":324,"column":9,"nodeType":"883","endLine":324,"endColumn":27,"suggestions":"897"},{"ruleId":"881","severity":1,"message":"896","line":349,"column":9,"nodeType":"883","endLine":349,"endColumn":27,"suggestions":"898"},{"ruleId":"775","severity":1,"message":"848","line":2,"column":10,"nodeType":"777","messageId":"778","endLine":2,"endColumn":26},{"ruleId":"775","severity":1,"message":"899","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":18},{"ruleId":"775","severity":1,"message":"900","line":5,"column":20,"nodeType":"777","messageId":"778","endLine":5,"endColumn":35},{"ruleId":"775","severity":1,"message":"793","line":6,"column":10,"nodeType":"777","messageId":"778","endLine":6,"endColumn":14},{"ruleId":"775","severity":1,"message":"901","line":8,"column":10,"nodeType":"777","messageId":"778","endLine":8,"endColumn":29},{"ruleId":"775","severity":1,"message":"850","line":8,"column":31,"nodeType":"777","messageId":"778","endLine":8,"endColumn":44},{"ruleId":"775","severity":1,"message":"851","line":8,"column":46,"nodeType":"777","messageId":"778","endLine":8,"endColumn":66},{"ruleId":"775","severity":1,"message":"852","line":8,"column":68,"nodeType":"777","messageId":"778","endLine":8,"endColumn":88},{"ruleId":"775","severity":1,"message":"853","line":8,"column":90,"nodeType":"777","messageId":"778","endLine":8,"endColumn":103},{"ruleId":"775","severity":1,"message":"784","line":9,"column":23,"nodeType":"777","messageId":"778","endLine":9,"endColumn":31},{"ruleId":"775","severity":1,"message":"821","line":10,"column":53,"nodeType":"777","messageId":"778","endLine":10,"endColumn":68},{"ruleId":"775","severity":1,"message":"855","line":10,"column":70,"nodeType":"777","messageId":"778","endLine":10,"endColumn":78},{"ruleId":"775","severity":1,"message":"839","line":12,"column":10,"nodeType":"777","messageId":"778","endLine":12,"endColumn":14},{"ruleId":"775","severity":1,"message":"832","line":22,"column":3,"nodeType":"777","messageId":"778","endLine":22,"endColumn":17},{"ruleId":"775","severity":1,"message":"818","line":23,"column":3,"nodeType":"777","messageId":"778","endLine":23,"endColumn":9},{"ruleId":"775","severity":1,"message":"891","line":24,"column":3,"nodeType":"777","messageId":"778","endLine":24,"endColumn":16},{"ruleId":"775","severity":1,"message":"860","line":26,"column":3,"nodeType":"777","messageId":"778","endLine":26,"endColumn":8},{"ruleId":"775","severity":1,"message":"861","line":27,"column":3,"nodeType":"777","messageId":"778","endLine":27,"endColumn":15},{"ruleId":"775","severity":1,"message":"862","line":30,"column":3,"nodeType":"777","messageId":"778","endLine":30,"endColumn":15},{"ruleId":"775","severity":1,"message":"863","line":31,"column":3,"nodeType":"777","messageId":"778","endLine":31,"endColumn":14},{"ruleId":"775","severity":1,"message":"864","line":32,"column":3,"nodeType":"777","messageId":"778","endLine":32,"endColumn":11},{"ruleId":"775","severity":1,"message":"865","line":33,"column":3,"nodeType":"777","messageId":"778","endLine":33,"endColumn":9},{"ruleId":"775","severity":1,"message":"866","line":34,"column":3,"nodeType":"777","messageId":"778","endLine":34,"endColumn":18},{"ruleId":"775","severity":1,"message":"795","line":35,"column":3,"nodeType":"777","messageId":"778","endLine":35,"endColumn":12},{"ruleId":"775","severity":1,"message":"867","line":36,"column":3,"nodeType":"777","messageId":"778","endLine":36,"endColumn":31},{"ruleId":"775","severity":1,"message":"868","line":37,"column":3,"nodeType":"777","messageId":"778","endLine":37,"endColumn":18},{"ruleId":"775","severity":1,"message":"869","line":40,"column":3,"nodeType":"777","messageId":"778","endLine":40,"endColumn":15},{"ruleId":"775","severity":1,"message":"894","line":67,"column":26,"nodeType":"777","messageId":"778","endLine":67,"endColumn":30},{"ruleId":"881","severity":1,"message":"902","line":108,"column":5,"nodeType":"883","endLine":108,"endColumn":22,"suggestions":"903"},{"ruleId":"775","severity":1,"message":"904","line":150,"column":9,"nodeType":"777","messageId":"778","endLine":150,"endColumn":29},{"ruleId":"775","severity":1,"message":"905","line":151,"column":9,"nodeType":"777","messageId":"778","endLine":151,"endColumn":40},{"ruleId":"775","severity":1,"message":"875","line":152,"column":9,"nodeType":"777","messageId":"778","endLine":152,"endColumn":49},{"ruleId":"775","severity":1,"message":"876","line":175,"column":9,"nodeType":"777","messageId":"778","endLine":175,"endColumn":18},{"ruleId":"775","severity":1,"message":"877","line":176,"column":9,"nodeType":"777","messageId":"778","endLine":176,"endColumn":30},{"ruleId":"775","severity":1,"message":"906","line":177,"column":9,"nodeType":"777","messageId":"778","endLine":177,"endColumn":38},{"ruleId":"775","severity":1,"message":"878","line":179,"column":9,"nodeType":"777","messageId":"778","endLine":179,"endColumn":19},{"ruleId":"775","severity":1,"message":"879","line":180,"column":9,"nodeType":"777","messageId":"778","endLine":180,"endColumn":37},{"ruleId":"775","severity":1,"message":"880","line":181,"column":9,"nodeType":"777","messageId":"778","endLine":181,"endColumn":28},{"ruleId":"844","severity":1,"message":"845","line":236,"column":64,"nodeType":"846","messageId":"847","endLine":236,"endColumn":66},{"ruleId":"881","severity":1,"message":"907","line":274,"column":5,"nodeType":"883","endLine":274,"endColumn":7,"suggestions":"908"},{"ruleId":"775","severity":1,"message":"848","line":2,"column":10,"nodeType":"777","messageId":"778","endLine":2,"endColumn":26},{"ruleId":"775","severity":1,"message":"899","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":18},{"ruleId":"775","severity":1,"message":"900","line":5,"column":20,"nodeType":"777","messageId":"778","endLine":5,"endColumn":35},{"ruleId":"775","severity":1,"message":"793","line":6,"column":10,"nodeType":"777","messageId":"778","endLine":6,"endColumn":14},{"ruleId":"775","severity":1,"message":"888","line":7,"column":10,"nodeType":"777","messageId":"778","endLine":7,"endColumn":20},{"ruleId":"775","severity":1,"message":"849","line":8,"column":10,"nodeType":"777","messageId":"778","endLine":8,"endColumn":33},{"ruleId":"775","severity":1,"message":"850","line":8,"column":35,"nodeType":"777","messageId":"778","endLine":8,"endColumn":48},{"ruleId":"775","severity":1,"message":"851","line":8,"column":50,"nodeType":"777","messageId":"778","endLine":8,"endColumn":70},{"ruleId":"775","severity":1,"message":"852","line":8,"column":72,"nodeType":"777","messageId":"778","endLine":8,"endColumn":92},{"ruleId":"775","severity":1,"message":"853","line":8,"column":94,"nodeType":"777","messageId":"778","endLine":8,"endColumn":107},{"ruleId":"775","severity":1,"message":"909","line":9,"column":10,"nodeType":"777","messageId":"778","endLine":9,"endColumn":21},{"ruleId":"775","severity":1,"message":"910","line":10,"column":10,"nodeType":"777","messageId":"778","endLine":10,"endColumn":18},{"ruleId":"775","severity":1,"message":"911","line":10,"column":20,"nodeType":"777","messageId":"778","endLine":10,"endColumn":46},{"ruleId":"775","severity":1,"message":"821","line":10,"column":55,"nodeType":"777","messageId":"778","endLine":10,"endColumn":70},{"ruleId":"775","severity":1,"message":"855","line":10,"column":72,"nodeType":"777","messageId":"778","endLine":10,"endColumn":80},{"ruleId":"775","severity":1,"message":"842","line":10,"column":104,"nodeType":"777","messageId":"778","endLine":10,"endColumn":112},{"ruleId":"775","severity":1,"message":"912","line":11,"column":73,"nodeType":"777","messageId":"778","endLine":11,"endColumn":96},{"ruleId":"775","severity":1,"message":"839","line":12,"column":10,"nodeType":"777","messageId":"778","endLine":12,"endColumn":14},{"ruleId":"775","severity":1,"message":"870","line":15,"column":8,"nodeType":"777","messageId":"778","endLine":15,"endColumn":31},{"ruleId":"775","severity":1,"message":"799","line":18,"column":21,"nodeType":"777","messageId":"778","endLine":18,"endColumn":36},{"ruleId":"775","severity":1,"message":"800","line":18,"column":38,"nodeType":"777","messageId":"778","endLine":18,"endColumn":46},{"ruleId":"775","severity":1,"message":"801","line":18,"column":48,"nodeType":"777","messageId":"778","endLine":18,"endColumn":52},{"ruleId":"775","severity":1,"message":"831","line":25,"column":5,"nodeType":"777","messageId":"778","endLine":25,"endColumn":19},{"ruleId":"775","severity":1,"message":"832","line":27,"column":5,"nodeType":"777","messageId":"778","endLine":27,"endColumn":19},{"ruleId":"775","severity":1,"message":"818","line":28,"column":5,"nodeType":"777","messageId":"778","endLine":28,"endColumn":11},{"ruleId":"775","severity":1,"message":"891","line":29,"column":5,"nodeType":"777","messageId":"778","endLine":29,"endColumn":18},{"ruleId":"775","severity":1,"message":"819","line":30,"column":5,"nodeType":"777","messageId":"778","endLine":30,"endColumn":18},{"ruleId":"775","severity":1,"message":"860","line":31,"column":5,"nodeType":"777","messageId":"778","endLine":31,"endColumn":10},{"ruleId":"775","severity":1,"message":"861","line":32,"column":5,"nodeType":"777","messageId":"778","endLine":32,"endColumn":17},{"ruleId":"775","severity":1,"message":"862","line":35,"column":5,"nodeType":"777","messageId":"778","endLine":35,"endColumn":17},{"ruleId":"775","severity":1,"message":"863","line":36,"column":5,"nodeType":"777","messageId":"778","endLine":36,"endColumn":16},{"ruleId":"775","severity":1,"message":"864","line":37,"column":5,"nodeType":"777","messageId":"778","endLine":37,"endColumn":13},{"ruleId":"775","severity":1,"message":"865","line":38,"column":5,"nodeType":"777","messageId":"778","endLine":38,"endColumn":11},{"ruleId":"775","severity":1,"message":"866","line":39,"column":5,"nodeType":"777","messageId":"778","endLine":39,"endColumn":20},{"ruleId":"775","severity":1,"message":"795","line":40,"column":5,"nodeType":"777","messageId":"778","endLine":40,"endColumn":14},{"ruleId":"775","severity":1,"message":"867","line":41,"column":5,"nodeType":"777","messageId":"778","endLine":41,"endColumn":33},{"ruleId":"775","severity":1,"message":"868","line":42,"column":5,"nodeType":"777","messageId":"778","endLine":42,"endColumn":20},{"ruleId":"775","severity":1,"message":"792","line":44,"column":5,"nodeType":"777","messageId":"778","endLine":44,"endColumn":9},{"ruleId":"775","severity":1,"message":"869","line":45,"column":5,"nodeType":"777","messageId":"778","endLine":45,"endColumn":17},{"ruleId":"775","severity":1,"message":"808","line":62,"column":18,"nodeType":"777","messageId":"778","endLine":62,"endColumn":28},{"ruleId":"775","severity":1,"message":"809","line":63,"column":16,"nodeType":"777","messageId":"778","endLine":63,"endColumn":24},{"ruleId":"775","severity":1,"message":"871","line":68,"column":18,"nodeType":"777","messageId":"778","endLine":68,"endColumn":41},{"ruleId":"775","severity":1,"message":"872","line":69,"column":16,"nodeType":"777","messageId":"778","endLine":69,"endColumn":37},{"ruleId":"775","severity":1,"message":"913","line":123,"column":11,"nodeType":"777","messageId":"778","endLine":123,"endColumn":30},{"ruleId":"775","severity":1,"message":"904","line":124,"column":11,"nodeType":"777","messageId":"778","endLine":124,"endColumn":31},{"ruleId":"775","severity":1,"message":"914","line":125,"column":11,"nodeType":"777","messageId":"778","endLine":125,"endColumn":33},{"ruleId":"775","severity":1,"message":"875","line":127,"column":11,"nodeType":"777","messageId":"778","endLine":127,"endColumn":51},{"ruleId":"775","severity":1,"message":"876","line":150,"column":11,"nodeType":"777","messageId":"778","endLine":150,"endColumn":20},{"ruleId":"775","severity":1,"message":"877","line":151,"column":11,"nodeType":"777","messageId":"778","endLine":151,"endColumn":32},{"ruleId":"775","severity":1,"message":"878","line":153,"column":11,"nodeType":"777","messageId":"778","endLine":153,"endColumn":21},{"ruleId":"775","severity":1,"message":"879","line":154,"column":11,"nodeType":"777","messageId":"778","endLine":154,"endColumn":39},{"ruleId":"775","severity":1,"message":"880","line":155,"column":11,"nodeType":"777","messageId":"778","endLine":155,"endColumn":30},{"ruleId":"881","severity":1,"message":"915","line":183,"column":9,"nodeType":"883","endLine":183,"endColumn":11,"suggestions":"916"},{"ruleId":"775","severity":1,"message":"848","line":2,"column":10,"nodeType":"777","messageId":"778","endLine":2,"endColumn":26},{"ruleId":"775","severity":1,"message":"917","line":2,"column":88,"nodeType":"777","messageId":"778","endLine":2,"endColumn":104},{"ruleId":"775","severity":1,"message":"918","line":2,"column":106,"nodeType":"777","messageId":"778","endLine":2,"endColumn":115},{"ruleId":"775","severity":1,"message":"833","line":2,"column":117,"nodeType":"777","messageId":"778","endLine":2,"endColumn":130},{"ruleId":"775","severity":1,"message":"829","line":2,"column":132,"nodeType":"777","messageId":"778","endLine":2,"endColumn":141},{"ruleId":"775","severity":1,"message":"899","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":18},{"ruleId":"775","severity":1,"message":"900","line":5,"column":20,"nodeType":"777","messageId":"778","endLine":5,"endColumn":35},{"ruleId":"775","severity":1,"message":"793","line":6,"column":10,"nodeType":"777","messageId":"778","endLine":6,"endColumn":14},{"ruleId":"775","severity":1,"message":"888","line":7,"column":10,"nodeType":"777","messageId":"778","endLine":7,"endColumn":20},{"ruleId":"775","severity":1,"message":"901","line":8,"column":10,"nodeType":"777","messageId":"778","endLine":8,"endColumn":29},{"ruleId":"775","severity":1,"message":"850","line":8,"column":31,"nodeType":"777","messageId":"778","endLine":8,"endColumn":44},{"ruleId":"775","severity":1,"message":"851","line":8,"column":46,"nodeType":"777","messageId":"778","endLine":8,"endColumn":66},{"ruleId":"775","severity":1,"message":"852","line":8,"column":68,"nodeType":"777","messageId":"778","endLine":8,"endColumn":88},{"ruleId":"775","severity":1,"message":"853","line":8,"column":90,"nodeType":"777","messageId":"778","endLine":8,"endColumn":103},{"ruleId":"775","severity":1,"message":"919","line":8,"column":105,"nodeType":"777","messageId":"778","endLine":8,"endColumn":117},{"ruleId":"775","severity":1,"message":"892","line":8,"column":119,"nodeType":"777","messageId":"778","endLine":8,"endColumn":132},{"ruleId":"775","severity":1,"message":"909","line":9,"column":10,"nodeType":"777","messageId":"778","endLine":9,"endColumn":21},{"ruleId":"775","severity":1,"message":"784","line":9,"column":23,"nodeType":"777","messageId":"778","endLine":9,"endColumn":31},{"ruleId":"775","severity":1,"message":"910","line":10,"column":10,"nodeType":"777","messageId":"778","endLine":10,"endColumn":18},{"ruleId":"775","severity":1,"message":"920","line":10,"column":20,"nodeType":"777","messageId":"778","endLine":10,"endColumn":44},{"ruleId":"775","severity":1,"message":"921","line":10,"column":46,"nodeType":"777","messageId":"778","endLine":10,"endColumn":51},{"ruleId":"775","severity":1,"message":"821","line":10,"column":53,"nodeType":"777","messageId":"778","endLine":10,"endColumn":68},{"ruleId":"775","severity":1,"message":"855","line":10,"column":70,"nodeType":"777","messageId":"778","endLine":10,"endColumn":78},{"ruleId":"775","severity":1,"message":"922","line":10,"column":80,"nodeType":"777","messageId":"778","endLine":10,"endColumn":88},{"ruleId":"775","severity":1,"message":"796","line":10,"column":104,"nodeType":"777","messageId":"778","endLine":10,"endColumn":124},{"ruleId":"775","severity":1,"message":"839","line":12,"column":10,"nodeType":"777","messageId":"778","endLine":12,"endColumn":14},{"ruleId":"775","severity":1,"message":"832","line":24,"column":3,"nodeType":"777","messageId":"778","endLine":24,"endColumn":17},{"ruleId":"775","severity":1,"message":"818","line":25,"column":3,"nodeType":"777","messageId":"778","endLine":25,"endColumn":9},{"ruleId":"775","severity":1,"message":"891","line":26,"column":3,"nodeType":"777","messageId":"778","endLine":26,"endColumn":16},{"ruleId":"775","severity":1,"message":"819","line":27,"column":3,"nodeType":"777","messageId":"778","endLine":27,"endColumn":16},{"ruleId":"775","severity":1,"message":"860","line":28,"column":3,"nodeType":"777","messageId":"778","endLine":28,"endColumn":8},{"ruleId":"775","severity":1,"message":"861","line":29,"column":3,"nodeType":"777","messageId":"778","endLine":29,"endColumn":15},{"ruleId":"775","severity":1,"message":"862","line":32,"column":3,"nodeType":"777","messageId":"778","endLine":32,"endColumn":15},{"ruleId":"775","severity":1,"message":"863","line":33,"column":3,"nodeType":"777","messageId":"778","endLine":33,"endColumn":14},{"ruleId":"775","severity":1,"message":"864","line":34,"column":3,"nodeType":"777","messageId":"778","endLine":34,"endColumn":11},{"ruleId":"775","severity":1,"message":"865","line":35,"column":3,"nodeType":"777","messageId":"778","endLine":35,"endColumn":9},{"ruleId":"775","severity":1,"message":"866","line":36,"column":3,"nodeType":"777","messageId":"778","endLine":36,"endColumn":18},{"ruleId":"775","severity":1,"message":"795","line":37,"column":3,"nodeType":"777","messageId":"778","endLine":37,"endColumn":12},{"ruleId":"775","severity":1,"message":"867","line":38,"column":3,"nodeType":"777","messageId":"778","endLine":38,"endColumn":31},{"ruleId":"775","severity":1,"message":"868","line":39,"column":3,"nodeType":"777","messageId":"778","endLine":39,"endColumn":18},{"ruleId":"775","severity":1,"message":"869","line":42,"column":3,"nodeType":"777","messageId":"778","endLine":42,"endColumn":15},{"ruleId":"775","severity":1,"message":"923","line":100,"column":9,"nodeType":"777","messageId":"778","endLine":100,"endColumn":22},{"ruleId":"775","severity":1,"message":"913","line":117,"column":9,"nodeType":"777","messageId":"778","endLine":117,"endColumn":28},{"ruleId":"775","severity":1,"message":"904","line":118,"column":9,"nodeType":"777","messageId":"778","endLine":118,"endColumn":29},{"ruleId":"775","severity":1,"message":"905","line":119,"column":9,"nodeType":"777","messageId":"778","endLine":119,"endColumn":40},{"ruleId":"775","severity":1,"message":"875","line":120,"column":9,"nodeType":"777","messageId":"778","endLine":120,"endColumn":49},{"ruleId":"775","severity":1,"message":"876","line":149,"column":9,"nodeType":"777","messageId":"778","endLine":149,"endColumn":18},{"ruleId":"775","severity":1,"message":"877","line":150,"column":9,"nodeType":"777","messageId":"778","endLine":150,"endColumn":30},{"ruleId":"775","severity":1,"message":"906","line":151,"column":9,"nodeType":"777","messageId":"778","endLine":151,"endColumn":38},{"ruleId":"775","severity":1,"message":"878","line":153,"column":9,"nodeType":"777","messageId":"778","endLine":153,"endColumn":19},{"ruleId":"775","severity":1,"message":"879","line":154,"column":9,"nodeType":"777","messageId":"778","endLine":154,"endColumn":37},{"ruleId":"775","severity":1,"message":"880","line":155,"column":9,"nodeType":"777","messageId":"778","endLine":155,"endColumn":28},{"ruleId":"775","severity":1,"message":"835","line":157,"column":9,"nodeType":"777","messageId":"778","endLine":157,"endColumn":51},{"ruleId":"775","severity":1,"message":"924","line":161,"column":9,"nodeType":"777","messageId":"778","endLine":161,"endColumn":15},{"ruleId":"844","severity":1,"message":"845","line":210,"column":72,"nodeType":"846","messageId":"847","endLine":210,"endColumn":74},{"ruleId":"881","severity":1,"message":"925","line":238,"column":5,"nodeType":"883","endLine":238,"endColumn":7,"suggestions":"926"},{"ruleId":"775","severity":1,"message":"899","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":18},{"ruleId":"775","severity":1,"message":"900","line":5,"column":20,"nodeType":"777","messageId":"778","endLine":5,"endColumn":35},{"ruleId":"775","severity":1,"message":"793","line":6,"column":10,"nodeType":"777","messageId":"778","endLine":6,"endColumn":14},{"ruleId":"775","severity":1,"message":"851","line":8,"column":46,"nodeType":"777","messageId":"778","endLine":8,"endColumn":66},{"ruleId":"775","severity":1,"message":"852","line":8,"column":68,"nodeType":"777","messageId":"778","endLine":8,"endColumn":88},{"ruleId":"775","severity":1,"message":"821","line":10,"column":55,"nodeType":"777","messageId":"778","endLine":10,"endColumn":70},{"ruleId":"775","severity":1,"message":"839","line":12,"column":10,"nodeType":"777","messageId":"778","endLine":12,"endColumn":14},{"ruleId":"775","severity":1,"message":"831","line":27,"column":5,"nodeType":"777","messageId":"778","endLine":27,"endColumn":19},{"ruleId":"775","severity":1,"message":"832","line":29,"column":5,"nodeType":"777","messageId":"778","endLine":29,"endColumn":19},{"ruleId":"775","severity":1,"message":"818","line":30,"column":5,"nodeType":"777","messageId":"778","endLine":30,"endColumn":11},{"ruleId":"775","severity":1,"message":"891","line":31,"column":5,"nodeType":"777","messageId":"778","endLine":31,"endColumn":18},{"ruleId":"775","severity":1,"message":"819","line":32,"column":5,"nodeType":"777","messageId":"778","endLine":32,"endColumn":18},{"ruleId":"775","severity":1,"message":"860","line":33,"column":5,"nodeType":"777","messageId":"778","endLine":33,"endColumn":10},{"ruleId":"775","severity":1,"message":"861","line":34,"column":5,"nodeType":"777","messageId":"778","endLine":34,"endColumn":17},{"ruleId":"775","severity":1,"message":"862","line":37,"column":5,"nodeType":"777","messageId":"778","endLine":37,"endColumn":17},{"ruleId":"775","severity":1,"message":"863","line":38,"column":5,"nodeType":"777","messageId":"778","endLine":38,"endColumn":16},{"ruleId":"775","severity":1,"message":"864","line":39,"column":5,"nodeType":"777","messageId":"778","endLine":39,"endColumn":13},{"ruleId":"775","severity":1,"message":"865","line":40,"column":5,"nodeType":"777","messageId":"778","endLine":40,"endColumn":11},{"ruleId":"775","severity":1,"message":"795","line":42,"column":5,"nodeType":"777","messageId":"778","endLine":42,"endColumn":14},{"ruleId":"775","severity":1,"message":"867","line":43,"column":5,"nodeType":"777","messageId":"778","endLine":43,"endColumn":33},{"ruleId":"775","severity":1,"message":"868","line":44,"column":5,"nodeType":"777","messageId":"778","endLine":44,"endColumn":20},{"ruleId":"775","severity":1,"message":"869","line":47,"column":5,"nodeType":"777","messageId":"778","endLine":47,"endColumn":17},{"ruleId":"775","severity":1,"message":"807","line":78,"column":16,"nodeType":"777","messageId":"778","endLine":78,"endColumn":31},{"ruleId":"775","severity":1,"message":"927","line":106,"column":16,"nodeType":"777","messageId":"778","endLine":106,"endColumn":29},{"ruleId":"775","severity":1,"message":"928","line":127,"column":12,"nodeType":"777","messageId":"778","endLine":127,"endColumn":18},{"ruleId":"775","severity":1,"message":"929","line":127,"column":31,"nodeType":"777","messageId":"778","endLine":127,"endColumn":40},{"ruleId":"775","severity":1,"message":"930","line":127,"column":52,"nodeType":"777","messageId":"778","endLine":127,"endColumn":64},{"ruleId":"844","severity":1,"message":"931","line":251,"column":66,"nodeType":"846","messageId":"932","endLine":251,"endColumn":68},{"ruleId":"881","severity":1,"message":"933","line":279,"column":9,"nodeType":"883","endLine":279,"endColumn":11,"suggestions":"934"},{"ruleId":"775","severity":1,"message":"935","line":290,"column":11,"nodeType":"777","messageId":"778","endLine":290,"endColumn":22},{"ruleId":"775","severity":1,"message":"936","line":296,"column":11,"nodeType":"777","messageId":"778","endLine":296,"endColumn":23},{"ruleId":"775","severity":1,"message":"894","line":330,"column":30,"nodeType":"777","messageId":"778","endLine":330,"endColumn":34},{"ruleId":"775","severity":1,"message":"937","line":4,"column":91,"nodeType":"777","messageId":"778","endLine":4,"endColumn":119},{"ruleId":"775","severity":1,"message":"796","line":4,"column":135,"nodeType":"777","messageId":"778","endLine":4,"endColumn":155},{"ruleId":"775","severity":1,"message":"938","line":5,"column":74,"nodeType":"777","messageId":"778","endLine":5,"endColumn":91},{"ruleId":"775","severity":1,"message":"841","line":8,"column":196,"nodeType":"777","messageId":"778","endLine":8,"endColumn":210},{"ruleId":"775","severity":1,"message":"939","line":11,"column":8,"nodeType":"777","messageId":"778","endLine":11,"endColumn":23},{"ruleId":"775","severity":1,"message":"940","line":68,"column":38,"nodeType":"777","messageId":"778","endLine":68,"endColumn":60},{"ruleId":"775","severity":1,"message":"941","line":100,"column":38,"nodeType":"777","messageId":"778","endLine":100,"endColumn":60},{"ruleId":"775","severity":1,"message":"942","line":341,"column":9,"nodeType":"777","messageId":"778","endLine":341,"endColumn":58},{"ruleId":"881","severity":1,"message":"943","line":347,"column":5,"nodeType":"883","endLine":347,"endColumn":26,"suggestions":"944"},{"ruleId":"881","severity":1,"message":"945","line":391,"column":5,"nodeType":"883","endLine":391,"endColumn":91,"suggestions":"946"},{"ruleId":"775","severity":1,"message":"947","line":57,"column":34,"nodeType":"777","messageId":"778","endLine":57,"endColumn":52},{"ruleId":"775","severity":1,"message":"948","line":89,"column":34,"nodeType":"777","messageId":"778","endLine":89,"endColumn":52},{"ruleId":"775","severity":1,"message":"894","line":125,"column":25,"nodeType":"777","messageId":"778","endLine":125,"endColumn":29},{"ruleId":"881","severity":1,"message":"949","line":330,"column":5,"nodeType":"883","endLine":330,"endColumn":23,"suggestions":"950"},{"ruleId":"775","severity":1,"message":"849","line":8,"column":10,"nodeType":"777","messageId":"778","endLine":8,"endColumn":33},{"ruleId":"775","severity":1,"message":"850","line":8,"column":35,"nodeType":"777","messageId":"778","endLine":8,"endColumn":48},{"ruleId":"775","severity":1,"message":"851","line":8,"column":50,"nodeType":"777","messageId":"778","endLine":8,"endColumn":70},{"ruleId":"775","severity":1,"message":"852","line":8,"column":72,"nodeType":"777","messageId":"778","endLine":8,"endColumn":92},{"ruleId":"775","severity":1,"message":"853","line":8,"column":94,"nodeType":"777","messageId":"778","endLine":8,"endColumn":107},{"ruleId":"775","severity":1,"message":"909","line":9,"column":10,"nodeType":"777","messageId":"778","endLine":9,"endColumn":21},{"ruleId":"775","severity":1,"message":"784","line":9,"column":23,"nodeType":"777","messageId":"778","endLine":9,"endColumn":31},{"ruleId":"775","severity":1,"message":"910","line":10,"column":10,"nodeType":"777","messageId":"778","endLine":10,"endColumn":18},{"ruleId":"775","severity":1,"message":"911","line":10,"column":20,"nodeType":"777","messageId":"778","endLine":10,"endColumn":46},{"ruleId":"775","severity":1,"message":"921","line":10,"column":48,"nodeType":"777","messageId":"778","endLine":10,"endColumn":53},{"ruleId":"775","severity":1,"message":"821","line":10,"column":55,"nodeType":"777","messageId":"778","endLine":10,"endColumn":70},{"ruleId":"775","severity":1,"message":"842","line":10,"column":104,"nodeType":"777","messageId":"778","endLine":10,"endColumn":112},{"ruleId":"775","severity":1,"message":"951","line":11,"column":29,"nodeType":"777","messageId":"778","endLine":11,"endColumn":47},{"ruleId":"775","severity":1,"message":"912","line":11,"column":73,"nodeType":"777","messageId":"778","endLine":11,"endColumn":96},{"ruleId":"775","severity":1,"message":"887","line":1,"column":17,"nodeType":"777","messageId":"778","endLine":1,"endColumn":25},{"ruleId":"775","severity":1,"message":"888","line":2,"column":17,"nodeType":"777","messageId":"778","endLine":2,"endColumn":27},{"ruleId":"775","severity":1,"message":"889","line":4,"column":20,"nodeType":"777","messageId":"778","endLine":4,"endColumn":40},{"ruleId":"775","severity":1,"message":"890","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":16},{"ruleId":"775","severity":1,"message":"818","line":12,"column":5,"nodeType":"777","messageId":"778","endLine":12,"endColumn":11},{"ruleId":"775","severity":1,"message":"891","line":13,"column":5,"nodeType":"777","messageId":"778","endLine":13,"endColumn":18},{"ruleId":"775","severity":1,"message":"819","line":14,"column":5,"nodeType":"777","messageId":"778","endLine":14,"endColumn":18},{"ruleId":"775","severity":1,"message":"863","line":20,"column":5,"nodeType":"777","messageId":"778","endLine":20,"endColumn":16},{"ruleId":"775","severity":1,"message":"865","line":22,"column":5,"nodeType":"777","messageId":"778","endLine":22,"endColumn":11},{"ruleId":"775","severity":1,"message":"867","line":25,"column":5,"nodeType":"777","messageId":"778","endLine":25,"endColumn":33},{"ruleId":"775","severity":1,"message":"782","line":30,"column":10,"nodeType":"777","messageId":"778","endLine":30,"endColumn":13},{"ruleId":"775","severity":1,"message":"784","line":30,"column":28,"nodeType":"777","messageId":"778","endLine":30,"endColumn":36},{"ruleId":"775","severity":1,"message":"952","line":31,"column":10,"nodeType":"777","messageId":"778","endLine":31,"endColumn":24},{"ruleId":"775","severity":1,"message":"953","line":31,"column":26,"nodeType":"777","messageId":"778","endLine":31,"endColumn":38},{"ruleId":"775","severity":1,"message":"850","line":31,"column":40,"nodeType":"777","messageId":"778","endLine":31,"endColumn":53},{"ruleId":"775","severity":1,"message":"893","line":39,"column":7,"nodeType":"777","messageId":"778","endLine":39,"endColumn":32},{"ruleId":"775","severity":1,"message":"894","line":108,"column":30,"nodeType":"777","messageId":"778","endLine":108,"endColumn":34},{"ruleId":"775","severity":1,"message":"835","line":184,"column":11,"nodeType":"777","messageId":"778","endLine":184,"endColumn":53},{"ruleId":"775","severity":1,"message":"895","line":191,"column":11,"nodeType":"777","messageId":"778","endLine":191,"endColumn":57},{"ruleId":"881","severity":1,"message":"896","line":312,"column":9,"nodeType":"883","endLine":312,"endColumn":27,"suggestions":"954"},{"ruleId":"881","severity":1,"message":"896","line":337,"column":9,"nodeType":"883","endLine":337,"endColumn":27,"suggestions":"955"},{"ruleId":"775","severity":1,"message":"887","line":1,"column":17,"nodeType":"777","messageId":"778","endLine":1,"endColumn":25},{"ruleId":"775","severity":1,"message":"888","line":2,"column":17,"nodeType":"777","messageId":"778","endLine":2,"endColumn":27},{"ruleId":"775","severity":1,"message":"889","line":4,"column":20,"nodeType":"777","messageId":"778","endLine":4,"endColumn":40},{"ruleId":"775","severity":1,"message":"890","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":16},{"ruleId":"775","severity":1,"message":"956","line":7,"column":10,"nodeType":"777","messageId":"778","endLine":7,"endColumn":25},{"ruleId":"775","severity":1,"message":"819","line":15,"column":5,"nodeType":"777","messageId":"778","endLine":15,"endColumn":18},{"ruleId":"775","severity":1,"message":"863","line":21,"column":5,"nodeType":"777","messageId":"778","endLine":21,"endColumn":16},{"ruleId":"775","severity":1,"message":"864","line":22,"column":5,"nodeType":"777","messageId":"778","endLine":22,"endColumn":13},{"ruleId":"775","severity":1,"message":"865","line":23,"column":5,"nodeType":"777","messageId":"778","endLine":23,"endColumn":11},{"ruleId":"775","severity":1,"message":"866","line":24,"column":5,"nodeType":"777","messageId":"778","endLine":24,"endColumn":20},{"ruleId":"775","severity":1,"message":"795","line":25,"column":5,"nodeType":"777","messageId":"778","endLine":25,"endColumn":14},{"ruleId":"775","severity":1,"message":"867","line":26,"column":5,"nodeType":"777","messageId":"778","endLine":26,"endColumn":33},{"ruleId":"775","severity":1,"message":"957","line":33,"column":5,"nodeType":"777","messageId":"778","endLine":33,"endColumn":19},{"ruleId":"775","severity":1,"message":"958","line":36,"column":10,"nodeType":"777","messageId":"778","endLine":36,"endColumn":33},{"ruleId":"775","severity":1,"message":"782","line":36,"column":35,"nodeType":"777","messageId":"778","endLine":36,"endColumn":38},{"ruleId":"775","severity":1,"message":"850","line":37,"column":45,"nodeType":"777","messageId":"778","endLine":37,"endColumn":58},{"ruleId":"775","severity":1,"message":"855","line":38,"column":63,"nodeType":"777","messageId":"778","endLine":38,"endColumn":71},{"ruleId":"775","severity":1,"message":"893","line":45,"column":7,"nodeType":"777","messageId":"778","endLine":45,"endColumn":32},{"ruleId":"775","severity":1,"message":"959","line":65,"column":18,"nodeType":"777","messageId":"778","endLine":65,"endColumn":33},{"ruleId":"775","severity":1,"message":"927","line":66,"column":16,"nodeType":"777","messageId":"778","endLine":66,"endColumn":29},{"ruleId":"775","severity":1,"message":"960","line":134,"column":15,"nodeType":"777","messageId":"778","endLine":134,"endColumn":20},{"ruleId":"775","severity":1,"message":"894","line":183,"column":28,"nodeType":"777","messageId":"778","endLine":183,"endColumn":32},{"ruleId":"775","severity":1,"message":"835","line":259,"column":11,"nodeType":"777","messageId":"778","endLine":259,"endColumn":53},{"ruleId":"775","severity":1,"message":"961","line":263,"column":11,"nodeType":"777","messageId":"778","endLine":263,"endColumn":64},{"ruleId":"775","severity":1,"message":"962","line":264,"column":11,"nodeType":"777","messageId":"778","endLine":264,"endColumn":56},{"ruleId":"775","severity":1,"message":"895","line":267,"column":11,"nodeType":"777","messageId":"778","endLine":267,"endColumn":57},{"ruleId":"775","severity":1,"message":"963","line":268,"column":11,"nodeType":"777","messageId":"778","endLine":268,"endColumn":59},{"ruleId":"775","severity":1,"message":"964","line":269,"column":11,"nodeType":"777","messageId":"778","endLine":269,"endColumn":51},{"ruleId":"881","severity":1,"message":"965","line":497,"column":9,"nodeType":"883","endLine":497,"endColumn":29,"suggestions":"966"},{"ruleId":"881","severity":1,"message":"967","line":512,"column":9,"nodeType":"883","endLine":512,"endColumn":29,"suggestions":"968"},{"ruleId":"881","severity":1,"message":"969","line":519,"column":9,"nodeType":"883","endLine":519,"endColumn":29,"suggestions":"970"},{"ruleId":"881","severity":1,"message":"971","line":533,"column":9,"nodeType":"883","endLine":533,"endColumn":29,"suggestions":"972"},{"ruleId":"881","severity":1,"message":"973","line":540,"column":9,"nodeType":"883","endLine":540,"endColumn":29,"suggestions":"974"},{"ruleId":"881","severity":1,"message":"975","line":554,"column":9,"nodeType":"883","endLine":554,"endColumn":29,"suggestions":"976"},{"ruleId":"775","severity":1,"message":"888","line":2,"column":17,"nodeType":"777","messageId":"778","endLine":2,"endColumn":27},{"ruleId":"775","severity":1,"message":"832","line":7,"column":5,"nodeType":"777","messageId":"778","endLine":7,"endColumn":19},{"ruleId":"775","severity":1,"message":"818","line":8,"column":5,"nodeType":"777","messageId":"778","endLine":8,"endColumn":11},{"ruleId":"775","severity":1,"message":"819","line":9,"column":5,"nodeType":"777","messageId":"778","endLine":9,"endColumn":18},{"ruleId":"775","severity":1,"message":"861","line":12,"column":5,"nodeType":"777","messageId":"778","endLine":12,"endColumn":17},{"ruleId":"775","severity":1,"message":"977","line":15,"column":5,"nodeType":"777","messageId":"778","endLine":15,"endColumn":16},{"ruleId":"775","severity":1,"message":"978","line":16,"column":5,"nodeType":"777","messageId":"778","endLine":16,"endColumn":16},{"ruleId":"775","severity":1,"message":"869","line":19,"column":5,"nodeType":"777","messageId":"778","endLine":19,"endColumn":17},{"ruleId":"775","severity":1,"message":"821","line":23,"column":17,"nodeType":"777","messageId":"778","endLine":23,"endColumn":32},{"ruleId":"775","severity":1,"message":"979","line":31,"column":6,"nodeType":"777","messageId":"778","endLine":31,"endColumn":11},{"ruleId":"775","severity":1,"message":"959","line":47,"column":18,"nodeType":"777","messageId":"778","endLine":47,"endColumn":33},{"ruleId":"775","severity":1,"message":"927","line":48,"column":16,"nodeType":"777","messageId":"778","endLine":48,"endColumn":29},{"ruleId":"775","severity":1,"message":"823","line":243,"column":7,"nodeType":"777","messageId":"778","endLine":243,"endColumn":19},{"ruleId":"775","severity":1,"message":"887","line":1,"column":17,"nodeType":"777","messageId":"778","endLine":1,"endColumn":25},{"ruleId":"775","severity":1,"message":"888","line":2,"column":17,"nodeType":"777","messageId":"778","endLine":2,"endColumn":27},{"ruleId":"775","severity":1,"message":"889","line":4,"column":20,"nodeType":"777","messageId":"778","endLine":4,"endColumn":40},{"ruleId":"775","severity":1,"message":"890","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":16},{"ruleId":"775","severity":1,"message":"956","line":7,"column":10,"nodeType":"777","messageId":"778","endLine":7,"endColumn":25},{"ruleId":"775","severity":1,"message":"819","line":15,"column":5,"nodeType":"777","messageId":"778","endLine":15,"endColumn":18},{"ruleId":"775","severity":1,"message":"863","line":21,"column":5,"nodeType":"777","messageId":"778","endLine":21,"endColumn":16},{"ruleId":"775","severity":1,"message":"864","line":22,"column":5,"nodeType":"777","messageId":"778","endLine":22,"endColumn":13},{"ruleId":"775","severity":1,"message":"865","line":23,"column":5,"nodeType":"777","messageId":"778","endLine":23,"endColumn":11},{"ruleId":"775","severity":1,"message":"866","line":24,"column":5,"nodeType":"777","messageId":"778","endLine":24,"endColumn":20},{"ruleId":"775","severity":1,"message":"795","line":25,"column":5,"nodeType":"777","messageId":"778","endLine":25,"endColumn":14},{"ruleId":"775","severity":1,"message":"867","line":26,"column":5,"nodeType":"777","messageId":"778","endLine":26,"endColumn":33},{"ruleId":"775","severity":1,"message":"957","line":33,"column":5,"nodeType":"777","messageId":"778","endLine":33,"endColumn":19},{"ruleId":"775","severity":1,"message":"958","line":36,"column":10,"nodeType":"777","messageId":"778","endLine":36,"endColumn":33},{"ruleId":"775","severity":1,"message":"782","line":36,"column":35,"nodeType":"777","messageId":"778","endLine":36,"endColumn":38},{"ruleId":"775","severity":1,"message":"850","line":37,"column":48,"nodeType":"777","messageId":"778","endLine":37,"endColumn":61},{"ruleId":"775","severity":1,"message":"855","line":38,"column":65,"nodeType":"777","messageId":"778","endLine":38,"endColumn":73},{"ruleId":"775","severity":1,"message":"893","line":45,"column":7,"nodeType":"777","messageId":"778","endLine":45,"endColumn":32},{"ruleId":"775","severity":1,"message":"959","line":65,"column":18,"nodeType":"777","messageId":"778","endLine":65,"endColumn":33},{"ruleId":"775","severity":1,"message":"927","line":66,"column":16,"nodeType":"777","messageId":"778","endLine":66,"endColumn":29},{"ruleId":"775","severity":1,"message":"960","line":134,"column":15,"nodeType":"777","messageId":"778","endLine":134,"endColumn":20},{"ruleId":"775","severity":1,"message":"894","line":183,"column":30,"nodeType":"777","messageId":"778","endLine":183,"endColumn":34},{"ruleId":"775","severity":1,"message":"835","line":265,"column":11,"nodeType":"777","messageId":"778","endLine":265,"endColumn":53},{"ruleId":"775","severity":1,"message":"961","line":271,"column":11,"nodeType":"777","messageId":"778","endLine":271,"endColumn":64},{"ruleId":"775","severity":1,"message":"962","line":272,"column":11,"nodeType":"777","messageId":"778","endLine":272,"endColumn":56},{"ruleId":"775","severity":1,"message":"895","line":275,"column":11,"nodeType":"777","messageId":"778","endLine":275,"endColumn":57},{"ruleId":"775","severity":1,"message":"963","line":276,"column":11,"nodeType":"777","messageId":"778","endLine":276,"endColumn":59},{"ruleId":"775","severity":1,"message":"964","line":277,"column":11,"nodeType":"777","messageId":"778","endLine":277,"endColumn":51},{"ruleId":"881","severity":1,"message":"965","line":504,"column":9,"nodeType":"883","endLine":504,"endColumn":26,"suggestions":"980"},{"ruleId":"881","severity":1,"message":"967","line":519,"column":9,"nodeType":"883","endLine":519,"endColumn":26,"suggestions":"981"},{"ruleId":"881","severity":1,"message":"969","line":526,"column":9,"nodeType":"883","endLine":526,"endColumn":26,"suggestions":"982"},{"ruleId":"881","severity":1,"message":"971","line":540,"column":9,"nodeType":"883","endLine":540,"endColumn":26,"suggestions":"983"},{"ruleId":"881","severity":1,"message":"973","line":547,"column":9,"nodeType":"883","endLine":547,"endColumn":26,"suggestions":"984"},{"ruleId":"881","severity":1,"message":"975","line":561,"column":9,"nodeType":"883","endLine":561,"endColumn":26,"suggestions":"985"},{"ruleId":"775","severity":1,"message":"837","line":4,"column":10,"nodeType":"777","messageId":"778","endLine":4,"endColumn":15},{"ruleId":"775","severity":1,"message":"838","line":4,"column":17,"nodeType":"777","messageId":"778","endLine":4,"endColumn":25},{"ruleId":"775","severity":1,"message":"840","line":6,"column":10,"nodeType":"777","messageId":"778","endLine":6,"endColumn":18},{"ruleId":"775","severity":1,"message":"841","line":6,"column":20,"nodeType":"777","messageId":"778","endLine":6,"endColumn":34},{"ruleId":"775","severity":1,"message":"842","line":7,"column":17,"nodeType":"777","messageId":"778","endLine":7,"endColumn":25},{"ruleId":"775","severity":1,"message":"849","line":8,"column":10,"nodeType":"777","messageId":"778","endLine":8,"endColumn":33},{"ruleId":"775","severity":1,"message":"952","line":8,"column":35,"nodeType":"777","messageId":"778","endLine":8,"endColumn":49},{"ruleId":"775","severity":1,"message":"986","line":8,"column":51,"nodeType":"777","messageId":"778","endLine":8,"endColumn":66},{"ruleId":"775","severity":1,"message":"782","line":9,"column":10,"nodeType":"777","messageId":"778","endLine":9,"endColumn":13},{"ruleId":"775","severity":1,"message":"784","line":9,"column":28,"nodeType":"777","messageId":"778","endLine":9,"endColumn":36},{"ruleId":"775","severity":1,"message":"843","line":10,"column":10,"nodeType":"777","messageId":"778","endLine":10,"endColumn":30},{"ruleId":"775","severity":1,"message":"987","line":11,"column":23,"nodeType":"777","messageId":"778","endLine":11,"endColumn":36},{"ruleId":"775","severity":1,"message":"848","line":12,"column":10,"nodeType":"777","messageId":"778","endLine":12,"endColumn":26},{"ruleId":"775","severity":1,"message":"817","line":12,"column":28,"nodeType":"777","messageId":"778","endLine":12,"endColumn":48},{"ruleId":"775","severity":1,"message":"869","line":12,"column":100,"nodeType":"777","messageId":"778","endLine":12,"endColumn":112},{"ruleId":"775","severity":1,"message":"988","line":12,"column":114,"nodeType":"777","messageId":"778","endLine":12,"endColumn":129},{"ruleId":"775","severity":1,"message":"989","line":14,"column":10,"nodeType":"777","messageId":"778","endLine":14,"endColumn":24},{"ruleId":"775","severity":1,"message":"990","line":14,"column":26,"nodeType":"777","messageId":"778","endLine":14,"endColumn":36},{"ruleId":"775","severity":1,"message":"991","line":14,"column":38,"nodeType":"777","messageId":"778","endLine":14,"endColumn":48},{"ruleId":"775","severity":1,"message":"992","line":14,"column":50,"nodeType":"777","messageId":"778","endLine":14,"endColumn":62},{"ruleId":"775","severity":1,"message":"993","line":15,"column":10,"nodeType":"777","messageId":"778","endLine":15,"endColumn":18},{"ruleId":"775","severity":1,"message":"994","line":16,"column":10,"nodeType":"777","messageId":"778","endLine":16,"endColumn":25},{"ruleId":"775","severity":1,"message":"995","line":19,"column":10,"nodeType":"777","messageId":"778","endLine":19,"endColumn":16},{"ruleId":"775","severity":1,"message":"996","line":19,"column":18,"nodeType":"777","messageId":"778","endLine":19,"endColumn":33},{"ruleId":"775","severity":1,"message":"997","line":47,"column":41,"nodeType":"777","messageId":"778","endLine":47,"endColumn":66},{"ruleId":"775","severity":1,"message":"948","line":86,"column":41,"nodeType":"777","messageId":"778","endLine":86,"endColumn":59},{"ruleId":"775","severity":1,"message":"998","line":230,"column":9,"nodeType":"777","messageId":"778","endLine":230,"endColumn":21},{"ruleId":"775","severity":1,"message":"999","line":245,"column":9,"nodeType":"777","messageId":"778","endLine":245,"endColumn":18},{"ruleId":"775","severity":1,"message":"1000","line":260,"column":9,"nodeType":"777","messageId":"778","endLine":260,"endColumn":23},{"ruleId":"775","severity":1,"message":"876","line":276,"column":9,"nodeType":"777","messageId":"778","endLine":276,"endColumn":18},{"ruleId":"775","severity":1,"message":"1001","line":277,"column":9,"nodeType":"777","messageId":"778","endLine":277,"endColumn":30},{"ruleId":"775","severity":1,"message":"837","line":2,"column":10,"nodeType":"777","messageId":"778","endLine":2,"endColumn":15},{"ruleId":"775","severity":1,"message":"838","line":2,"column":17,"nodeType":"777","messageId":"778","endLine":2,"endColumn":25},{"ruleId":"775","severity":1,"message":"839","line":3,"column":10,"nodeType":"777","messageId":"778","endLine":3,"endColumn":14},{"ruleId":"775","severity":1,"message":"840","line":4,"column":10,"nodeType":"777","messageId":"778","endLine":4,"endColumn":18},{"ruleId":"775","severity":1,"message":"841","line":4,"column":20,"nodeType":"777","messageId":"778","endLine":4,"endColumn":34},{"ruleId":"775","severity":1,"message":"921","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":15},{"ruleId":"775","severity":1,"message":"784","line":6,"column":10,"nodeType":"777","messageId":"778","endLine":6,"endColumn":18},{"ruleId":"775","severity":1,"message":"843","line":7,"column":10,"nodeType":"777","messageId":"778","endLine":7,"endColumn":30},{"ruleId":"775","severity":1,"message":"1002","line":67,"column":11,"nodeType":"777","messageId":"778","endLine":67,"endColumn":44},{"ruleId":"775","severity":1,"message":"832","line":7,"column":3,"nodeType":"777","messageId":"778","endLine":7,"endColumn":17},{"ruleId":"775","severity":1,"message":"818","line":8,"column":3,"nodeType":"777","messageId":"778","endLine":8,"endColumn":9},{"ruleId":"775","severity":1,"message":"819","line":9,"column":3,"nodeType":"777","messageId":"778","endLine":9,"endColumn":16},{"ruleId":"775","severity":1,"message":"861","line":11,"column":3,"nodeType":"777","messageId":"778","endLine":11,"endColumn":15},{"ruleId":"775","severity":1,"message":"977","line":14,"column":3,"nodeType":"777","messageId":"778","endLine":14,"endColumn":14},{"ruleId":"775","severity":1,"message":"850","line":18,"column":10,"nodeType":"777","messageId":"778","endLine":18,"endColumn":23},{"ruleId":"775","severity":1,"message":"921","line":19,"column":10,"nodeType":"777","messageId":"778","endLine":19,"endColumn":15},{"ruleId":"775","severity":1,"message":"821","line":19,"column":17,"nodeType":"777","messageId":"778","endLine":19,"endColumn":32},{"ruleId":"775","severity":1,"message":"782","line":20,"column":10,"nodeType":"777","messageId":"778","endLine":20,"endColumn":13},{"ruleId":"775","severity":1,"message":"784","line":20,"column":15,"nodeType":"777","messageId":"778","endLine":20,"endColumn":23},{"ruleId":"775","severity":1,"message":"979","line":24,"column":6,"nodeType":"777","messageId":"778","endLine":24,"endColumn":11},{"ruleId":"775","severity":1,"message":"1003","line":34,"column":10,"nodeType":"777","messageId":"778","endLine":34,"endColumn":21},{"ruleId":"775","severity":1,"message":"1004","line":34,"column":34,"nodeType":"777","messageId":"778","endLine":34,"endColumn":43},{"ruleId":"775","severity":1,"message":"1005","line":59,"column":7,"nodeType":"777","messageId":"778","endLine":59,"endColumn":30},{"ruleId":"775","severity":1,"message":"823","line":133,"column":7,"nodeType":"777","messageId":"778","endLine":133,"endColumn":19},{"ruleId":"775","severity":1,"message":"887","line":1,"column":17,"nodeType":"777","messageId":"778","endLine":1,"endColumn":25},{"ruleId":"775","severity":1,"message":"888","line":2,"column":17,"nodeType":"777","messageId":"778","endLine":2,"endColumn":27},{"ruleId":"775","severity":1,"message":"889","line":4,"column":20,"nodeType":"777","messageId":"778","endLine":4,"endColumn":40},{"ruleId":"775","severity":1,"message":"890","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":16},{"ruleId":"775","severity":1,"message":"956","line":7,"column":10,"nodeType":"777","messageId":"778","endLine":7,"endColumn":25},{"ruleId":"775","severity":1,"message":"819","line":15,"column":5,"nodeType":"777","messageId":"778","endLine":15,"endColumn":18},{"ruleId":"775","severity":1,"message":"863","line":21,"column":5,"nodeType":"777","messageId":"778","endLine":21,"endColumn":16},{"ruleId":"775","severity":1,"message":"864","line":22,"column":5,"nodeType":"777","messageId":"778","endLine":22,"endColumn":13},{"ruleId":"775","severity":1,"message":"865","line":23,"column":5,"nodeType":"777","messageId":"778","endLine":23,"endColumn":11},{"ruleId":"775","severity":1,"message":"866","line":24,"column":5,"nodeType":"777","messageId":"778","endLine":24,"endColumn":20},{"ruleId":"775","severity":1,"message":"795","line":25,"column":5,"nodeType":"777","messageId":"778","endLine":25,"endColumn":14},{"ruleId":"775","severity":1,"message":"867","line":26,"column":5,"nodeType":"777","messageId":"778","endLine":26,"endColumn":33},{"ruleId":"775","severity":1,"message":"957","line":33,"column":5,"nodeType":"777","messageId":"778","endLine":33,"endColumn":19},{"ruleId":"775","severity":1,"message":"958","line":36,"column":10,"nodeType":"777","messageId":"778","endLine":36,"endColumn":33},{"ruleId":"775","severity":1,"message":"782","line":36,"column":35,"nodeType":"777","messageId":"778","endLine":36,"endColumn":38},{"ruleId":"775","severity":1,"message":"784","line":36,"column":53,"nodeType":"777","messageId":"778","endLine":36,"endColumn":61},{"ruleId":"775","severity":1,"message":"850","line":37,"column":45,"nodeType":"777","messageId":"778","endLine":37,"endColumn":58},{"ruleId":"775","severity":1,"message":"893","line":45,"column":7,"nodeType":"777","messageId":"778","endLine":45,"endColumn":32},{"ruleId":"775","severity":1,"message":"960","line":103,"column":15,"nodeType":"777","messageId":"778","endLine":103,"endColumn":20},{"ruleId":"775","severity":1,"message":"894","line":151,"column":28,"nodeType":"777","messageId":"778","endLine":151,"endColumn":32},{"ruleId":"775","severity":1,"message":"835","line":226,"column":11,"nodeType":"777","messageId":"778","endLine":226,"endColumn":53},{"ruleId":"775","severity":1,"message":"961","line":232,"column":11,"nodeType":"777","messageId":"778","endLine":232,"endColumn":64},{"ruleId":"775","severity":1,"message":"962","line":233,"column":11,"nodeType":"777","messageId":"778","endLine":233,"endColumn":56},{"ruleId":"775","severity":1,"message":"895","line":236,"column":11,"nodeType":"777","messageId":"778","endLine":236,"endColumn":57},{"ruleId":"775","severity":1,"message":"963","line":237,"column":11,"nodeType":"777","messageId":"778","endLine":237,"endColumn":59},{"ruleId":"775","severity":1,"message":"964","line":238,"column":11,"nodeType":"777","messageId":"778","endLine":238,"endColumn":51},{"ruleId":"881","severity":1,"message":"965","line":467,"column":9,"nodeType":"883","endLine":467,"endColumn":22,"suggestions":"1006"},{"ruleId":"881","severity":1,"message":"967","line":482,"column":9,"nodeType":"883","endLine":482,"endColumn":22,"suggestions":"1007"},{"ruleId":"881","severity":1,"message":"969","line":489,"column":9,"nodeType":"883","endLine":489,"endColumn":22,"suggestions":"1008"},{"ruleId":"881","severity":1,"message":"971","line":503,"column":9,"nodeType":"883","endLine":503,"endColumn":22,"suggestions":"1009"},{"ruleId":"881","severity":1,"message":"973","line":510,"column":9,"nodeType":"883","endLine":510,"endColumn":22,"suggestions":"1010"},{"ruleId":"881","severity":1,"message":"975","line":524,"column":9,"nodeType":"883","endLine":524,"endColumn":22,"suggestions":"1011"},{"ruleId":"775","severity":1,"message":"1012","line":1,"column":27,"nodeType":"777","messageId":"778","endLine":1,"endColumn":36},{"ruleId":"775","severity":1,"message":"889","line":4,"column":20,"nodeType":"777","messageId":"778","endLine":4,"endColumn":40},{"ruleId":"775","severity":1,"message":"794","line":6,"column":5,"nodeType":"777","messageId":"778","endLine":6,"endColumn":16},{"ruleId":"775","severity":1,"message":"784","line":13,"column":23,"nodeType":"777","messageId":"778","endLine":13,"endColumn":31},{"ruleId":"775","severity":1,"message":"894","line":27,"column":30,"nodeType":"777","messageId":"778","endLine":27,"endColumn":34},{"ruleId":"775","severity":1,"message":"829","line":3,"column":10,"nodeType":"777","messageId":"778","endLine":3,"endColumn":19},{"ruleId":"775","severity":1,"message":"837","line":4,"column":10,"nodeType":"777","messageId":"778","endLine":4,"endColumn":15},{"ruleId":"775","severity":1,"message":"838","line":4,"column":17,"nodeType":"777","messageId":"778","endLine":4,"endColumn":25},{"ruleId":"775","severity":1,"message":"841","line":6,"column":20,"nodeType":"777","messageId":"778","endLine":6,"endColumn":34},{"ruleId":"775","severity":1,"message":"782","line":9,"column":10,"nodeType":"777","messageId":"778","endLine":9,"endColumn":13},{"ruleId":"775","severity":1,"message":"848","line":12,"column":10,"nodeType":"777","messageId":"778","endLine":12,"endColumn":26},{"ruleId":"775","severity":1,"message":"817","line":12,"column":28,"nodeType":"777","messageId":"778","endLine":12,"endColumn":48},{"ruleId":"775","severity":1,"message":"869","line":12,"column":100,"nodeType":"777","messageId":"778","endLine":12,"endColumn":112},{"ruleId":"775","severity":1,"message":"988","line":12,"column":114,"nodeType":"777","messageId":"778","endLine":12,"endColumn":129},{"ruleId":"775","severity":1,"message":"1013","line":42,"column":5,"nodeType":"777","messageId":"778","endLine":42,"endColumn":12},{"ruleId":"775","severity":1,"message":"1014","line":43,"column":5,"nodeType":"777","messageId":"778","endLine":43,"endColumn":10},{"ruleId":"881","severity":1,"message":"1015","line":70,"column":6,"nodeType":"883","endLine":70,"endColumn":26,"suggestions":"1016"},{"ruleId":"775","severity":1,"message":"1017","line":82,"column":34,"nodeType":"777","messageId":"778","endLine":82,"endColumn":52},{"ruleId":"844","severity":1,"message":"845","line":99,"column":60,"nodeType":"846","messageId":"847","endLine":99,"endColumn":62},{"ruleId":"775","severity":1,"message":"1018","line":195,"column":9,"nodeType":"777","messageId":"778","endLine":195,"endColumn":19},{"ruleId":"785","replacedBy":"786"},{"ruleId":"787","replacedBy":"788"},{"ruleId":"775","severity":1,"message":"829","line":3,"column":10,"nodeType":"777","messageId":"778","endLine":3,"endColumn":19},{"ruleId":"775","severity":1,"message":"837","line":4,"column":10,"nodeType":"777","messageId":"778","endLine":4,"endColumn":15},{"ruleId":"775","severity":1,"message":"838","line":4,"column":17,"nodeType":"777","messageId":"778","endLine":4,"endColumn":25},{"ruleId":"775","severity":1,"message":"839","line":5,"column":10,"nodeType":"777","messageId":"778","endLine":5,"endColumn":14},{"ruleId":"775","severity":1,"message":"840","line":6,"column":10,"nodeType":"777","messageId":"778","endLine":6,"endColumn":18},{"ruleId":"775","severity":1,"message":"841","line":6,"column":20,"nodeType":"777","messageId":"778","endLine":6,"endColumn":34},{"ruleId":"775","severity":1,"message":"849","line":8,"column":10,"nodeType":"777","messageId":"778","endLine":8,"endColumn":33},{"ruleId":"775","severity":1,"message":"1019","line":8,"column":35,"nodeType":"777","messageId":"778","endLine":8,"endColumn":47},{"ruleId":"775","severity":1,"message":"782","line":9,"column":10,"nodeType":"777","messageId":"778","endLine":9,"endColumn":13},{"ruleId":"775","severity":1,"message":"784","line":9,"column":28,"nodeType":"777","messageId":"778","endLine":9,"endColumn":36},{"ruleId":"775","severity":1,"message":"843","line":10,"column":10,"nodeType":"777","messageId":"778","endLine":10,"endColumn":30},{"ruleId":"775","severity":1,"message":"987","line":11,"column":23,"nodeType":"777","messageId":"778","endLine":11,"endColumn":36},{"ruleId":"775","severity":1,"message":"848","line":12,"column":10,"nodeType":"777","messageId":"778","endLine":12,"endColumn":26},{"ruleId":"775","severity":1,"message":"869","line":12,"column":100,"nodeType":"777","messageId":"778","endLine":12,"endColumn":112},{"ruleId":"775","severity":1,"message":"988","line":12,"column":114,"nodeType":"777","messageId":"778","endLine":12,"endColumn":129},{"ruleId":"775","severity":1,"message":"989","line":14,"column":10,"nodeType":"777","messageId":"778","endLine":14,"endColumn":24},{"ruleId":"775","severity":1,"message":"990","line":14,"column":26,"nodeType":"777","messageId":"778","endLine":14,"endColumn":36},{"ruleId":"775","severity":1,"message":"991","line":14,"column":38,"nodeType":"777","messageId":"778","endLine":14,"endColumn":48},{"ruleId":"775","severity":1,"message":"992","line":14,"column":50,"nodeType":"777","messageId":"778","endLine":14,"endColumn":62},{"ruleId":"775","severity":1,"message":"993","line":15,"column":10,"nodeType":"777","messageId":"778","endLine":15,"endColumn":18},{"ruleId":"775","severity":1,"message":"1020","line":68,"column":36,"nodeType":"777","messageId":"778","endLine":68,"endColumn":54},{"ruleId":"844","severity":1,"message":"845","line":86,"column":64,"nodeType":"846","messageId":"847","endLine":86,"endColumn":66},{"ruleId":"775","severity":1,"message":"1018","line":185,"column":11,"nodeType":"777","messageId":"778","endLine":185,"endColumn":21},{"ruleId":"775","severity":1,"message":"998","line":191,"column":11,"nodeType":"777","messageId":"778","endLine":191,"endColumn":23},{"ruleId":"775","severity":1,"message":"999","line":206,"column":11,"nodeType":"777","messageId":"778","endLine":206,"endColumn":20},{"ruleId":"775","severity":1,"message":"1000","line":221,"column":11,"nodeType":"777","messageId":"778","endLine":221,"endColumn":25},{"ruleId":"775","severity":1,"message":"876","line":237,"column":11,"nodeType":"777","messageId":"778","endLine":237,"endColumn":20},{"ruleId":"775","severity":1,"message":"1001","line":238,"column":11,"nodeType":"777","messageId":"778","endLine":238,"endColumn":32},{"ruleId":"775","severity":1,"message":"1021","line":7,"column":17,"nodeType":"777","messageId":"778","endLine":7,"endColumn":22},{"ruleId":"775","severity":1,"message":"1022","line":7,"column":24,"nodeType":"777","messageId":"778","endLine":7,"endColumn":38},{"ruleId":"775","severity":1,"message":"1023","line":7,"column":40,"nodeType":"777","messageId":"778","endLine":7,"endColumn":57},{"ruleId":"775","severity":1,"message":"850","line":9,"column":46,"nodeType":"777","messageId":"778","endLine":9,"endColumn":59},{"ruleId":"775","severity":1,"message":"959","line":72,"column":18,"nodeType":"777","messageId":"778","endLine":72,"endColumn":33},{"ruleId":"775","severity":1,"message":"927","line":73,"column":16,"nodeType":"777","messageId":"778","endLine":73,"endColumn":29},{"ruleId":"775","severity":1,"message":"894","line":111,"column":30,"nodeType":"777","messageId":"778","endLine":111,"endColumn":34},{"ruleId":"1024","severity":1,"message":"1025","line":160,"column":17,"nodeType":"777","messageId":"1026","endLine":160,"endColumn":30},{"ruleId":"1024","severity":1,"message":"1027","line":161,"column":17,"nodeType":"777","messageId":"1026","endLine":161,"endColumn":21},{"ruleId":"1024","severity":1,"message":"1025","line":168,"column":17,"nodeType":"777","messageId":"1026","endLine":168,"endColumn":30},{"ruleId":"1024","severity":1,"message":"1027","line":169,"column":17,"nodeType":"777","messageId":"1026","endLine":169,"endColumn":21},{"ruleId":"1024","severity":1,"message":"1027","line":178,"column":17,"nodeType":"777","messageId":"1026","endLine":178,"endColumn":21},{"ruleId":"1024","severity":1,"message":"1028","line":187,"column":17,"nodeType":"777","messageId":"1026","endLine":187,"endColumn":22},{"ruleId":"1024","severity":1,"message":"1027","line":189,"column":17,"nodeType":"777","messageId":"1026","endLine":189,"endColumn":21},{"ruleId":"1029","severity":1,"message":"1030","line":389,"column":21,"nodeType":"1031","messageId":"1032","endLine":389,"endColumn":27},{"ruleId":"1029","severity":1,"message":"1030","line":392,"column":21,"nodeType":"1031","messageId":"1032","endLine":392,"endColumn":27},{"ruleId":"1029","severity":1,"message":"1030","line":395,"column":21,"nodeType":"1031","messageId":"1032","endLine":395,"endColumn":27},{"ruleId":"1029","severity":1,"message":"1030","line":398,"column":21,"nodeType":"1031","messageId":"1032","endLine":398,"endColumn":27},{"ruleId":"1029","severity":1,"message":"1030","line":418,"column":21,"nodeType":"1031","messageId":"1032","endLine":418,"endColumn":27},{"ruleId":"1029","severity":1,"message":"1030","line":421,"column":21,"nodeType":"1031","messageId":"1032","endLine":421,"endColumn":27},{"ruleId":"1029","severity":1,"message":"1030","line":440,"column":21,"nodeType":"1031","messageId":"1032","endLine":440,"endColumn":27},{"ruleId":"1029","severity":1,"message":"1030","line":443,"column":21,"nodeType":"1031","messageId":"1032","endLine":443,"endColumn":27},{"ruleId":"1029","severity":1,"message":"1030","line":446,"column":21,"nodeType":"1031","messageId":"1032","endLine":446,"endColumn":27},{"ruleId":"1029","severity":1,"message":"1030","line":465,"column":21,"nodeType":"1031","messageId":"1032","endLine":465,"endColumn":27},{"ruleId":"1029","severity":1,"message":"1030","line":468,"column":21,"nodeType":"1031","messageId":"1032","endLine":468,"endColumn":27},{"ruleId":"1029","severity":1,"message":"1030","line":471,"column":21,"nodeType":"1031","messageId":"1032","endLine":471,"endColumn":27},"@typescript-eslint/no-unused-vars","'Customizer' is defined but never used.","Identifier","unusedVar","'AUTH_TOKEN' is defined but never used.","'resolvers' is defined but never used.","'InMemoryCache' is defined but never used.","'gql' is defined but never used.","'ApolloLink' is defined but never used.","'useQuery' is defined but never used.","no-native-reassign",["1033"],"no-negated-in-lhs",["1034"],"'ResolverMap' is defined but never used.","'AppResolvers' is defined but never used.","'logo' is defined but never used.","'Text' is defined but never used.","'Link' is defined but never used.","'FontWeights' is defined but never used.","'IComboBox' is defined but never used.","'SelectedPropertyList' is defined but never used.","'useApolloClient' is defined but never used.","'PDFViewer' is defined but never used.","'PDFDownloadLink' is defined but never used.","'Document' is defined but never used.","'Page' is defined but never used.","'cl' is assigned a value but never used.","'suburbLoading' is assigned a value but never used.","'suburbError' is assigned a value but never used.","'regionLoading' is assigned a value but never used.","'regionError' is assigned a value but never used.","'navigationError' is assigned a value but never used.","'pdfLoading' is assigned a value but never used.","'pdfError' is assigned a value but never used.","'propertyListLoading' is assigned a value but never used.","'propertyListError' is assigned a value but never used.","'landlordLoading' is assigned a value but never used.","'landlordError' is assigned a value but never used.","'propertyListsLoading' is assigned a value but never used.","'propertyListsError' is assigned a value but never used.","'Pivot' is defined but never used.","'IContextualMenuProps' is defined but never used.","'Toggle' is defined but never used.","'DefaultButton' is defined but never used.","'isLoggedInVar' is defined but never used.","'NavigationState' is defined but never used.","'pivotStyles' is assigned a value but never used.","'toggleStyles' is assigned a value but never used.","'signoutIcon' is assigned a value but never used.","'getTabId' is assigned a value but never used.","'handleLinkClick' is assigned a value but never used.","'onChangeSelectedPropertyListToggle' is assigned a value but never used.","'primaryButtonStyles' is assigned a value but never used.","'TextField' is defined but never used.","'getTheme' is defined but never used.","'mergeStyleSets' is defined but never used.","'ContextualMenu' is defined but never used.","'PrimaryButton' is defined but never used.","'IconButton' is defined but never used.","'textFieldStyles' is assigned a value but never used.","'signInIcon' is assigned a value but never used.","'Image' is defined but never used.","'ImageFit' is defined but never used.","'Icon' is defined but never used.","'Checkbox' is defined but never used.","'ICheckboxProps' is defined but never used.","'Property' is defined but never used.","'selectedPropertyList' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'CommandBarButton' is defined but never used.","'GET_SELECTED_PROPERTIES' is defined but never used.","'GET_NAV_STATE' is defined but never used.","'GET_DISTINCT_SUBURBS' is defined but never used.","'GET_DISTINCT_REGIONS' is defined but never used.","'UPDATE_IMAGES' is defined but never used.","'QueryMultiPropertyArgs' is defined but never used.","'Premises' is defined but never used.","'Agent' is defined but never used.","'PropertyList' is defined but never used.","'BlobProvider' is defined but never used.","'PreviewPDFPanel' is defined but never used.","'Modal' is defined but never used.","'IDragOptions' is defined but never used.","'IModalStyles' is defined but never used.","'mergeStyles' is defined but never used.","'ComboBox' is defined but never used.","'Fabric' is defined but never used.","'IComboBoxOption' is defined but never used.","'SelectableOptionMenuItemType' is defined but never used.","'IComboBoxStyles' is defined but never used.","'IStackStyles' is defined but never used.","'SelectedPropertyListPDF' is defined but never used.","'propertyListDataLoading' is assigned a value but never used.","'propertyListDataError' is assigned a value but never used.","'postPropertyListData' is assigned a value but never used.","'handlePDFDDownload' is assigned a value but never used.","'commandBarStyles' is assigned a value but never used.","'boldStyle' is assigned a value but never used.","'propertyDetailsStyles' is assigned a value but never used.","'boldStyle2' is assigned a value but never used.","'propertyDetailsHeadingStyles' is assigned a value but never used.","'propertyNotesStyles' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useCallback has missing dependencies: 'cancelIcon', 'cancelIconStyles', 'clearIcon', and 'clearIconStyles'. Either include them or remove the dependency array.","ArrayExpression",["1035"],"React Hook React.useCallback has missing dependencies: 'agentOptions', 'buttonStyles', 'dropdownStyles', 'handlePreviewPDF', 'menuPropsPDF', 'onChangeEnquiryName', 'postPropertyListButton', 'saveListButtonStyles', 'selectedAgent', 'textFieldStyles', and 'toggleIsOutputOptionsCalloutVisible'. Either include them or remove the dependency array.",["1036"],"'useState' is defined but never used.","'useBoolean' is defined but never used.","'DropdownMenuItemType' is defined but never used.","'Slider' is defined but never used.","'IToggleStyles' is defined but never used.","'GET_LANDLORDS' is defined but never used.","'dragOptions' is assigned a value but never used.","'data' is assigned a value but never used.","'dropdownSectorStyles' is assigned a value but never used.","React Hook React.useCallback has an unnecessary dependency: 'selectedLandlord'. Either exclude it or remove the dependency array.",["1037"],["1038"],"'Dropdown' is defined but never used.","'IDropdownOption' is defined but never used.","'GET_SINGLE_PROPERTY' is defined but never used.","React Hook React.useCallback has an unnecessary dependency: 'addLandlordName'. Either exclude it or remove the dependency array.",["1039"],"'editIcon' is assigned a value but never used.","'photoCollectionIcon' is assigned a value but never used.","'propertyDetailsLandlordStyles' is assigned a value but never used.","React Hook React.useCallback has missing dependencies: 'addIcon', 'addIconStyles', 'cancelIcon', 'deleteIconStyles', and 'toggleIsAddCalloutVisible'. Either include them or remove the dependency array.",["1040"],"'useMutation' is defined but never used.","'Mutation' is defined but never used.","'MutationUpdatePropertyArgs' is defined but never used.","'selectedPropertyListVar' is defined but never used.","'addIcon' is assigned a value but never used.","'deleteIcon' is assigned a value but never used.","React Hook React.useCallback has missing dependencies: 'cancelIcon' and 'cancelIconStyles'. Either include them or remove the dependency array.",["1041"],"'FocusTrapCallout' is defined but never used.","'FocusZone' is defined but never used.","'NEW_LANDLORD' is defined but never used.","'MutationPostLandlordArgs' is defined but never used.","'Query' is defined but never used.","'Landlord' is defined but never used.","'addIconStyles' is assigned a value but never used.","'styles' is assigned a value but never used.","React Hook React.useCallback has missing dependencies: 'cancelIcon', 'clearIcon', 'clearIconStyles', and 'deleteIconStyles'. Either include them or remove the dependency array.",["1042"],"'propertyError' is assigned a value but never used.","'isOpen' is assigned a value but never used.","'openPanel' is assigned a value but never used.","'dismissPanel' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook React.useCallback has missing dependencies: 'cancelIcon', 'deleteIconStyles', 'editIcon', and 'editIconStyles'. Either include them or remove the dependency array.",["1043"],"'getLatitude' is assigned a value but never used.","'getLongitude' is assigned a value but never used.","'MutationPostPropertyListArgs' is defined but never used.","'NEW_PROPERTY_LIST' is defined but never used.","'ContactListItem' is defined but never used.","'deletePropertyListData' is assigned a value but never used.","'updatePropertyListData' is assigned a value but never used.","'textFieldContactStyles' is assigned a value but never used.","React Hook React.useCallback has a missing dependency: 'editPropertyList'. Either include it or remove the dependency array. You can also do a functional update 'setEditPropertyList(e => ...)' if you only need 'editPropertyList' in the 'setEditPropertyList' call.",["1044"],"React Hook React.useCallback has an unnecessary dependency: 'editPropertyList.customTitle'. Either exclude it or remove the dependency array.",["1045"],"'deleteLandlordData' is assigned a value but never used.","'updateLandlordData' is assigned a value but never used.","React Hook React.useCallback has an unnecessary dependency: 'editLandlordName'. Either exclude it or remove the dependency array.",["1046"],"'navigationStateVar' is defined but never used.","'GET_PROPERTIES' is defined but never used.","'NEW_PROPERTY' is defined but never used.",["1047"],["1048"],"'IRenderFunction' is defined but never used.","'ICalendarProps' is defined but never used.","'defaultDataIdFromObject' is defined but never used.","'propertyLoading' is assigned a value but never used.","'today' is assigned a value but never used.","'textFieldCoordinatesStyles' is assigned a value but never used.","'textFieldErfStyles' is assigned a value but never used.","'dropdownProvinceStyles' is assigned a value but never used.","'comboBoxStyles' is assigned a value but never used.","React Hook React.useCallback has a missing dependency: 'getOpenRatio'. Either include it or remove the dependency array.",["1049"],"React Hook React.useCallback has a missing dependency: 'getOpenBays'. Either include it or remove the dependency array.",["1050"],"React Hook React.useCallback has a missing dependency: 'getCoveredRatio'. Either include it or remove the dependency array.",["1051"],"React Hook React.useCallback has a missing dependency: 'getCoveredBays'. Either include it or remove the dependency array.",["1052"],"React Hook React.useCallback has a missing dependency: 'getShadedRatio'. Either include it or remove the dependency array.",["1053"],"React Hook React.useCallback has a missing dependency: 'getShadedBays'. Either include it or remove the dependency array.",["1054"],"'ILayerProps' is defined but never used.","'IModalProps' is defined but never used.","'Maybe' is defined but never used.",["1055"],["1056"],["1057"],["1058"],["1059"],["1060"],"'DELETE_PROPERTY' is defined but never used.","'registerIcons' is defined but never used.","'initializeIcons' is defined but never used.","'IndustrialIcon' is defined but never used.","'RetailIcon' is defined but never used.","'OfficeIcon' is defined but never used.","'MixedUseIcon' is defined but never used.","'FontIcon' is defined but never used.","'navigationState' is defined but never used.","'motion' is defined but never used.","'AnimatePresence' is defined but never used.","'deleteLandlordContactData' is assigned a value but never used.","'chevronClass' is assigned a value but never used.","'iconClass' is assigned a value but never used.","'chevronIconDiv' is assigned a value but never used.","'propertyHeadingStyles' is assigned a value but never used.","'tableCellBelowStyles' is assigned a value but never used.","'isModalOpen' is assigned a value but never used.","'showModal' is assigned a value but never used.","'modalProps' is assigned a value but never used.",["1061"],["1062"],["1063"],["1064"],["1065"],["1066"],"'useEffect' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","React Hook React.useCallback has a missing dependency: 'property'. Either include it or remove the dependency array.",["1067"],"'deletePropertyData' is assigned a value but never used.","'imageClass' is assigned a value but never used.","'GET_PREMISES' is defined but never used.","'deletePremisesData' is assigned a value but never used.","'Video' is defined but never used.","'Transformation' is defined but never used.","'CloudinaryContext' is defined but never used.","@typescript-eslint/no-redeclare","'selectedImage' is already defined.","redeclared","'rest' is already defined.","'final' is already defined.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"desc":"1068","fix":"1069"},{"desc":"1070","fix":"1071"},{"desc":"1072","fix":"1073"},{"desc":"1072","fix":"1074"},{"desc":"1072","fix":"1075"},{"desc":"1076","fix":"1077"},{"desc":"1078","fix":"1079"},{"desc":"1080","fix":"1081"},{"desc":"1082","fix":"1083"},{"desc":"1084","fix":"1085"},{"desc":"1086","fix":"1087"},{"desc":"1072","fix":"1088"},{"desc":"1072","fix":"1089"},{"desc":"1072","fix":"1090"},{"desc":"1091","fix":"1092"},{"desc":"1093","fix":"1094"},{"desc":"1095","fix":"1096"},{"desc":"1097","fix":"1098"},{"desc":"1099","fix":"1100"},{"desc":"1101","fix":"1102"},{"desc":"1103","fix":"1104"},{"desc":"1105","fix":"1106"},{"desc":"1107","fix":"1108"},{"desc":"1109","fix":"1110"},{"desc":"1111","fix":"1112"},{"desc":"1113","fix":"1114"},{"desc":"1115","fix":"1116"},{"desc":"1117","fix":"1118"},{"desc":"1119","fix":"1120"},{"desc":"1121","fix":"1122"},{"desc":"1123","fix":"1124"},{"desc":"1125","fix":"1126"},{"desc":"1127","fix":"1128"},"Update the dependencies array to be: [cancelIcon, cancelIconStyles, clearIcon, clearIconStyles]",{"range":"1129","text":"1130"},"Update the dependencies array to be: [agentOptions, buttonStyles, dropdownStyles, enquiryName, handlePreviewPDF, menuPropsPDF, onChangeEnquiryName, postPropertyListButton, saveListButtonStyles, selectedAgent, textFieldStyles, toggleIsOutputOptionsCalloutVisible]",{"range":"1131","text":"1132"},"Update the dependencies array to be: []",{"range":"1133","text":"1134"},{"range":"1135","text":"1134"},{"range":"1136","text":"1134"},"Update the dependencies array to be: [addIcon, addIconStyles, cancelIcon, deleteIconStyles, toggleIsAddCalloutVisible]",{"range":"1137","text":"1138"},"Update the dependencies array to be: [cancelIcon, cancelIconStyles]",{"range":"1139","text":"1140"},"Update the dependencies array to be: [cancelIcon, clearIcon, clearIconStyles, deleteIconStyles]",{"range":"1141","text":"1142"},"Update the dependencies array to be: [cancelIcon, deleteIconStyles, editIcon, editIconStyles]",{"range":"1143","text":"1144"},"Update the dependencies array to be: [editPropertyList]",{"range":"1145","text":"1146"},"Update the dependencies array to be: [editPropertyList.enquiryName, propertyList.properties]",{"range":"1147","text":"1148"},{"range":"1149","text":"1134"},{"range":"1150","text":"1134"},{"range":"1151","text":"1134"},"Update the dependencies array to be: [duplicatedPremises, getOpenRatio]",{"range":"1152","text":"1153"},"Update the dependencies array to be: [duplicatedPremises, getOpenBays]",{"range":"1154","text":"1155"},"Update the dependencies array to be: [duplicatedPremises, getCoveredRatio]",{"range":"1156","text":"1157"},"Update the dependencies array to be: [duplicatedPremises, getCoveredBays]",{"range":"1158","text":"1159"},"Update the dependencies array to be: [duplicatedPremises, getShadedRatio]",{"range":"1160","text":"1161"},"Update the dependencies array to be: [duplicatedPremises, getShadedBays]",{"range":"1162","text":"1163"},"Update the dependencies array to be: [getOpenRatio, updatedPremises]",{"range":"1164","text":"1165"},"Update the dependencies array to be: [getOpenBays, updatedPremises]",{"range":"1166","text":"1167"},"Update the dependencies array to be: [getCoveredRatio, updatedPremises]",{"range":"1168","text":"1169"},"Update the dependencies array to be: [getCoveredBays, updatedPremises]",{"range":"1170","text":"1171"},"Update the dependencies array to be: [getShadedRatio, updatedPremises]",{"range":"1172","text":"1173"},"Update the dependencies array to be: [getShadedBays, updatedPremises]",{"range":"1174","text":"1175"},"Update the dependencies array to be: [getOpenRatio, newPremises]",{"range":"1176","text":"1177"},"Update the dependencies array to be: [getOpenBays, newPremises]",{"range":"1178","text":"1179"},"Update the dependencies array to be: [getCoveredRatio, newPremises]",{"range":"1180","text":"1181"},"Update the dependencies array to be: [getCoveredBays, newPremises]",{"range":"1182","text":"1183"},"Update the dependencies array to be: [getShadedRatio, newPremises]",{"range":"1184","text":"1185"},"Update the dependencies array to be: [getShadedBays, newPremises]",{"range":"1186","text":"1187"},"Update the dependencies array to be: [property, selectedProperties]",{"range":"1188","text":"1189"},[16202,16204],"[cancelIcon, cancelIconStyles, clearIcon, clearIconStyles]",[19763,19776],"[agentOptions, buttonStyles, dropdownStyles, enquiryName, handlePreviewPDF, menuPropsPDF, onChangeEnquiryName, postPropertyListButton, saveListButtonStyles, selectedAgent, textFieldStyles, toggleIsOutputOptionsCalloutVisible]",[11769,11787],"[]",[12578,12596],[3267,3284],[7888,7890],"[addIcon, addIconStyles, cancelIcon, deleteIconStyles, toggleIsAddCalloutVisible]",[5866,5868],"[cancelIcon, cancelIconStyles]",[6864,6866],"[cancelIcon, clearIcon, clearIconStyles, deleteIconStyles]",[9166,9168],"[cancelIcon, deleteIconStyles, editIcon, editIconStyles]",[10774,10795],"[editPropertyList]",[12124,12210],"[editPropertyList.enquiryName, propertyList.properties]",[9314,9332],[12785,12803],[13605,13623],[18222,18242],"[duplicatedPremises, getOpenRatio]",[18874,18894],"[duplicatedPremises, getOpenBays]",[19235,19255],"[duplicatedPremises, getCoveredRatio]",[19903,19923],"[duplicatedPremises, getCoveredBays]",[20260,20280],"[duplicatedPremises, getShadedRatio]",[20922,20942],"[duplicatedPremises, getShadedBays]",[18433,18450],"[getOpenRatio, updatedPremises]",[19067,19084],"[getOpenBays, updatedPremises]",[19419,19436],"[getCoveredRatio, updatedPremises]",[20069,20086],"[getCoveredBays, updatedPremises]",[20417,20434],"[getShadedRatio, updatedPremises]",[21061,21078],"[getShadedBays, updatedPremises]",[16657,16670],"[getOpenRatio, newPremises]",[17270,17283],"[getOpenBays, newPremises]",[17611,17624],"[getCoveredRatio, newPremises]",[18237,18250],"[getCoveredBays, newPremises]",[18574,18587],"[getShadedRatio, newPremises]",[19194,19207],"[getShadedBays, newPremises]",[2389,2409],"[property, selectedProperties]"]